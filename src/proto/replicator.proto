import "antidote.proto";
option go_package = "proto";

//protoc -I=. --go_out=. ./replicator.proto

message ProtoStableClock {
    required int32 senderID = 1;
    required int64 replicaTs = 2;
}

message ProtoReplicatePart {
    required int32 senderID = 1;
    required ProtoRemoteTxn txn = 2;
    required int64 partitionID = 3;
}

message ProtoRemoteTxn {
    required bytes timestamp = 1;
    repeated ProtoDownstreamUpd upds = 2;
}

message ProtoDownstreamUpd {
    required ApbBoundObject keyParams = 1;
    required ProtoOpDownstream op = 2;
}

message ProtoOpDownstream {
    optional ProtoCounterDownstream counterOp = 1;
    optional ProtoSetDownstream setOp = 2;
    optional ProtoTopKRmvDownstream topkrmvOp = 3;
    optional ProtoLWWRegisterDownstream lwwregOp = 4;
    optional ProtoORMapDownstream ormapOp = 5;
    optional ProtoAvgDownstream avgOp = 6;
    optional ProtoMaxMinDownstream maxminOp = 7;
    optional ProtoRWEmbMapDownstream rwembmapOp = 8;
}

message ProtoCounterDownstream {
    required bool isInc = 1;
    required int32 change = 2;
}

message ProtoLWWRegisterDownstream {
    required bytes value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoSetDownstream {
    repeated ProtoValueUnique adds = 1;    //key -> unique
    repeated ProtoValueUniques rems = 2;   //key -> set/array of uniques
}

message ProtoORMapDownstream {
    repeated ProtoKeyValueUnique adds = 1;  //key -> (element, unique)
    repeated ProtoORMapRemove rems = 2;
}

message ProtoTopKRmvDownstream {
    repeated ProtoTopKElement adds = 1;
    repeated ProtoTopKIdVc rems = 2;
}

message ProtoAvgDownstream {
    required int64 sumValue = 1;
    required int64 nAdds = 2;
}

message ProtoMaxMinDownstream {
    optional ProtoMaxDownstream max = 1;
    optional ProtoMinDownstream min = 2;
}

message ProtoMaxDownstream {
    required int64 value = 1;
}

message ProtoMinDownstream {
    required int64 value = 1;
}

message ProtoValueUnique {
    required bytes value = 1;
    required uint64 unique = 2;
}

message ProtoValueUniques {
    required bytes value = 1;
    repeated uint64 uniques = 2;
}

message ProtoKeyValueUnique {
    required bytes key = 1;
    required bytes element = 2;
    required uint64 unique = 3;
}

message ProtoORMapRemove {
    required bytes key = 1;
    repeated ProtoValueUniques elems = 2;
}

message ProtoTopKElement {
    required int32 id = 1;
    required int32 score = 2;
    required int64 ts = 3;
    required int32 replicaID = 4;
    optional bytes data = 5;
}

message ProtoTopKIdVc {
    required int32 id = 1;
    required bytes vc = 2;
}

message ProtoRWEmbMapDownstream {
    optional ProtoRWEmbMapUpdates adds = 1;
    optional ProtoRWEmbMapRemoves rems = 2;
}

message ProtoRWEmbMapUpdates {
    repeated ProtoEmbMapUpd upds = 1;
    repeated ProtoStableClock vc = 2;
    required int32 replicaID = 3;
}

message ProtoRWEmbMapRemoves {
    repeated string keys = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoEmbMapUpd {
    required bytes key = 1;
    required CRDT_type type = 2;
    required ProtoOpDownstream upd = 3;
}