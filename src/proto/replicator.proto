import "antidote.proto";
option go_package = "proto";

//protoc -I=. --go_out=. ./replicator.proto

message ProtoStableClock {
    required int32 senderID = 1;
    required int64 replicaTs = 2;
}

message ProtoReplicatePart {
    required int32 senderID = 1;
    required ProtoRemoteTxn txn = 2;
    required int64 partitionID = 3;
}

message ProtoRemoteTxn {
    required bytes timestamp = 1;
    repeated ProtoDownstreamUpd upds = 2;
}

message ProtoDownstreamUpd {
    required ApbBoundObject keyParams = 1;
    required ProtoOpDownstream op = 2;
}

message ProtoOpDownstream {
    optional ProtoCounterDownstream counterOp = 1;
    optional ProtoSetDownstream setOp = 2;
    optional ProtoTopKRmvDownstream topkrmvOp = 3;
    optional ProtoLWWRegisterDownstream lwwregOp = 4;
    optional ProtoORMapDownstream ormapOp = 5;
    optional ProtoAvgDownstream avgOp = 6;
    optional ProtoMaxMinDownstream maxminOp = 7;
    optional ProtoRWEmbMapDownstream rwembmapOp = 8;
    optional ProtoTopSumDownstream topsumOp = 9;
    optional ProtoResetDownstream resetOp = 15;
}

message ProtoCounterDownstream {
    required bool isInc = 1;
    required int32 change = 2;
}

message ProtoLWWRegisterDownstream {
    required bytes value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoSetDownstream {
    repeated ProtoValueUnique adds = 1;    //key -> unique
    repeated ProtoValueUniques rems = 2;   //key -> set/array of uniques
}

message ProtoORMapDownstream {
    repeated ProtoKeyValueUnique adds = 1;  //key -> (element, unique)
    repeated ProtoORMapRemove rems = 2;
}

message ProtoTopKRmvDownstream {
    repeated ProtoTopKElement adds = 1;
    optional ProtoTopKRmvRemove rems = 2;
}

message ProtoTopKRmvRemove {
    repeated bytes vcs = 1;  //If client-generated remove: only 1 entry. If topk-generated due to add: 1 entry per id.
    repeated int32 ids = 2;
}

message ProtoAvgDownstream {
    required int64 sumValue = 1;
    required int64 nAdds = 2;
}

message ProtoMaxMinDownstream {
    optional ProtoMaxDownstream max = 1;
    optional ProtoMinDownstream min = 2;
}

message ProtoMaxDownstream {
    required int64 value = 1;
}

message ProtoMinDownstream {
    required int64 value = 1;
}

message ProtoValueUnique {
    required bytes value = 1;
    required uint64 unique = 2;
}

message ProtoValueUniques {
    required bytes value = 1;
    repeated uint64 uniques = 2;
}

message ProtoKeyValueUnique {
    required bytes key = 1;
    required bytes element = 2;
    required uint64 unique = 3;
}

message ProtoORMapRemove {
    required bytes key = 1;
    repeated ProtoValueUniques elems = 2;
}

message ProtoTopKElement {
    required int32 id = 1;
    required int32 score = 2;
    required int64 ts = 3;
    required int32 replicaID = 4;
    optional bytes data = 5;
}

message ProtoTopKIdVc {
    required int32 id = 1;
    required bytes vc = 2;
}

message ProtoRWEmbMapDownstream {
    optional ProtoRWEmbMapUpdates adds = 1;
    optional ProtoRWEmbMapRemoves rems = 2;
}

message ProtoRWEmbMapUpdates {
    repeated ProtoEmbMapUpd upds = 1;
    repeated ProtoStableClock vc = 2;
    required int32 replicaID = 3;
}

message ProtoRWEmbMapRemoves {
    repeated string keys = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoEmbMapUpd {
    required bytes key = 1;
    required CRDT_type type = 2;
    required ProtoOpDownstream upd = 3;
}

message ProtoTopSumElement {
    required int32 id = 1;
    required int32 score = 2;
    optional bytes data = 3;
}

message ProtoTopSumDownstream {
    repeated ProtoTopSumElement elems = 1;
    required bool isPositive = 2;
}

message ProtoResetDownstream {
}

/*****REPLICA MANAGEMENT*****/

message ProtoRemoteID {
    required int32 replicaID = 1;
}

message ProtoJoin {
    repeated string buckets = 1;
    required int32 replicaID = 2;
    required string replicaIP = 3;
    //required int32 connID = 4;  //ConnID in the sender side for this replica. This information is needed later for requesting buckets.
}

message ProtoReplyJoin {
    repeated string buckets = 1; 
    //repeated ProtoClock partsClk = 2;
    repeated bytes partsClk = 2;
    required int32 replicaID = 3;
    //required int32 connID = 4;  //Used to know which connection to request the buckets from.
    required string replicaIP = 4;  //Used to know which connection to request the buckets from.
}

/*
message ProtoClock {
    repeated ProtoStableClock entries = 1;
}*/

message ProtoRequestBucket {
    repeated string buckets = 1;
    //repeated ProtoClock partsClk = 2;
    //repeated bytes partsClk = 2;
    required int32 replicaID = 2;
    required string replicaIP = 3;  //Used to know which connection to send the buckets to
}

//This contains CRDTs for all the buckets requested, not just one bucket.
message ProtoReplyBucket {
    required int32 replicaID = 1;
    required bytes clk = 2;
    repeated ProtoPartition parts = 3;
}

message ProtoPartition {
    repeated ProtoCRDT states = 1;
}

message ProtoCRDT {
    required uint64 keyHash = 1;
    required CRDT_type type = 2;
    required ProtoState state = 3;
}

//TODO: Clock for genericInversibleCRDT initialization? And replicaID.
message ProtoState {
    optional ProtoCounterState counter = 1;
    optional ProtoLWWRegState lwwreg = 2;
    optional ProtoAWSetState awset = 3;
    optional ProtoORMapState ormap = 4;
    optional ProtoEmbMapState embmap = 5;
    optional ProtoMaxMinState maxmin = 6;
    optional ProtoTopKState topk = 7;
    optional ProtoAvgState avg = 8;
    optional ProtoTopSumState topsum = 9;
}

message ProtoReplyEmpty {

}

//*****STATES*****
message ProtoCounterState {
    required int32 value = 1;
}
message ProtoLWWRegState {
    required bytes value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}
message ProtoAWSetState {
    repeated ProtoValueUniques elems = 1;
}
message ProtoORMapState {
    repeated ProtoORMapRemove entries = 1;
}
message ProtoEmbMapState {
    repeated ProtoEmbMapEntry crdts = 1;
    repeated ProtoEmbMapRemove removes = 2;
    //required ProtoClock rmvClock = 3;
    required bytes rmvClock = 3;
}
message ProtoEmbMapEntry {
    required string key = 1;
    required CRDT_type type = 2;
    required ProtoState state = 3;
}
message ProtoEmbMapRemove {
    required string key = 1;
    //TODO: Marks?
    repeated ProtoStableClock clks = 2;
}
message ProtoMaxMinState {
    required int64 value = 1;
}
message ProtoAvgState {
    required int64 sum = 1;
    required int64 nAdds = 2;
}
//TODO: This one could be changed to just include the list of elements and maxElems,
//and then have everything else be calculated on the moment.
message ProtoTopKState {
    repeated ProtoTopKElement elems = 1;
    repeated ProtoTopKIdVc rems = 2;
    //notTop maybe deserves its own msg? Since the key will be repeated.
    repeated ProtoTopKElement notTop = 3;
    optional ProtoTopKElement smallest = 4;
    required int32 maxElems = 5;
    required bytes vc = 6;
}

//TODO: Same improvement as in TopKState.
message ProtoTopSumState {
    repeated ProtoTopSumElement elems = 1;
    //note: this actually corresponds to notInTop - notPropagated (value-wise)
    repeated ProtoTopSumElement notTop = 2; 
    optional ProtoTopSumElement smallest = 3;
    required int32 maxElems = 4;
    //Note: notPropagated isn't included.
}