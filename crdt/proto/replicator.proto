import "antidote.proto";
option go_package = "potionDB/crdt/proto";

//protoc -I=. --go_out=. ./replicator.proto

message ProtoStableClock {
    required int32 senderID = 1;
    required int64 replicaTs = 2;
}

message ProtoReplicatePart {
    required int32 senderID = 1;
    required ProtoRemoteTxn txn = 2;
    required int64 partitionID = 3;
    required int32 txnID = 4;       //Note: this ID is not the actual txnID, just an ID used to distinguish different txns
}

message ProtoReplicateGroupTxn {
    required int32 senderID = 1;
    repeated ProtoReplicateTxn txns = 2;
    required int32 minTxnID = 3;
    required int32 maxTxnID = 4;
}

message ProtoReplicateTxn {
    required int32 senderID = 1;
    required bytes timestamp = 2;
    repeated ProtoNewRemoteTxn part = 3;       //One per partition in the txn
    required int32 txnID = 4;
}

message ProtoNewRemoteTxn {
    repeated ProtoDownstreamUpd upds = 1;
    required int64 partitionID = 2;
}

message ProtoRemoteTxn {
    required bytes timestamp = 1;
    repeated ProtoDownstreamUpd upds = 2;
}

message ProtoDownstreamUpd {
    required ApbBoundObject keyParams = 1;
    required ProtoOpDownstream op = 2;
}

message ProtoOpDownstream {
    optional ProtoCounterDownstream counterOp = 1;
    optional ProtoSetDownstream setOp = 2;
    optional ProtoTopKRmvDownstream topkrmvOp = 3;
    optional ProtoLWWRegisterDownstream lwwregOp = 4;
    optional ProtoORMapDownstream ormapOp = 5;
    optional ProtoAvgDownstream avgOp = 6;
    optional ProtoMaxMinDownstream maxminOp = 7;
    optional ProtoRWEmbMapDownstream rwembmapOp = 8;
    optional ProtoTopSumDownstream topsumOp = 9;
    optional ProtoFlagDownstream flagOp = 10;
    optional ProtoBCounterDownstream bcounterOp = 11;
    optional ProtoTopKDownstream topkOp = 12;
    optional ProtoCounterFloatDownstream counterfloatOp = 13;
    optional ProtoTopKInitDownstream topkinitOp = 14;
    optional ProtoResetDownstream resetOp = 15;
    optional ProtoPairCounterDownstream pairCounterOp = 16;
    optional ProtoArrayCounterDownstream arrayCounterOp = 17;
    optional ProtoMultiArrayDownstream multiArrayOp = 18;
    optional ProtoMVRegisterDownstream mvregOp = 19;
    optional ProtoSimpleDateDownstream simpleDateOp = 20;
    optional ProtoSetWDateDownstream setWDateOp = 21;
    optional ProtoIncWDateDownstream incWDateOp = 22;
    optional ProtoSetOnlyDateDownstream dateOnlyDateOp = 23;
}

message ProtoCounterDownstream {
    required bool isInc = 1;
    required int32 change = 2;
}

message ProtoCounterFloatDownstream {
    required bool isInc = 1;
    required double change = 2;
}

message ProtoLWWRegisterDownstream {
    required bytes value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoSetDownstream {
    repeated ProtoValueUnique adds = 1;    //key -> unique
    repeated ProtoValueUniques rems = 2;   //key -> set/array of uniques
}

message ProtoORMapDownstream {
    repeated ProtoKeyValueUnique adds = 1;  //key -> (element, unique)
    repeated ProtoORMapRemove rems = 2;
}

message ProtoTopKRmvDownstream {
    repeated ProtoTopKElement adds = 1;
    optional ProtoTopKRmvRemove rems = 2;
}

message ProtoTopKDownstream {
    repeated ProtoTopKScore adds = 1;
}

message ProtoTopKRmvRemove {
    repeated bytes vcs = 1;  //If client-generated remove: only 1 entry. If topk-generated due to add: 1 entry per id.
    repeated int32 ids = 2;
}

message ProtoTopKInitDownstream {
    required uint32 topSize = 1;
    optional bool isTopSum = 2; //If not present, it's assumed to be TopK.
}

message ProtoAvgDownstream {
    required int64 sumValue = 1;
    required int64 nAdds = 2;
}

message ProtoMaxMinDownstream {
    optional ProtoMaxDownstream max = 1;
    optional ProtoMinDownstream min = 2;
}

message ProtoMaxDownstream {
    required int64 value = 1;
}

message ProtoMinDownstream {
    required int64 value = 1;
}

message ProtoValueUnique {
    required bytes value = 1;
    required uint64 unique = 2;
}

message ProtoValueUniques {
    required bytes value = 1;
    repeated uint64 uniques = 2;
}

message ProtoKeyValueUnique {
    required bytes key = 1;
    required bytes element = 2;
    required uint64 unique = 3;
}

message ProtoORMapRemove {
    required bytes key = 1;
    repeated ProtoValueUniques elems = 2;
}

message ProtoTopKElement {
    required int32 id = 1;
    required int32 score = 2;
    required int64 ts = 3;
    required int32 replicaID = 4;
    optional bytes data = 5;
}

message ProtoTopKScore {
    required int32 id = 1;
    required int32 score = 2;
    optional bytes data = 3;
}

message ProtoTopKIdVc {
    required int32 id = 1;
    required bytes vc = 2;
}

message ProtoRWEmbMapDownstream {
    optional ProtoRWEmbMapUpdates adds = 1;
    optional ProtoRWEmbMapRemoves rems = 2;
}

message ProtoRWEmbMapUpdates {
    repeated ProtoEmbMapUpd upds = 1;
    repeated ProtoStableClock vc = 2;
    required int32 replicaID = 3;
    optional bool isArray = 4;  //If not present, it's assumed to be false.
}

message ProtoRWEmbMapRemoves {
    repeated string keys = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

message ProtoEmbMapUpd {
    required bytes key = 1;
    required CRDT_type type = 2;
    required ProtoOpDownstream upd = 3;
}

message ProtoTopSumElement {
    required int32 id = 1;
    required int32 score = 2;
    optional bytes data = 3;
}

message ProtoTopSumDownstream {
    repeated ProtoTopSumElement elems = 1;
    required bool isPositive = 2;
}

message ProtoFlagDownstream {
    optional ProtoEnableLWWDownstream enableLWW = 1;
    optional ProtoDisableLWWDownstream disableLWW = 2;
    optional ProtoEnableEWDownstream enableEW = 3;
    optional ProtoDisableEWDownstream disableEW = 4;
    optional ProtoEnableDWDownstream enableDW = 5;
    optional ProtoDisableDWDownstream disableDW = 6;
}

message ProtoEnableLWWDownstream {
    required int64 ts = 1;
    required int32 replicaID = 2;
}

message ProtoDisableLWWDownstream {
    required int64 ts = 1;
    required int32 replicaID = 2;
}

message ProtoEnableEWDownstream {
    required uint64 unique = 1;
}

message ProtoDisableEWDownstream {
    repeated uint64 seenUniques = 1; 
}

message ProtoEnableDWDownstream {
    repeated uint64 seenUniques = 1;
}

message ProtoDisableDWDownstream {
    required uint64 unique = 1;
}

message ProtoBCounterDownstream {
    optional ProtoSetBoundCounterDownstream setBounds = 1;
    optional ProtoTransferCounterDownstream transfer = 2;
    optional ProtoIncBCounterDownstream inc = 3;
    optional ProtoDecBCounterDownstream dec = 4;
}

message ProtoSetBoundCounterDownstream {
    required int32 limit = 1;
    required bool compEq = 2;
    required int32 value = 3;
}

message ProtoTransferCounterDownstream {
    required int32 transferValue = 1;
    required int32 fromID = 2;
    required int32 toID = 3;
}

message ProtoIncBCounterDownstream {
    required int32 change = 1;
    required int32 replicaID = 2;
}

message ProtoDecBCounterDownstream {
    required int32 change = 1;
    required int32 replicaID = 2;
}

message ProtoResetDownstream {
}

message ProtoPairCounterDownstream {
    required bool isInc = 1;
    optional sint32 firstChange = 2;
    optional double secondChange = 3;
}

message ProtoArrayCounterDownstream {
    required bool isInc = 1;
    optional ProtoArrayCounterIncrementDownstream inc = 2;
    optional ProtoArrayCounterIncrementAllDownstream incAll = 3;
    optional ProtoArrayCounterIncrementMultiDownstream incMulti = 4;
    optional ProtoArrayCounterIncrementSubDownstream incSub = 5;
    optional ProtoArraySetSize size = 6;
}

message ProtoArrayCounterIncrementDownstream {
    required int32 index = 1;
    required int64 inc = 2;
}

message ProtoArrayCounterIncrementAllDownstream {
    required int64 inc = 1;
}

message ProtoArrayCounterIncrementMultiDownstream {
    repeated int64 incs = 1;
}

message ProtoArrayCounterIncrementSubDownstream {
    repeated int32 indexes = 1;
    repeated int64 incs = 2;
}

message ProtoArraySetSize {
    required int32 size = 1;
}

message ProtoMultiArrayDownstream {
    required MultiArrayType type = 1;
    optional ProtoMultiArrayIntDownstream intUpd = 2;
    optional ProtoMultiArrayFloatDownstream floatUpd = 3;
    optional ProtoMultiArrayDataDownstream dataUpd = 4;
    optional ProtoMultiArrayAvgDownstream avgUpd = 5;
    optional ProtoMultiArrayMultiUpdateDownstream multiUpd = 6;
    optional ProtoMultiArraySetSizeDownstream sizeUpd = 7;
}

message ProtoMultiArrayIntDownstream {
    optional ProtoMultiArrayIntIncDownstream inc = 1;
    optional ProtoMultiArrayIntIncSingleDownstream incSingle = 2;
    optional ProtoMultiArrayIntIncPositionsDownstream incPos = 3;
    optional ProtoMultiArrayIntIncRangeDownstream incRange = 4;
}

message ProtoMultiArrayFloatDownstream {
    optional ProtoMultiArrayFloatIncDownstream inc = 1;
    optional ProtoMultiArrayFloatIncSingleDownstream incSingle = 2;
    optional ProtoMultiArrayFloatIncPositionsDownstream incPos = 3;
    optional ProtoMultiArrayFloatIncRangeDownstream incRange = 4;
}

message ProtoMultiArrayDataDownstream {
    optional ProtoMultiArrayDataSetDownstream set = 1;
    optional ProtoMultiArrayDataSetSingleDownstream setSingle = 2;
    optional ProtoMultiArrayDataSetPositionsDownstream setPos = 3;
    optional ProtoMultiArrayDataSetRangeDownstream setRange = 4;
}

message ProtoMultiArrayAvgDownstream {
    optional ProtoMultiArrayAvgIncDownstream inc = 1;
    optional ProtoMultiArrayAvgIncSingleDownstream incSingle = 2;
    optional ProtoMultiArrayAvgIncPositionsDownstream incPos = 3;
    optional ProtoMultiArrayAvgIncRangeDownstream incRange = 4;
}

message ProtoMultiArrayIntIncDownstream {
    repeated int64 changes = 1;
}

message ProtoMultiArrayIntIncSingleDownstream {
    required int32 pos = 1;
    required int64 change = 2;
}

message ProtoMultiArrayIntIncPositionsDownstream {
    repeated int32 pos = 1;
    repeated int64 change = 2; //If only 1 value, the same value will be applied to all of pos.
}

message ProtoMultiArrayIntIncRangeDownstream {
    required int32 from = 1;
    required int32 to = 2;
    required int64 change = 3;
}

message ProtoMultiArrayFloatIncDownstream {
    repeated double changes = 1;
}

message ProtoMultiArrayFloatIncSingleDownstream {
    required int32 pos = 1;
    required double change = 2;
}

message ProtoMultiArrayFloatIncPositionsDownstream {
    repeated int32 pos = 1;
    repeated double change = 2; //If only 1 value, the same value will be applied to all of pos.
}

message ProtoMultiArrayFloatIncRangeDownstream {
    required int32 from = 1;
    required int32 to = 2;
    required double change = 3;
}

message ProtoMultiArrayDataSetDownstream {
    repeated bytes data = 1;
    required uint64 tsId = 2;
}

message ProtoMultiArrayDataSetSingleDownstream {
    required int32 pos = 1;
    required bytes data = 2;
    required uint64 tsId = 3;
}

message ProtoMultiArrayDataSetPositionsDownstream {
    repeated int32 pos = 1;
    repeated bytes data = 2;    //If only 1 value, the same value will be applied to all of pos.
    required uint64 tsId = 3;
}

message ProtoMultiArrayDataSetRangeDownstream {
    required int32 from = 1;
    required int32 to = 2;
    required bytes data = 3;
    required uint64 tsId = 4;
}

message ProtoMultiArrayAvgIncDownstream {
    repeated int64 value = 1;
    repeated int32 count = 2;
}

message ProtoMultiArrayAvgIncSingleDownstream {
    required int32 pos = 1;
    optional int32 count = 2;   //If not present, 1 is assumed.
    required int64 value = 3;
}

message ProtoMultiArrayAvgIncPositionsDownstream {
    repeated int32 pos = 1;
    repeated int64 value = 2;
    repeated int32 count = 3;
}

message ProtoMultiArrayAvgIncRangeDownstream {
    required int32 from = 1;
    required int32 to = 2;
    required int64 value = 3;
    required int32 count = 4;
}

message ProtoMultiArrayMultiUpdateDownstream {
    repeated int64 ints = 1;
    repeated double floats = 2;
    repeated bytes data = 3;
    optional uint64 tsId = 4;    //Only needed if data is set.
    repeated int32 counts = 5;
    repeated int64 sums = 6;
}

message ProtoMultiArraySetSizeDownstream {
    optional int32 intSize = 1;
    optional int32 floatSize = 2;
    optional int32 dataSize = 3;
    optional int32 avgSize = 4;
}

message ProtoMVRegisterDownstream {
    required bytes value = 1;
    required bytes clk = 2;
    required int32 replicaID = 3;
}

message ProtoSimpleDateDownstream {
    optional bool isInitialSet = 1;  //If not present, it's assumed to be false.
    required int64 inc = 2;
}

message ProtoSetWDateDownstream {
    optional ProtoSetWIncDownstream setWInc = 1;
    optional ProtoSetWSetDownstream setWSet = 2;
}

//TODO: Need to update this (and the incW too.)

message ProtoSetWIncDownstream {
    required bytes vc = 1;
    required int64 inc = 2;
}

message ProtoSetWSetDownstream {
    required bytes vc = 1;
    required int64 value = 2;
    required int32 replicaID = 3; 
}

message ProtoIncWDateDownstream {
    optional ProtoIncWIncDownstream incWInc = 1;
    optional ProtoIncWSetDownstream incWSet = 2;
}

message ProtoIncWIncDownstream {
    required int64 inc = 1;
    required int32 replicaID = 2;
    required bytes vc = 3;
}

message ProtoIncWSetDownstream {
    required bytes vc = 1;
    required int64 value = 2;
    required int32 replicaID = 3;
    map<int32,int64> seenIncs = 4;  //replicaID -> value
}

message ProtoSetOnlyDateDownstream {
    required int64 value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}

/*****REPLICA MANAGEMENT*****/

message ProtoRemoteID {
    required int32 replicaID = 1;
    repeated string myBuckets = 2;
    required string myIP = 3;
}

message ProtoJoin {
    repeated string buckets = 1;
    required int32 replicaID = 2;
    required string replicaIP = 3;
    //required int32 connID = 4;  //ConnID in the sender side for this replica. This information is needed later for requesting buckets.
}

message ProtoReplyJoin {
    repeated string buckets = 1; 
    //repeated ProtoClock partsClk = 2;
    repeated bytes partsClk = 2;
    required int32 replicaID = 3;
    //required int32 connID = 4;  //Used to know which connection to request the buckets from.
    required string replicaIP = 4;  //Used to know which connection to request the buckets from.
}

/*
message ProtoClock {
    repeated ProtoStableClock entries = 1;
}*/

message ProtoRequestBucket {
    repeated string buckets = 1;
    //repeated ProtoClock partsClk = 2;
    //repeated bytes partsClk = 2;
    required int32 replicaID = 2;
    required string replicaIP = 3;  //Used to know which connection to send the buckets to
}

//This contains CRDTs for all the buckets requested, not just one bucket.
message ProtoReplyBucket {
    required int32 replicaID = 1;
    required bytes clk = 2;
    repeated ProtoPartition parts = 3;
}

message ProtoPartition {
    repeated ProtoCRDT states = 1;
}

message ProtoCRDT {
    required uint64 keyHash = 1;
    required CRDT_type type = 2;
    required ProtoState state = 3;
}

//TODO: Clock for genericInversibleCRDT initialization? And replicaID.
message ProtoState {
    optional ProtoCounterState counter = 1;
    optional ProtoLWWRegState lwwreg = 2;
    optional ProtoAWSetState awset = 3;
    optional ProtoORMapState ormap = 4;
    optional ProtoEmbMapState embmap = 5;
    optional ProtoMaxMinState maxmin = 6;
    optional ProtoTopKRmvState topkrmv = 7;
    optional ProtoAvgState avg = 8;
    optional ProtoTopSumState topsum = 9;
    optional ProtoFlagState flag = 10;
    optional ProtoBoundedCounterState bcounter = 11;
    optional ProtoTopKState topk = 12;
    optional ProtoCounterFloatState counterfloat = 13;
    optional ProtoPairCounterState pairCounter = 14;
    optional ProtoArrayCounterState arrayCounter = 15;
    optional ProtoMultiArrayState multiArray = 16;
    optional ProtoMVRegState mvreg = 17;
    optional ProtoSimpleDateState simpleDate = 18;
    optional ProtoSetWDateState setWDate = 19;
    optional ProtoIncWDateState incWDate = 20;
    optional ProtoSetOnlyDateState setOnlyDate = 21;
}

message ProtoReplyEmpty {

}

//*****STATES*****
message ProtoCounterState {required int32 value = 1;}
message ProtoCounterFloatState { required double value = 1; }
message ProtoLWWRegState {
    required bytes value = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}
message ProtoAWSetState {repeated ProtoValueUniques elems = 1;}
message ProtoORMapState {repeated ProtoORMapRemove entries = 1;}
message ProtoEmbMapState {
    repeated ProtoEmbMapEntry crdts = 1;
    repeated ProtoEmbMapRemove removes = 2;
    //required ProtoClock rmvClock = 3;
    required bytes rmvClock = 3;
}
message ProtoEmbMapEntry {
    required string key = 1;
    required CRDT_type type = 2;
    required ProtoState state = 3;
}
message ProtoEmbMapRemove {
    required string key = 1;
    //TODO: Marks?
    repeated ProtoStableClock clks = 2;
}
message ProtoMaxMinState {required int64 value = 1;}
message ProtoAvgState {
    required int64 sum = 1;
    required int64 nAdds = 2;
}
//TODO: This one could be changed to just include the list of elements and maxElems,
//and then have everything else be calculated on the moment.
message ProtoTopKRmvState {
    repeated ProtoTopKElement elems = 1;
    repeated ProtoTopKIdVc rems = 2;
    //notTop maybe deserves its own msg? Since the key will be repeated.
    repeated ProtoTopKElement notTop = 3;
    optional ProtoTopKElement smallest = 4;
    required int32 maxElems = 5;
    required bytes vc = 6;
}

//TODO: Same improvement as in TopKState.
message ProtoTopSumState {
    repeated ProtoTopSumElement elems = 1;
    //note: this actually corresponds to notInTop - notPropagated (value-wise)
    repeated ProtoTopSumElement notTop = 2; 
    optional ProtoTopSumElement smallest = 3;
    required int32 maxElems = 4;
    //Note: notPropagated isn't included.
}

message ProtoTopKState {
    repeated ProtoTopKScore elems = 1;
    optional ProtoTopKScore smallest = 2;
    required int32 maxElems = 3;
    required bool keepTiedEntries = 4;
    repeated ProtoTopKScore tied = 5;
}

message ProtoFlagState {
    optional ProtoFlagLWWState lww = 1;
    optional ProtoFlagEWState ew = 2;
    optional ProtoFlagDWState dw = 3;
}
message ProtoFlagLWWState {
    required bool flag = 1;
    required int64 ts = 2;
    required int32 replicaID = 3;
}
message ProtoFlagEWState {repeated uint64 uniques = 1; }
message ProtoFlagDWState {repeated uint64 uniques = 1;}

message ProtoBoundedCounterState {
    map<int32,int32> permissions = 1;
    map<int32,int32> decs = 2;
    required int32 limit = 3;
    required int32 value = 4;
}

message ProtoPairCounterState {
    required sint32 first = 1;
    required double second = 2;
}

message ProtoArrayCounterState {
    repeated int64 counts = 1;
}

message ProtoMultiArrayState {
    repeated int64 intCounters = 1;
    repeated double floatCounters = 2;
    repeated bytes data = 3;
    repeated int64 sums = 4;
    repeated int64 counts = 5;
}

message ProtoMVRegState {
    required bytes value = 1;
    required bytes clk = 2;
    required int32 replicaID = 3;
    repeated bytes concValues = 4;
    repeated bytes concClks = 5;    //Same size as concValues
}

message ProtoSimpleDateState {
    required int64 dateTs = 1;
}

message ProtoSetWDateState {
    required bytes setClk = 1;
    required int64 setValue = 2;
    required int64 setTs = 3;
    required int64 inc = 4;
    required int32 setReplicaID = 5;
    required bytes currClk = 6;
}

message ProtoIncWDateState {
    required bytes setClk = 1;
    required int64 setValue = 2;
    required int64 setTs = 3;
    required int32 setReplicaID = 4;
    map<int32,int64> incs = 5;  //replicaID -> value
    map<int32,int64> cancels = 6;
    map<int32,int64> cancelsTs = 7;
    required bytes currClk = 8;
}

message ProtoSetOnlyDateState {
    required int64 dateTs = 1;
    required int64 writeTs = 2;
    required int32 replicaID = 3;
}