// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: antidote.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CRDTType int32

const (
	CRDTType_COUNTER       CRDTType = 3
	CRDTType_COUNTER_FLOAT CRDTType = 18
	CRDTType_ORSET         CRDTType = 4
	CRDTType_LWWREG        CRDTType = 5
	CRDTType_MVREG         CRDTType = 6
	CRDTType_GMAP          CRDTType = 8
	CRDTType_RWSET         CRDTType = 10
	CRDTType_RRMAP         CRDTType = 11
	CRDTType_FATCOUNTER    CRDTType = 12
	CRDTType_FLAG_EW       CRDTType = 13
	CRDTType_FLAG_DW       CRDTType = 16
	CRDTType_FLAG_LWW      CRDTType = 17
	CRDTType_TOPK          CRDTType = 1
	CRDTType_TOPK_RMV      CRDTType = 2
	CRDTType_AVG           CRDTType = 7
	CRDTType_LEADERBOARD   CRDTType = 9
	CRDTType_MAXMIN        CRDTType = 0
	CRDTType_ORMAP         CRDTType = 15
	CRDTType_TOPSUM        CRDTType = 14
	CRDTType_PAIR_COUNTER  CRDTType = 19
	CRDTType_ARRAY_COUNTER CRDTType = 20
	CRDTType_MULTI_ARRAY   CRDTType = 21
	CRDTType_SIMPLE_DATE   CRDTType = 22
	CRDTType_SETW_DATE     CRDTType = 23
	CRDTType_INCW_DATE     CRDTType = 24
	CRDTType_SET_ONLY_DATE CRDTType = 25
	CRDTType_NOOP          CRDTType = 32
)

// Enum value maps for CRDTType.
var (
	CRDTType_name = map[int32]string{
		3:  "COUNTER",
		18: "COUNTER_FLOAT",
		4:  "ORSET",
		5:  "LWWREG",
		6:  "MVREG",
		8:  "GMAP",
		10: "RWSET",
		11: "RRMAP",
		12: "FATCOUNTER",
		13: "FLAG_EW",
		16: "FLAG_DW",
		17: "FLAG_LWW",
		1:  "TOPK",
		2:  "TOPK_RMV",
		7:  "AVG",
		9:  "LEADERBOARD",
		0:  "MAXMIN",
		15: "ORMAP",
		14: "TOPSUM",
		19: "PAIR_COUNTER",
		20: "ARRAY_COUNTER",
		21: "MULTI_ARRAY",
		22: "SIMPLE_DATE",
		23: "SETW_DATE",
		24: "INCW_DATE",
		25: "SET_ONLY_DATE",
		32: "NOOP",
	}
	CRDTType_value = map[string]int32{
		"COUNTER":       3,
		"COUNTER_FLOAT": 18,
		"ORSET":         4,
		"LWWREG":        5,
		"MVREG":         6,
		"GMAP":          8,
		"RWSET":         10,
		"RRMAP":         11,
		"FATCOUNTER":    12,
		"FLAG_EW":       13,
		"FLAG_DW":       16,
		"FLAG_LWW":      17,
		"TOPK":          1,
		"TOPK_RMV":      2,
		"AVG":           7,
		"LEADERBOARD":   9,
		"MAXMIN":        0,
		"ORMAP":         15,
		"TOPSUM":        14,
		"PAIR_COUNTER":  19,
		"ARRAY_COUNTER": 20,
		"MULTI_ARRAY":   21,
		"SIMPLE_DATE":   22,
		"SETW_DATE":     23,
		"INCW_DATE":     24,
		"SET_ONLY_DATE": 25,
		"NOOP":          32,
	}
)

func (x CRDTType) Enum() *CRDTType {
	p := new(CRDTType)
	*p = x
	return p
}

func (x CRDTType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRDTType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[0].Descriptor()
}

func (CRDTType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[0]
}

func (x CRDTType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CRDTType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CRDTType(num)
	return nil
}

// Deprecated: Use CRDTType.Descriptor instead.
func (CRDTType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{0}
}

type MultiArrayType int32

const (
	MultiArrayType_INT      MultiArrayType = 0
	MultiArrayType_FLOAT    MultiArrayType = 1
	MultiArrayType_DATA     MultiArrayType = 2 //bytes or string
	MultiArrayType_AVG_TYPE MultiArrayType = 3
	MultiArrayType_MULTI    MultiArrayType = 4 //For updates/reads with more than one type
	MultiArrayType_SIZE     MultiArrayType = 100
)

// Enum value maps for MultiArrayType.
var (
	MultiArrayType_name = map[int32]string{
		0:   "INT",
		1:   "FLOAT",
		2:   "DATA",
		3:   "AVG_TYPE",
		4:   "MULTI",
		100: "SIZE",
	}
	MultiArrayType_value = map[string]int32{
		"INT":      0,
		"FLOAT":    1,
		"DATA":     2,
		"AVG_TYPE": 3,
		"MULTI":    4,
		"SIZE":     100,
	}
)

func (x MultiArrayType) Enum() *MultiArrayType {
	p := new(MultiArrayType)
	*p = x
	return p
}

func (x MultiArrayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiArrayType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[1].Descriptor()
}

func (MultiArrayType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[1]
}

func (x MultiArrayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MultiArrayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MultiArrayType(num)
	return nil
}

// Deprecated: Use MultiArrayType.Descriptor instead.
func (MultiArrayType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{1}
}

type ROW_Policy int32

const (
	ROW_Policy_AW     ROW_Policy = 1
	ROW_Policy_RW     ROW_Policy = 2
	ROW_Policy_LWW    ROW_Policy = 3
	ROW_Policy_STRONG ROW_Policy = 4
)

// Enum value maps for ROW_Policy.
var (
	ROW_Policy_name = map[int32]string{
		1: "AW",
		2: "RW",
		3: "LWW",
		4: "STRONG",
	}
	ROW_Policy_value = map[string]int32{
		"AW":     1,
		"RW":     2,
		"LWW":    3,
		"STRONG": 4,
	}
)

func (x ROW_Policy) Enum() *ROW_Policy {
	p := new(ROW_Policy)
	*p = x
	return p
}

func (x ROW_Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ROW_Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[2].Descriptor()
}

func (ROW_Policy) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[2]
}

func (x ROW_Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ROW_Policy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ROW_Policy(num)
	return nil
}

// Deprecated: Use ROW_Policy.Descriptor instead.
func (ROW_Policy) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{2}
}

type COL_Policy int32

const (
	COL_Policy_LWW_C COL_Policy = 1
	COL_Policy_MW    COL_Policy = 2
	COL_Policy_EW    COL_Policy = 3
	COL_Policy_DW    COL_Policy = 4
)

// Enum value maps for COL_Policy.
var (
	COL_Policy_name = map[int32]string{
		1: "LWW_C",
		2: "MW",
		3: "EW",
		4: "DW",
	}
	COL_Policy_value = map[string]int32{
		"LWW_C": 1,
		"MW":    2,
		"EW":    3,
		"DW":    4,
	}
)

func (x COL_Policy) Enum() *COL_Policy {
	p := new(COL_Policy)
	*p = x
	return p
}

func (x COL_Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COL_Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[3].Descriptor()
}

func (COL_Policy) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[3]
}

func (x COL_Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *COL_Policy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = COL_Policy(num)
	return nil
}

// Deprecated: Use COL_Policy.Descriptor instead.
func (COL_Policy) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{3}
}

type SQL_Datatype int32

const (
	SQL_Datatype_COUNTER_SQL SQL_Datatype = 1
	SQL_Datatype_INTEGER     SQL_Datatype = 2
	SQL_Datatype_BOOLEAN     SQL_Datatype = 3
	SQL_Datatype_VARCHAR     SQL_Datatype = 4
	SQL_Datatype_DATE        SQL_Datatype = 5
)

// Enum value maps for SQL_Datatype.
var (
	SQL_Datatype_name = map[int32]string{
		1: "COUNTER_SQL",
		2: "INTEGER",
		3: "BOOLEAN",
		4: "VARCHAR",
		5: "DATE",
	}
	SQL_Datatype_value = map[string]int32{
		"COUNTER_SQL": 1,
		"INTEGER":     2,
		"BOOLEAN":     3,
		"VARCHAR":     4,
		"DATE":        5,
	}
)

func (x SQL_Datatype) Enum() *SQL_Datatype {
	p := new(SQL_Datatype)
	*p = x
	return p
}

func (x SQL_Datatype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQL_Datatype) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[4].Descriptor()
}

func (SQL_Datatype) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[4]
}

func (x SQL_Datatype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SQL_Datatype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SQL_Datatype(num)
	return nil
}

// Deprecated: Use SQL_Datatype.Descriptor instead.
func (SQL_Datatype) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{4}
}

type SQL_Type int32

const (
	SQL_Type_CREATE_TABLE SQL_Type = 1
	SQL_Type_CREATE_INDEX SQL_Type = 2
	SQL_Type_CREATE_VIEW  SQL_Type = 3
	SQL_Type_INSERT       SQL_Type = 4
	SQL_Type_UPDATE       SQL_Type = 5
	SQL_Type_DELETE       SQL_Type = 6
	SQL_Type_DROP         SQL_Type = 7
	SQL_Type_QUERY        SQL_Type = 8
)

// Enum value maps for SQL_Type.
var (
	SQL_Type_name = map[int32]string{
		1: "CREATE_TABLE",
		2: "CREATE_INDEX",
		3: "CREATE_VIEW",
		4: "INSERT",
		5: "UPDATE",
		6: "DELETE",
		7: "DROP",
		8: "QUERY",
	}
	SQL_Type_value = map[string]int32{
		"CREATE_TABLE": 1,
		"CREATE_INDEX": 2,
		"CREATE_VIEW":  3,
		"INSERT":       4,
		"UPDATE":       5,
		"DELETE":       6,
		"DROP":         7,
		"QUERY":        8,
	}
)

func (x SQL_Type) Enum() *SQL_Type {
	p := new(SQL_Type)
	*p = x
	return p
}

func (x SQL_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQL_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[5].Descriptor()
}

func (SQL_Type) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[5]
}

func (x SQL_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SQL_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SQL_Type(num)
	return nil
}

// Deprecated: Use SQL_Type.Descriptor instead.
func (SQL_Type) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{5}
}

type READType int32

const (
	READType_FULL READType = 0
	// Set
	READType_LOOKUP  READType = 1
	READType_N_ELEMS READType = 10
	// MW_REG
	READType_GET_SINGLE READType = 33
	// Maps
	READType_GET_VALUE              READType = 2
	READType_HAS_KEY                READType = 3
	READType_GET_KEYS               READType = 4
	READType_GET_VALUES             READType = 5  //Return value for a given set of keys
	READType_GET_ALL_VALUES         READType = 9  //Return value for all keys
	READType_GET_COND               READType = 11 //Returns values only if they meet a certain criteria
	READType_GET_ALL_COND           READType = 12
	READType_GET_EXCEPT             READType = 13
	READType_GET_EXCEPT_COND        READType = 14
	READType_GET_EXCEPT_SINGLE      READType = 16
	READType_GET_EXCEPT_SINGLE_COND READType = 17
	READType_GET_AGGREGATE          READType = 15
	// TopK
	READType_GET_N           READType = 6
	READType_GET_ABOVE_VALUE READType = 7
	// Avg
	READType_GET_FULL_AVG READType = 8
	// Process
	READType_PROCESS READType = 18
	// PairCounter
	READType_PAIR_FIRST  READType = 19
	READType_PAIR_SECOND READType = 20
	// ArrayCounter
	READType_COUNTER_SINGLE       READType = 21
	READType_COUNTER_SUB          READType = 22
	READType_COUNTER_EXCEPT       READType = 23
	READType_COUNTER_EXCEPT_RANGE READType = 24
	// MultiArray
	READType_MULTI_FULL      READType = 25
	READType_MULTI_SINGLE    READType = 26
	READType_MULTI_RANGE     READType = 27
	READType_MULTI_SUB       READType = 28
	READType_MULTI_COND      READType = 29
	READType_MULTI_DATA_COND READType = 30
	READType_MULTI_CUSTOM    READType = 31
	READType_MULTI_DATA_INT  READType = 32
	// Date
	READType_DATE_FULL      READType = 40
	READType_DATE_ONLY      READType = 41
	READType_DATE_TIME_ONLY READType = 42
	READType_DATE_TIMESTAMP READType = 43
)

// Enum value maps for READType.
var (
	READType_name = map[int32]string{
		0:  "FULL",
		1:  "LOOKUP",
		10: "N_ELEMS",
		33: "GET_SINGLE",
		2:  "GET_VALUE",
		3:  "HAS_KEY",
		4:  "GET_KEYS",
		5:  "GET_VALUES",
		9:  "GET_ALL_VALUES",
		11: "GET_COND",
		12: "GET_ALL_COND",
		13: "GET_EXCEPT",
		14: "GET_EXCEPT_COND",
		16: "GET_EXCEPT_SINGLE",
		17: "GET_EXCEPT_SINGLE_COND",
		15: "GET_AGGREGATE",
		6:  "GET_N",
		7:  "GET_ABOVE_VALUE",
		8:  "GET_FULL_AVG",
		18: "PROCESS",
		19: "PAIR_FIRST",
		20: "PAIR_SECOND",
		21: "COUNTER_SINGLE",
		22: "COUNTER_SUB",
		23: "COUNTER_EXCEPT",
		24: "COUNTER_EXCEPT_RANGE",
		25: "MULTI_FULL",
		26: "MULTI_SINGLE",
		27: "MULTI_RANGE",
		28: "MULTI_SUB",
		29: "MULTI_COND",
		30: "MULTI_DATA_COND",
		31: "MULTI_CUSTOM",
		32: "MULTI_DATA_INT",
		40: "DATE_FULL",
		41: "DATE_ONLY",
		42: "DATE_TIME_ONLY",
		43: "DATE_TIMESTAMP",
	}
	READType_value = map[string]int32{
		"FULL":                   0,
		"LOOKUP":                 1,
		"N_ELEMS":                10,
		"GET_SINGLE":             33,
		"GET_VALUE":              2,
		"HAS_KEY":                3,
		"GET_KEYS":               4,
		"GET_VALUES":             5,
		"GET_ALL_VALUES":         9,
		"GET_COND":               11,
		"GET_ALL_COND":           12,
		"GET_EXCEPT":             13,
		"GET_EXCEPT_COND":        14,
		"GET_EXCEPT_SINGLE":      16,
		"GET_EXCEPT_SINGLE_COND": 17,
		"GET_AGGREGATE":          15,
		"GET_N":                  6,
		"GET_ABOVE_VALUE":        7,
		"GET_FULL_AVG":           8,
		"PROCESS":                18,
		"PAIR_FIRST":             19,
		"PAIR_SECOND":            20,
		"COUNTER_SINGLE":         21,
		"COUNTER_SUB":            22,
		"COUNTER_EXCEPT":         23,
		"COUNTER_EXCEPT_RANGE":   24,
		"MULTI_FULL":             25,
		"MULTI_SINGLE":           26,
		"MULTI_RANGE":            27,
		"MULTI_SUB":              28,
		"MULTI_COND":             29,
		"MULTI_DATA_COND":        30,
		"MULTI_CUSTOM":           31,
		"MULTI_DATA_INT":         32,
		"DATE_FULL":              40,
		"DATE_ONLY":              41,
		"DATE_TIME_ONLY":         42,
		"DATE_TIMESTAMP":         43,
	}
)

func (x READType) Enum() *READType {
	p := new(READType)
	*p = x
	return p
}

func (x READType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (READType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[6].Descriptor()
}

func (READType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[6]
}

func (x READType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *READType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = READType(num)
	return nil
}

// Deprecated: Use READType.Descriptor instead.
func (READType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{6}
}

type COMPType int32

const (
	COMPType_EQ  COMPType = 0
	COMPType_NEQ COMPType = 1
	COMPType_LEQ COMPType = 2
	COMPType_L   COMPType = 3
	COMPType_H   COMPType = 4
	COMPType_HEQ COMPType = 5
)

// Enum value maps for COMPType.
var (
	COMPType_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "LEQ",
		3: "L",
		4: "H",
		5: "HEQ",
	}
	COMPType_value = map[string]int32{
		"EQ":  0,
		"NEQ": 1,
		"LEQ": 2,
		"L":   3,
		"H":   4,
		"HEQ": 5,
	}
)

func (x COMPType) Enum() *COMPType {
	p := new(COMPType)
	*p = x
	return p
}

func (x COMPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[7].Descriptor()
}

func (COMPType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[7]
}

func (x COMPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *COMPType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = COMPType(num)
	return nil
}

// Deprecated: Use COMPType.Descriptor instead.
func (COMPType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{7}
}

type AGGRType int32

const (
	AGGRType_A_SUM AGGRType = 0
	AGGRType_A_AVG AGGRType = 1
	AGGRType_A_MAX AGGRType = 2
	AGGRType_A_MIN AGGRType = 3
)

// Enum value maps for AGGRType.
var (
	AGGRType_name = map[int32]string{
		0: "A_SUM",
		1: "A_AVG",
		2: "A_MAX",
		3: "A_MIN",
	}
	AGGRType_value = map[string]int32{
		"A_SUM": 0,
		"A_AVG": 1,
		"A_MAX": 2,
		"A_MIN": 3,
	}
)

func (x AGGRType) Enum() *AGGRType {
	p := new(AGGRType)
	*p = x
	return p
}

func (x AGGRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AGGRType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[8].Descriptor()
}

func (AGGRType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[8]
}

func (x AGGRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AGGRType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AGGRType(num)
	return nil
}

// Deprecated: Use AGGRType.Descriptor instead.
func (AGGRType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{8}
}

type ApbSetUpdate_SetOpType int32

const (
	ApbSetUpdate_ADD    ApbSetUpdate_SetOpType = 1
	ApbSetUpdate_REMOVE ApbSetUpdate_SetOpType = 2
)

// Enum value maps for ApbSetUpdate_SetOpType.
var (
	ApbSetUpdate_SetOpType_name = map[int32]string{
		1: "ADD",
		2: "REMOVE",
	}
	ApbSetUpdate_SetOpType_value = map[string]int32{
		"ADD":    1,
		"REMOVE": 2,
	}
)

func (x ApbSetUpdate_SetOpType) Enum() *ApbSetUpdate_SetOpType {
	p := new(ApbSetUpdate_SetOpType)
	*p = x
	return p
}

func (x ApbSetUpdate_SetOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApbSetUpdate_SetOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_antidote_proto_enumTypes[9].Descriptor()
}

func (ApbSetUpdate_SetOpType) Type() protoreflect.EnumType {
	return &file_antidote_proto_enumTypes[9]
}

func (x ApbSetUpdate_SetOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApbSetUpdate_SetOpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApbSetUpdate_SetOpType(num)
	return nil
}

// Deprecated: Use ApbSetUpdate_SetOpType.Descriptor instead.
func (ApbSetUpdate_SetOpType) EnumDescriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{6, 0}
}

// Riak Error response
type ApbErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errmsg  []byte  `protobuf:"bytes,1,req,name=errmsg" json:"errmsg,omitempty"`
	Errcode *uint32 `protobuf:"varint,2,req,name=errcode" json:"errcode,omitempty"`
}

func (x *ApbErrorResp) Reset() {
	*x = ApbErrorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbErrorResp) ProtoMessage() {}

func (x *ApbErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbErrorResp.ProtoReflect.Descriptor instead.
func (*ApbErrorResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{0}
}

func (x *ApbErrorResp) GetErrmsg() []byte {
	if x != nil {
		return x.Errmsg
	}
	return nil
}

func (x *ApbErrorResp) GetErrcode() uint32 {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return 0
}

type TmpProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
}

func (x *TmpProto) Reset() {
	*x = TmpProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmpProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmpProto) ProtoMessage() {}

func (x *TmpProto) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmpProto.ProtoReflect.Descriptor instead.
func (*TmpProto) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{1}
}

func (x *TmpProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Counter increment request
type ApbCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inc indicates the value to be incremented. To decrement, use a negative value. If no value is given, it will be considered as an increment by 1
	Inc *int64 `protobuf:"zigzag64,1,opt,name=inc" json:"inc,omitempty"`
}

func (x *ApbCounterUpdate) Reset() {
	*x = ApbCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCounterUpdate) ProtoMessage() {}

func (x *ApbCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCounterUpdate.ProtoReflect.Descriptor instead.
func (*ApbCounterUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{2}
}

func (x *ApbCounterUpdate) GetInc() int64 {
	if x != nil && x.Inc != nil {
		return *x.Inc
	}
	return 0
}

// Response operation
type ApbGetCounterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int32 `protobuf:"zigzag32,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbGetCounterResp) Reset() {
	*x = ApbGetCounterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetCounterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetCounterResp) ProtoMessage() {}

func (x *ApbGetCounterResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetCounterResp.ProtoReflect.Descriptor instead.
func (*ApbGetCounterResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{3}
}

func (x *ApbGetCounterResp) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type ApbCounterFloatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc *float64 `protobuf:"fixed64,1,req,name=inc" json:"inc,omitempty"`
}

func (x *ApbCounterFloatUpdate) Reset() {
	*x = ApbCounterFloatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCounterFloatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCounterFloatUpdate) ProtoMessage() {}

func (x *ApbCounterFloatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCounterFloatUpdate.ProtoReflect.Descriptor instead.
func (*ApbCounterFloatUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{4}
}

func (x *ApbCounterFloatUpdate) GetInc() float64 {
	if x != nil && x.Inc != nil {
		return *x.Inc
	}
	return 0
}

type ApbGetCounterFloatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float64 `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbGetCounterFloatResp) Reset() {
	*x = ApbGetCounterFloatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetCounterFloatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetCounterFloatResp) ProtoMessage() {}

func (x *ApbGetCounterFloatResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetCounterFloatResp.ProtoReflect.Descriptor instead.
func (*ApbGetCounterFloatResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{5}
}

func (x *ApbGetCounterFloatResp) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Set updates request
type ApbSetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Optype *ApbSetUpdate_SetOpType `protobuf:"varint,1,req,name=optype,enum=ApbSetUpdate_SetOpType" json:"optype,omitempty"`
	Adds   [][]byte                `protobuf:"bytes,2,rep,name=adds" json:"adds,omitempty"`
	Rems   [][]byte                `protobuf:"bytes,3,rep,name=rems" json:"rems,omitempty"`
}

func (x *ApbSetUpdate) Reset() {
	*x = ApbSetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetUpdate) ProtoMessage() {}

func (x *ApbSetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetUpdate.ProtoReflect.Descriptor instead.
func (*ApbSetUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{6}
}

func (x *ApbSetUpdate) GetOptype() ApbSetUpdate_SetOpType {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return ApbSetUpdate_ADD
}

func (x *ApbSetUpdate) GetAdds() [][]byte {
	if x != nil {
		return x.Adds
	}
	return nil
}

func (x *ApbSetUpdate) GetRems() [][]byte {
	if x != nil {
		return x.Rems
	}
	return nil
}

// Get set request
type ApbGetSetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value [][]byte `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (x *ApbGetSetResp) Reset() {
	*x = ApbGetSetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetSetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetSetResp) ProtoMessage() {}

func (x *ApbGetSetResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetSetResp.ProtoReflect.Descriptor instead.
func (*ApbGetSetResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{7}
}

func (x *ApbGetSetResp) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Register update
type ApbRegUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbRegUpdate) Reset() {
	*x = ApbRegUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbRegUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbRegUpdate) ProtoMessage() {}

func (x *ApbRegUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbRegUpdate.ProtoReflect.Descriptor instead.
func (*ApbRegUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{8}
}

func (x *ApbRegUpdate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Response operation
type ApbGetRegResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbGetRegResp) Reset() {
	*x = ApbGetRegResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetRegResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetRegResp) ProtoMessage() {}

func (x *ApbGetRegResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetRegResp.ProtoReflect.Descriptor instead.
func (*ApbGetRegResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{9}
}

func (x *ApbGetRegResp) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// response:
type ApbGetMVRegResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (x *ApbGetMVRegResp) Reset() {
	*x = ApbGetMVRegResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetMVRegResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetMVRegResp) ProtoMessage() {}

func (x *ApbGetMVRegResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetMVRegResp.ProtoReflect.Descriptor instead.
func (*ApbGetMVRegResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{10}
}

func (x *ApbGetMVRegResp) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type ApbMapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  []byte    `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Type *CRDTType `protobuf:"varint,2,req,name=type,enum=CRDTType" json:"type,omitempty"`
}

func (x *ApbMapKey) Reset() {
	*x = ApbMapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapKey) ProtoMessage() {}

func (x *ApbMapKey) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapKey.ProtoReflect.Descriptor instead.
func (*ApbMapKey) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{11}
}

func (x *ApbMapKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapKey) GetType() CRDTType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CRDTType_COUNTER
}

type ApbMapUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates     []*ApbMapNestedUpdate `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
	RemovedKeys []*ApbMapKey          `protobuf:"bytes,2,rep,name=removedKeys" json:"removedKeys,omitempty"`
	IsAddsArray *bool                 `protobuf:"varint,3,opt,name=isAddsArray" json:"isAddsArray,omitempty"` //If not present, it is assumed to be false.
}

func (x *ApbMapUpdate) Reset() {
	*x = ApbMapUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapUpdate) ProtoMessage() {}

func (x *ApbMapUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapUpdate.ProtoReflect.Descriptor instead.
func (*ApbMapUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{12}
}

func (x *ApbMapUpdate) GetUpdates() []*ApbMapNestedUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ApbMapUpdate) GetRemovedKeys() []*ApbMapKey {
	if x != nil {
		return x.RemovedKeys
	}
	return nil
}

func (x *ApbMapUpdate) GetIsAddsArray() bool {
	if x != nil && x.IsAddsArray != nil {
		return *x.IsAddsArray
	}
	return false
}

type ApbMapNestedUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *ApbMapKey          `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Update *ApbUpdateOperation `protobuf:"bytes,2,req,name=update" json:"update,omitempty"`
}

func (x *ApbMapNestedUpdate) Reset() {
	*x = ApbMapNestedUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapNestedUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapNestedUpdate) ProtoMessage() {}

func (x *ApbMapNestedUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapNestedUpdate.ProtoReflect.Descriptor instead.
func (*ApbMapNestedUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{13}
}

func (x *ApbMapNestedUpdate) GetKey() *ApbMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapNestedUpdate) GetUpdate() *ApbUpdateOperation {
	if x != nil {
		return x.Update
	}
	return nil
}

type ApbGetMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ApbMapEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *ApbGetMapResp) Reset() {
	*x = ApbGetMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetMapResp) ProtoMessage() {}

func (x *ApbGetMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetMapResp.ProtoReflect.Descriptor instead.
func (*ApbGetMapResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{14}
}

func (x *ApbGetMapResp) GetEntries() []*ApbMapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ApbMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *ApbMapKey         `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *ApbReadObjectResp `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *ApbMapEntry) Reset() {
	*x = ApbMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapEntry) ProtoMessage() {}

func (x *ApbMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapEntry.ProtoReflect.Descriptor instead.
func (*ApbMapEntry) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{15}
}

func (x *ApbMapEntry) GetKey() *ApbMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapEntry) GetValue() *ApbReadObjectResp {
	if x != nil {
		return x.Value
	}
	return nil
}

type ApbFlagUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *bool `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbFlagUpdate) Reset() {
	*x = ApbFlagUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbFlagUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbFlagUpdate) ProtoMessage() {}

func (x *ApbFlagUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbFlagUpdate.ProtoReflect.Descriptor instead.
func (*ApbFlagUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{16}
}

func (x *ApbFlagUpdate) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type ApbGetFlagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *bool `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbGetFlagResp) Reset() {
	*x = ApbGetFlagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetFlagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetFlagResp) ProtoMessage() {}

func (x *ApbGetFlagResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetFlagResp.ProtoReflect.Descriptor instead.
func (*ApbGetFlagResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{17}
}

func (x *ApbGetFlagResp) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

// General reset operation
type ApbCrdtReset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbCrdtReset) Reset() {
	*x = ApbCrdtReset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCrdtReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCrdtReset) ProtoMessage() {}

func (x *ApbCrdtReset) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCrdtReset.ProtoReflect.Descriptor instead.
func (*ApbCrdtReset) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{18}
}

// Response operation
type ApbOperationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	Errorcode *uint32 `protobuf:"varint,2,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (x *ApbOperationResp) Reset() {
	*x = ApbOperationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbOperationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbOperationResp) ProtoMessage() {}

func (x *ApbOperationResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbOperationResp.ProtoReflect.Descriptor instead.
func (*ApbOperationResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{19}
}

func (x *ApbOperationResp) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ApbOperationResp) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

// Topk-rmv updates request
type ApbTopkRmvUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adds []*ApbIntPair `protobuf:"bytes,1,rep,name=adds" json:"adds,omitempty"`
	Rems []int32       `protobuf:"zigzag32,2,rep,name=rems" json:"rems,omitempty"`
}

func (x *ApbTopkRmvUpdate) Reset() {
	*x = ApbTopkRmvUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkRmvUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkRmvUpdate) ProtoMessage() {}

func (x *ApbTopkRmvUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkRmvUpdate.ProtoReflect.Descriptor instead.
func (*ApbTopkRmvUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{20}
}

func (x *ApbTopkRmvUpdate) GetAdds() []*ApbIntPair {
	if x != nil {
		return x.Adds
	}
	return nil
}

func (x *ApbTopkRmvUpdate) GetRems() []int32 {
	if x != nil {
		return x.Rems
	}
	return nil
}

// Topk updates request
type ApbTopkUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int64 `protobuf:"zigzag64,1,req,name=playerId" json:"playerId,omitempty"`
	Score    *int64 `protobuf:"zigzag64,2,req,name=score" json:"score,omitempty"`
}

func (x *ApbTopkUpdate) Reset() {
	*x = ApbTopkUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkUpdate) ProtoMessage() {}

func (x *ApbTopkUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkUpdate.ProtoReflect.Descriptor instead.
func (*ApbTopkUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{21}
}

func (x *ApbTopkUpdate) GetPlayerId() int64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ApbTopkUpdate) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

// Initializer to give a non-default size to the top
type ApbTopKInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopSize  *uint32 `protobuf:"varint,1,req,name=topSize" json:"topSize,omitempty"`
	IsTopSum *bool   `protobuf:"varint,2,opt,name=isTopSum" json:"isTopSum,omitempty"` //If not present, TopK is assumed.
}

func (x *ApbTopKInit) Reset() {
	*x = ApbTopKInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopKInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopKInit) ProtoMessage() {}

func (x *ApbTopKInit) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopKInit.ProtoReflect.Descriptor instead.
func (*ApbTopKInit) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{22}
}

func (x *ApbTopKInit) GetTopSize() uint32 {
	if x != nil && x.TopSize != nil {
		return *x.TopSize
	}
	return 0
}

func (x *ApbTopKInit) GetIsTopSum() bool {
	if x != nil && x.IsTopSum != nil {
		return *x.IsTopSum
	}
	return false
}

// message ApbGetTopkResp {
// repeated sint32 values = 1;
// }
type ApbGetTopkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ApbIntPair `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (x *ApbGetTopkResp) Reset() {
	*x = ApbGetTopkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetTopkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetTopkResp) ProtoMessage() {}

func (x *ApbGetTopkResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetTopkResp.ProtoReflect.Descriptor instead.
func (*ApbGetTopkResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{23}
}

func (x *ApbGetTopkResp) GetValues() []*ApbIntPair {
	if x != nil {
		return x.Values
	}
	return nil
}

// Holds a (playerId, score, data) triple
type ApbIntPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId *int32 `protobuf:"zigzag32,1,req,name=playerId" json:"playerId,omitempty"`
	Score    *int32 `protobuf:"zigzag32,2,req,name=score" json:"score,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *ApbIntPair) Reset() {
	*x = ApbIntPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbIntPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbIntPair) ProtoMessage() {}

func (x *ApbIntPair) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbIntPair.ProtoReflect.Descriptor instead.
func (*ApbIntPair) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{24}
}

func (x *ApbIntPair) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *ApbIntPair) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ApbIntPair) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApbLeaderboardUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adds []*ApbIntPair `protobuf:"bytes,1,rep,name=adds" json:"adds,omitempty"`
	Rems []int32       `protobuf:"varint,2,rep,name=rems" json:"rems,omitempty"`
}

func (x *ApbLeaderboardUpdate) Reset() {
	*x = ApbLeaderboardUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbLeaderboardUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbLeaderboardUpdate) ProtoMessage() {}

func (x *ApbLeaderboardUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbLeaderboardUpdate.ProtoReflect.Descriptor instead.
func (*ApbLeaderboardUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{25}
}

func (x *ApbLeaderboardUpdate) GetAdds() []*ApbIntPair {
	if x != nil {
		return x.Adds
	}
	return nil
}

func (x *ApbLeaderboardUpdate) GetRems() []int32 {
	if x != nil {
		return x.Rems
	}
	return nil
}

type ApbGetLeaderboardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
}

func (x *ApbGetLeaderboardResp) Reset() {
	*x = ApbGetLeaderboardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetLeaderboardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetLeaderboardResp) ProtoMessage() {}

func (x *ApbGetLeaderboardResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetLeaderboardResp.ProtoReflect.Descriptor instead.
func (*ApbGetLeaderboardResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{26}
}

func (x *ApbGetLeaderboardResp) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ApbAverageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *int64 `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	NValues *int64 `protobuf:"varint,2,opt,name=nValues" json:"nValues,omitempty"`
}

func (x *ApbAverageUpdate) Reset() {
	*x = ApbAverageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAverageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAverageUpdate) ProtoMessage() {}

func (x *ApbAverageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAverageUpdate.ProtoReflect.Descriptor instead.
func (*ApbAverageUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{27}
}

func (x *ApbAverageUpdate) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApbAverageUpdate) GetNValues() int64 {
	if x != nil && x.NValues != nil {
		return *x.NValues
	}
	return 0
}

type ApbGetAverageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg *float64 `protobuf:"fixed64,1,req,name=avg" json:"avg,omitempty"`
}

func (x *ApbGetAverageResp) Reset() {
	*x = ApbGetAverageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetAverageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetAverageResp) ProtoMessage() {}

func (x *ApbGetAverageResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetAverageResp.ProtoReflect.Descriptor instead.
func (*ApbGetAverageResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{28}
}

func (x *ApbGetAverageResp) GetAvg() float64 {
	if x != nil && x.Avg != nil {
		return *x.Avg
	}
	return 0
}

type ApbMaxMinUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int64 `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	IsMax *bool  `protobuf:"varint,2,req,name=isMax" json:"isMax,omitempty"`
}

func (x *ApbMaxMinUpdate) Reset() {
	*x = ApbMaxMinUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMaxMinUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMaxMinUpdate) ProtoMessage() {}

func (x *ApbMaxMinUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMaxMinUpdate.ProtoReflect.Descriptor instead.
func (*ApbMaxMinUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{29}
}

func (x *ApbMaxMinUpdate) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApbMaxMinUpdate) GetIsMax() bool {
	if x != nil && x.IsMax != nil {
		return *x.IsMax
	}
	return false
}

type ApbGetMaxMinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int64 `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbGetMaxMinResp) Reset() {
	*x = ApbGetMaxMinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetMaxMinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetMaxMinResp) ProtoMessage() {}

func (x *ApbGetMaxMinResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetMaxMinResp.ProtoReflect.Descriptor instead.
func (*ApbGetMaxMinResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{30}
}

func (x *ApbGetMaxMinResp) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// This message is only intended to be used once by CRDT, to set the limit and initial value
// For increments/decrements, use ApbCounterUpdate
type ApbBoundCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        *int64 `protobuf:"varint,1,req,name=limit" json:"limit,omitempty"`
	InitialValue *int64 `protobuf:"varint,2,req,name=initialValue" json:"initialValue,omitempty"`
	CompEq       *bool  `protobuf:"varint,3,req,name=compEq" json:"compEq,omitempty"`
}

func (x *ApbBoundCounterUpdate) Reset() {
	*x = ApbBoundCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbBoundCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbBoundCounterUpdate) ProtoMessage() {}

func (x *ApbBoundCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbBoundCounterUpdate.ProtoReflect.Descriptor instead.
func (*ApbBoundCounterUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{31}
}

func (x *ApbBoundCounterUpdate) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ApbBoundCounterUpdate) GetInitialValue() int64 {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return 0
}

func (x *ApbBoundCounterUpdate) GetCompEq() bool {
	if x != nil && x.CompEq != nil {
		return *x.CompEq
	}
	return false
}

type ApbPairCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncFirst  *int32   `protobuf:"zigzag32,1,opt,name=incFirst" json:"incFirst,omitempty"`
	IncSecond *float64 `protobuf:"fixed64,2,opt,name=incSecond" json:"incSecond,omitempty"`
}

func (x *ApbPairCounterUpdate) Reset() {
	*x = ApbPairCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPairCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPairCounterUpdate) ProtoMessage() {}

func (x *ApbPairCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPairCounterUpdate.ProtoReflect.Descriptor instead.
func (*ApbPairCounterUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{32}
}

func (x *ApbPairCounterUpdate) GetIncFirst() int32 {
	if x != nil && x.IncFirst != nil {
		return *x.IncFirst
	}
	return 0
}

func (x *ApbPairCounterUpdate) GetIncSecond() float64 {
	if x != nil && x.IncSecond != nil {
		return *x.IncSecond
	}
	return 0
}

type ApbGetPairCounterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *int32   `protobuf:"zigzag32,1,req,name=first" json:"first,omitempty"`
	Second *float64 `protobuf:"fixed64,2,req,name=second" json:"second,omitempty"`
}

func (x *ApbGetPairCounterResp) Reset() {
	*x = ApbGetPairCounterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetPairCounterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetPairCounterResp) ProtoMessage() {}

func (x *ApbGetPairCounterResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetPairCounterResp.ProtoReflect.Descriptor instead.
func (*ApbGetPairCounterResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{33}
}

func (x *ApbGetPairCounterResp) GetFirst() int32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *ApbGetPairCounterResp) GetSecond() float64 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

type ApbArrayCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc      *ApbArrayCounterIncrement      `protobuf:"bytes,1,opt,name=inc" json:"inc,omitempty"`
	IncAll   *ApbArrayCounterIncrementAll   `protobuf:"bytes,2,opt,name=incAll" json:"incAll,omitempty"`
	IncMulti *ApbArrayCounterIncrementMulti `protobuf:"bytes,3,opt,name=incMulti" json:"incMulti,omitempty"`
	IncSub   *ApbArrayCounterIncrementSub   `protobuf:"bytes,4,opt,name=incSub" json:"incSub,omitempty"`
	Size     *ApbArrayCounterSetSize        `protobuf:"bytes,5,opt,name=size" json:"size,omitempty"`
}

func (x *ApbArrayCounterUpdate) Reset() {
	*x = ApbArrayCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterUpdate) ProtoMessage() {}

func (x *ApbArrayCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterUpdate.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{34}
}

func (x *ApbArrayCounterUpdate) GetInc() *ApbArrayCounterIncrement {
	if x != nil {
		return x.Inc
	}
	return nil
}

func (x *ApbArrayCounterUpdate) GetIncAll() *ApbArrayCounterIncrementAll {
	if x != nil {
		return x.IncAll
	}
	return nil
}

func (x *ApbArrayCounterUpdate) GetIncMulti() *ApbArrayCounterIncrementMulti {
	if x != nil {
		return x.IncMulti
	}
	return nil
}

func (x *ApbArrayCounterUpdate) GetIncSub() *ApbArrayCounterIncrementSub {
	if x != nil {
		return x.IncSub
	}
	return nil
}

func (x *ApbArrayCounterUpdate) GetSize() *ApbArrayCounterSetSize {
	if x != nil {
		return x.Size
	}
	return nil
}

type ApbArrayCounterIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Inc   *int64 `protobuf:"varint,2,req,name=inc" json:"inc,omitempty"`
}

func (x *ApbArrayCounterIncrement) Reset() {
	*x = ApbArrayCounterIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterIncrement) ProtoMessage() {}

func (x *ApbArrayCounterIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterIncrement.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterIncrement) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{35}
}

func (x *ApbArrayCounterIncrement) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ApbArrayCounterIncrement) GetInc() int64 {
	if x != nil && x.Inc != nil {
		return *x.Inc
	}
	return 0
}

type ApbArrayCounterIncrementAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc *int64 `protobuf:"varint,1,req,name=inc" json:"inc,omitempty"`
}

func (x *ApbArrayCounterIncrementAll) Reset() {
	*x = ApbArrayCounterIncrementAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterIncrementAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterIncrementAll) ProtoMessage() {}

func (x *ApbArrayCounterIncrementAll) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterIncrementAll.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterIncrementAll) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{36}
}

func (x *ApbArrayCounterIncrementAll) GetInc() int64 {
	if x != nil && x.Inc != nil {
		return *x.Inc
	}
	return 0
}

type ApbArrayCounterIncrementMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incs []int64 `protobuf:"varint,1,rep,name=incs" json:"incs,omitempty"`
}

func (x *ApbArrayCounterIncrementMulti) Reset() {
	*x = ApbArrayCounterIncrementMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterIncrementMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterIncrementMulti) ProtoMessage() {}

func (x *ApbArrayCounterIncrementMulti) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterIncrementMulti.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterIncrementMulti) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{37}
}

func (x *ApbArrayCounterIncrementMulti) GetIncs() []int64 {
	if x != nil {
		return x.Incs
	}
	return nil
}

type ApbArrayCounterIncrementSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []int32 `protobuf:"varint,1,rep,name=indexes" json:"indexes,omitempty"`
	Incs    []int64 `protobuf:"varint,2,rep,name=incs" json:"incs,omitempty"`
}

func (x *ApbArrayCounterIncrementSub) Reset() {
	*x = ApbArrayCounterIncrementSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterIncrementSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterIncrementSub) ProtoMessage() {}

func (x *ApbArrayCounterIncrementSub) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterIncrementSub.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterIncrementSub) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{38}
}

func (x *ApbArrayCounterIncrementSub) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *ApbArrayCounterIncrementSub) GetIncs() []int64 {
	if x != nil {
		return x.Incs
	}
	return nil
}

type ApbArrayCounterSetSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *int32 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
}

func (x *ApbArrayCounterSetSize) Reset() {
	*x = ApbArrayCounterSetSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterSetSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterSetSize) ProtoMessage() {}

func (x *ApbArrayCounterSetSize) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterSetSize.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterSetSize) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{39}
}

func (x *ApbArrayCounterSetSize) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type ApbGetArrayCounterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
}

func (x *ApbGetArrayCounterResp) Reset() {
	*x = ApbGetArrayCounterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetArrayCounterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetArrayCounterResp) ProtoMessage() {}

func (x *ApbGetArrayCounterResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetArrayCounterResp.ProtoReflect.Descriptor instead.
func (*ApbGetArrayCounterResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{40}
}

func (x *ApbGetArrayCounterResp) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type ApbMultiArrayUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *MultiArrayType             `protobuf:"varint,1,req,name=type,enum=MultiArrayType" json:"type,omitempty"`
	IntUpd   *ApbMultiArrayIntUpdate     `protobuf:"bytes,2,opt,name=intUpd" json:"intUpd,omitempty"` //Note: incAll is not supported.
	FloatUpd *ApbMultiArrayFloatUpdate   `protobuf:"bytes,3,opt,name=floatUpd" json:"floatUpd,omitempty"`
	DataUpd  *ApbMultiArrayDataUpdate    `protobuf:"bytes,4,opt,name=dataUpd" json:"dataUpd,omitempty"`
	AvgUpd   *ApbMultiArrayAvgUpdate     `protobuf:"bytes,5,opt,name=avgUpd" json:"avgUpd,omitempty"`
	MultiUpd *ApbMultiArrayMultiUpdate   `protobuf:"bytes,6,opt,name=multiUpd" json:"multiUpd,omitempty"`
	SizeUpd  *ApbMultiArraySetSizeUpdate `protobuf:"bytes,7,opt,name=sizeUpd" json:"sizeUpd,omitempty"`
}

func (x *ApbMultiArrayUpdate) Reset() {
	*x = ApbMultiArrayUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayUpdate) ProtoMessage() {}

func (x *ApbMultiArrayUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{41}
}

func (x *ApbMultiArrayUpdate) GetType() MultiArrayType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MultiArrayType_INT
}

func (x *ApbMultiArrayUpdate) GetIntUpd() *ApbMultiArrayIntUpdate {
	if x != nil {
		return x.IntUpd
	}
	return nil
}

func (x *ApbMultiArrayUpdate) GetFloatUpd() *ApbMultiArrayFloatUpdate {
	if x != nil {
		return x.FloatUpd
	}
	return nil
}

func (x *ApbMultiArrayUpdate) GetDataUpd() *ApbMultiArrayDataUpdate {
	if x != nil {
		return x.DataUpd
	}
	return nil
}

func (x *ApbMultiArrayUpdate) GetAvgUpd() *ApbMultiArrayAvgUpdate {
	if x != nil {
		return x.AvgUpd
	}
	return nil
}

func (x *ApbMultiArrayUpdate) GetMultiUpd() *ApbMultiArrayMultiUpdate {
	if x != nil {
		return x.MultiUpd
	}
	return nil
}

func (x *ApbMultiArrayUpdate) GetSizeUpd() *ApbMultiArraySetSizeUpdate {
	if x != nil {
		return x.SizeUpd
	}
	return nil
}

type ApbMultiArrayIntUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc       *ApbMultiArrayIntInc          `protobuf:"bytes,1,opt,name=inc" json:"inc,omitempty"`
	IncSingle *ApbMultiArrayIntIncSingle    `protobuf:"bytes,2,opt,name=incSingle" json:"incSingle,omitempty"`
	IncPos    *ApbMultiArrayIntIncPositions `protobuf:"bytes,3,opt,name=incPos" json:"incPos,omitempty"`
	IncRange  *ApbMultiArrayIntIncRange     `protobuf:"bytes,4,opt,name=incRange" json:"incRange,omitempty"`
}

func (x *ApbMultiArrayIntUpdate) Reset() {
	*x = ApbMultiArrayIntUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntUpdate) ProtoMessage() {}

func (x *ApbMultiArrayIntUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{42}
}

func (x *ApbMultiArrayIntUpdate) GetInc() *ApbMultiArrayIntInc {
	if x != nil {
		return x.Inc
	}
	return nil
}

func (x *ApbMultiArrayIntUpdate) GetIncSingle() *ApbMultiArrayIntIncSingle {
	if x != nil {
		return x.IncSingle
	}
	return nil
}

func (x *ApbMultiArrayIntUpdate) GetIncPos() *ApbMultiArrayIntIncPositions {
	if x != nil {
		return x.IncPos
	}
	return nil
}

func (x *ApbMultiArrayIntUpdate) GetIncRange() *ApbMultiArrayIntIncRange {
	if x != nil {
		return x.IncRange
	}
	return nil
}

type ApbMultiArrayFloatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc       *ApbMultiArrayFloatInc          `protobuf:"bytes,1,opt,name=inc" json:"inc,omitempty"`
	IncSingle *ApbMultiArrayFloatIncSingle    `protobuf:"bytes,2,opt,name=incSingle" json:"incSingle,omitempty"`
	IncPos    *ApbMultiArrayFloatIncPositions `protobuf:"bytes,3,opt,name=incPos" json:"incPos,omitempty"`
	IncRange  *ApbMultiArrayFloatIncRange     `protobuf:"bytes,4,opt,name=incRange" json:"incRange,omitempty"`
}

func (x *ApbMultiArrayFloatUpdate) Reset() {
	*x = ApbMultiArrayFloatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatUpdate) ProtoMessage() {}

func (x *ApbMultiArrayFloatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{43}
}

func (x *ApbMultiArrayFloatUpdate) GetInc() *ApbMultiArrayFloatInc {
	if x != nil {
		return x.Inc
	}
	return nil
}

func (x *ApbMultiArrayFloatUpdate) GetIncSingle() *ApbMultiArrayFloatIncSingle {
	if x != nil {
		return x.IncSingle
	}
	return nil
}

func (x *ApbMultiArrayFloatUpdate) GetIncPos() *ApbMultiArrayFloatIncPositions {
	if x != nil {
		return x.IncPos
	}
	return nil
}

func (x *ApbMultiArrayFloatUpdate) GetIncRange() *ApbMultiArrayFloatIncRange {
	if x != nil {
		return x.IncRange
	}
	return nil
}

type ApbMultiArrayDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set       *ApbMultiArrayDataSet          `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	SetSingle *ApbMultiArrayDataSetSingle    `protobuf:"bytes,2,opt,name=setSingle" json:"setSingle,omitempty"`
	SetPos    *ApbMultiArrayDataSetPositions `protobuf:"bytes,3,opt,name=setPos" json:"setPos,omitempty"`
	SetRange  *ApbMultiArrayDataSetRange     `protobuf:"bytes,4,opt,name=setRange" json:"setRange,omitempty"`
}

func (x *ApbMultiArrayDataUpdate) Reset() {
	*x = ApbMultiArrayDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataUpdate) ProtoMessage() {}

func (x *ApbMultiArrayDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{44}
}

func (x *ApbMultiArrayDataUpdate) GetSet() *ApbMultiArrayDataSet {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ApbMultiArrayDataUpdate) GetSetSingle() *ApbMultiArrayDataSetSingle {
	if x != nil {
		return x.SetSingle
	}
	return nil
}

func (x *ApbMultiArrayDataUpdate) GetSetPos() *ApbMultiArrayDataSetPositions {
	if x != nil {
		return x.SetPos
	}
	return nil
}

func (x *ApbMultiArrayDataUpdate) GetSetRange() *ApbMultiArrayDataSetRange {
	if x != nil {
		return x.SetRange
	}
	return nil
}

type ApbMultiArrayAvgUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc       *ApbMultiArrayAvgInc          `protobuf:"bytes,1,opt,name=inc" json:"inc,omitempty"`
	IncSingle *ApbMultiArrayAvgIncSingle    `protobuf:"bytes,2,opt,name=incSingle" json:"incSingle,omitempty"`
	IncPos    *ApbMultiArrayAvgIncPositions `protobuf:"bytes,3,opt,name=incPos" json:"incPos,omitempty"`
	IncRange  *ApbMultiArrayAvgIncRange     `protobuf:"bytes,4,opt,name=incRange" json:"incRange,omitempty"`
}

func (x *ApbMultiArrayAvgUpdate) Reset() {
	*x = ApbMultiArrayAvgUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgUpdate) ProtoMessage() {}

func (x *ApbMultiArrayAvgUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{45}
}

func (x *ApbMultiArrayAvgUpdate) GetInc() *ApbMultiArrayAvgInc {
	if x != nil {
		return x.Inc
	}
	return nil
}

func (x *ApbMultiArrayAvgUpdate) GetIncSingle() *ApbMultiArrayAvgIncSingle {
	if x != nil {
		return x.IncSingle
	}
	return nil
}

func (x *ApbMultiArrayAvgUpdate) GetIncPos() *ApbMultiArrayAvgIncPositions {
	if x != nil {
		return x.IncPos
	}
	return nil
}

func (x *ApbMultiArrayAvgUpdate) GetIncRange() *ApbMultiArrayAvgIncRange {
	if x != nil {
		return x.IncRange
	}
	return nil
}

type ApbMultiArraySetSizeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntSize   *int32 `protobuf:"varint,1,opt,name=intSize" json:"intSize,omitempty"`
	FloatSize *int32 `protobuf:"varint,2,opt,name=floatSize" json:"floatSize,omitempty"`
	DataSize  *int32 `protobuf:"varint,3,opt,name=dataSize" json:"dataSize,omitempty"`
	AvgSize   *int32 `protobuf:"varint,4,opt,name=avgSize" json:"avgSize,omitempty"`
}

func (x *ApbMultiArraySetSizeUpdate) Reset() {
	*x = ApbMultiArraySetSizeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArraySetSizeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArraySetSizeUpdate) ProtoMessage() {}

func (x *ApbMultiArraySetSizeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArraySetSizeUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArraySetSizeUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{46}
}

func (x *ApbMultiArraySetSizeUpdate) GetIntSize() int32 {
	if x != nil && x.IntSize != nil {
		return *x.IntSize
	}
	return 0
}

func (x *ApbMultiArraySetSizeUpdate) GetFloatSize() int32 {
	if x != nil && x.FloatSize != nil {
		return *x.FloatSize
	}
	return 0
}

func (x *ApbMultiArraySetSizeUpdate) GetDataSize() int32 {
	if x != nil && x.DataSize != nil {
		return *x.DataSize
	}
	return 0
}

func (x *ApbMultiArraySetSizeUpdate) GetAvgSize() int32 {
	if x != nil && x.AvgSize != nil {
		return *x.AvgSize
	}
	return 0
}

type ApbMultiArrayIntInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []int64 `protobuf:"varint,1,rep,name=changes" json:"changes,omitempty"`
}

func (x *ApbMultiArrayIntInc) Reset() {
	*x = ApbMultiArrayIntInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntInc) ProtoMessage() {}

func (x *ApbMultiArrayIntInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntInc.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{47}
}

func (x *ApbMultiArrayIntInc) GetChanges() []int64 {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ApbMultiArrayIntIncSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *int32 `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`
	Change *int64 `protobuf:"varint,2,req,name=change" json:"change,omitempty"`
}

func (x *ApbMultiArrayIntIncSingle) Reset() {
	*x = ApbMultiArrayIntIncSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntIncSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntIncSingle) ProtoMessage() {}

func (x *ApbMultiArrayIntIncSingle) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntIncSingle.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntIncSingle) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{48}
}

func (x *ApbMultiArrayIntIncSingle) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ApbMultiArrayIntIncSingle) GetChange() int64 {
	if x != nil && x.Change != nil {
		return *x.Change
	}
	return 0
}

type ApbMultiArrayIntIncPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    []int32 `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
	Change []int64 `protobuf:"varint,2,rep,name=change" json:"change,omitempty"` //If only 1 value, the same value will be applied to all of pos.
}

func (x *ApbMultiArrayIntIncPositions) Reset() {
	*x = ApbMultiArrayIntIncPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntIncPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntIncPositions) ProtoMessage() {}

func (x *ApbMultiArrayIntIncPositions) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntIncPositions.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntIncPositions) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{49}
}

func (x *ApbMultiArrayIntIncPositions) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ApbMultiArrayIntIncPositions) GetChange() []int64 {
	if x != nil {
		return x.Change
	}
	return nil
}

type ApbMultiArrayIntIncRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *int32 `protobuf:"varint,1,req,name=from" json:"from,omitempty"`
	To     *int32 `protobuf:"varint,2,req,name=to" json:"to,omitempty"`
	Change *int64 `protobuf:"varint,3,req,name=change" json:"change,omitempty"`
}

func (x *ApbMultiArrayIntIncRange) Reset() {
	*x = ApbMultiArrayIntIncRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntIncRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntIncRange) ProtoMessage() {}

func (x *ApbMultiArrayIntIncRange) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntIncRange.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntIncRange) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{50}
}

func (x *ApbMultiArrayIntIncRange) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *ApbMultiArrayIntIncRange) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *ApbMultiArrayIntIncRange) GetChange() int64 {
	if x != nil && x.Change != nil {
		return *x.Change
	}
	return 0
}

type ApbMultiArrayFloatInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []float64 `protobuf:"fixed64,1,rep,name=changes" json:"changes,omitempty"`
}

func (x *ApbMultiArrayFloatInc) Reset() {
	*x = ApbMultiArrayFloatInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatInc) ProtoMessage() {}

func (x *ApbMultiArrayFloatInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatInc.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{51}
}

func (x *ApbMultiArrayFloatInc) GetChanges() []float64 {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ApbMultiArrayFloatIncSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *int32   `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`
	Change *float64 `protobuf:"fixed64,2,req,name=change" json:"change,omitempty"`
}

func (x *ApbMultiArrayFloatIncSingle) Reset() {
	*x = ApbMultiArrayFloatIncSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatIncSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatIncSingle) ProtoMessage() {}

func (x *ApbMultiArrayFloatIncSingle) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatIncSingle.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatIncSingle) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{52}
}

func (x *ApbMultiArrayFloatIncSingle) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ApbMultiArrayFloatIncSingle) GetChange() float64 {
	if x != nil && x.Change != nil {
		return *x.Change
	}
	return 0
}

type ApbMultiArrayFloatIncPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    []int32   `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
	Change []float64 `protobuf:"fixed64,2,rep,name=change" json:"change,omitempty"` //If only 1 value, the same value will be applied to all of pos.
}

func (x *ApbMultiArrayFloatIncPositions) Reset() {
	*x = ApbMultiArrayFloatIncPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatIncPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatIncPositions) ProtoMessage() {}

func (x *ApbMultiArrayFloatIncPositions) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatIncPositions.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatIncPositions) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{53}
}

func (x *ApbMultiArrayFloatIncPositions) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ApbMultiArrayFloatIncPositions) GetChange() []float64 {
	if x != nil {
		return x.Change
	}
	return nil
}

type ApbMultiArrayFloatIncRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   *int32   `protobuf:"varint,1,req,name=from" json:"from,omitempty"`
	To     *int32   `protobuf:"varint,2,req,name=to" json:"to,omitempty"`
	Change *float64 `protobuf:"fixed64,3,req,name=change" json:"change,omitempty"`
}

func (x *ApbMultiArrayFloatIncRange) Reset() {
	*x = ApbMultiArrayFloatIncRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatIncRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatIncRange) ProtoMessage() {}

func (x *ApbMultiArrayFloatIncRange) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatIncRange.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatIncRange) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{54}
}

func (x *ApbMultiArrayFloatIncRange) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *ApbMultiArrayFloatIncRange) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *ApbMultiArrayFloatIncRange) GetChange() float64 {
	if x != nil && x.Change != nil {
		return *x.Change
	}
	return 0
}

type ApbMultiArrayDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (x *ApbMultiArrayDataSet) Reset() {
	*x = ApbMultiArrayDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataSet) ProtoMessage() {}

func (x *ApbMultiArrayDataSet) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataSet.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataSet) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{55}
}

func (x *ApbMultiArrayDataSet) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApbMultiArrayDataSetSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos  *int32 `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`
	Data []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
}

func (x *ApbMultiArrayDataSetSingle) Reset() {
	*x = ApbMultiArrayDataSetSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataSetSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataSetSingle) ProtoMessage() {}

func (x *ApbMultiArrayDataSetSingle) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataSetSingle.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataSetSingle) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{56}
}

func (x *ApbMultiArrayDataSetSingle) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ApbMultiArrayDataSetSingle) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApbMultiArrayDataSetPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos  []int32  `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
	Data [][]byte `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"` //If only 1 value, the same value will be applied to all of pos.
}

func (x *ApbMultiArrayDataSetPositions) Reset() {
	*x = ApbMultiArrayDataSetPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataSetPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataSetPositions) ProtoMessage() {}

func (x *ApbMultiArrayDataSetPositions) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataSetPositions.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataSetPositions) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{57}
}

func (x *ApbMultiArrayDataSetPositions) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ApbMultiArrayDataSetPositions) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApbMultiArrayDataSetRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *int32 `protobuf:"varint,1,req,name=from" json:"from,omitempty"`
	To   *int32 `protobuf:"varint,2,req,name=to" json:"to,omitempty"`
	Data []byte `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *ApbMultiArrayDataSetRange) Reset() {
	*x = ApbMultiArrayDataSetRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataSetRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataSetRange) ProtoMessage() {}

func (x *ApbMultiArrayDataSetRange) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataSetRange.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataSetRange) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{58}
}

func (x *ApbMultiArrayDataSetRange) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *ApbMultiArrayDataSetRange) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *ApbMultiArrayDataSetRange) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApbMultiArrayAvgInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
	Counts []int32 `protobuf:"varint,2,rep,name=counts" json:"counts,omitempty"`
}

func (x *ApbMultiArrayAvgInc) Reset() {
	*x = ApbMultiArrayAvgInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgInc) ProtoMessage() {}

func (x *ApbMultiArrayAvgInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgInc.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{59}
}

func (x *ApbMultiArrayAvgInc) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ApbMultiArrayAvgInc) GetCounts() []int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ApbMultiArrayAvgIncSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos   *int32 `protobuf:"varint,1,req,name=pos" json:"pos,omitempty"`
	Count *int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"` //If not present, 1 is assumed.
	Value *int64 `protobuf:"varint,3,req,name=value" json:"value,omitempty"`
}

func (x *ApbMultiArrayAvgIncSingle) Reset() {
	*x = ApbMultiArrayAvgIncSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgIncSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgIncSingle) ProtoMessage() {}

func (x *ApbMultiArrayAvgIncSingle) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgIncSingle.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgIncSingle) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{60}
}

func (x *ApbMultiArrayAvgIncSingle) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ApbMultiArrayAvgIncSingle) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ApbMultiArrayAvgIncSingle) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type ApbMultiArrayAvgIncPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    []int32 `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
	Values []int64 `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
	Counts []int32 `protobuf:"varint,3,rep,name=counts" json:"counts,omitempty"`
}

func (x *ApbMultiArrayAvgIncPositions) Reset() {
	*x = ApbMultiArrayAvgIncPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgIncPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgIncPositions) ProtoMessage() {}

func (x *ApbMultiArrayAvgIncPositions) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgIncPositions.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgIncPositions) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{61}
}

func (x *ApbMultiArrayAvgIncPositions) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ApbMultiArrayAvgIncPositions) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ApbMultiArrayAvgIncPositions) GetCounts() []int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ApbMultiArrayAvgIncRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *int32 `protobuf:"varint,1,req,name=from" json:"from,omitempty"`
	To    *int32 `protobuf:"varint,2,req,name=to" json:"to,omitempty"`
	Value *int64 `protobuf:"varint,3,req,name=value" json:"value,omitempty"`
	Count *int32 `protobuf:"varint,4,req,name=count" json:"count,omitempty"`
}

func (x *ApbMultiArrayAvgIncRange) Reset() {
	*x = ApbMultiArrayAvgIncRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgIncRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgIncRange) ProtoMessage() {}

func (x *ApbMultiArrayAvgIncRange) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgIncRange.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgIncRange) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{62}
}

func (x *ApbMultiArrayAvgIncRange) GetFrom() int32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *ApbMultiArrayAvgIncRange) GetTo() int32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *ApbMultiArrayAvgIncRange) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApbMultiArrayAvgIncRange) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ApbMultiArrayMultiUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ints   []int64   `protobuf:"varint,1,rep,name=ints" json:"ints,omitempty"`
	Floats []float64 `protobuf:"fixed64,2,rep,name=floats" json:"floats,omitempty"`
	Data   [][]byte  `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Counts []int32   `protobuf:"varint,4,rep,name=counts" json:"counts,omitempty"`
	Sums   []int64   `protobuf:"varint,5,rep,name=sums" json:"sums,omitempty"`
}

func (x *ApbMultiArrayMultiUpdate) Reset() {
	*x = ApbMultiArrayMultiUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayMultiUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayMultiUpdate) ProtoMessage() {}

func (x *ApbMultiArrayMultiUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayMultiUpdate.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayMultiUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{63}
}

func (x *ApbMultiArrayMultiUpdate) GetInts() []int64 {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *ApbMultiArrayMultiUpdate) GetFloats() []float64 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *ApbMultiArrayMultiUpdate) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApbMultiArrayMultiUpdate) GetCounts() []int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *ApbMultiArrayMultiUpdate) GetSums() []int64 {
	if x != nil {
		return x.Sums
	}
	return nil
}

type ApbGetMultiArrayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntCounters   []int64   `protobuf:"varint,1,rep,name=intCounters" json:"intCounters,omitempty"`
	FloatCounters []float64 `protobuf:"fixed64,2,rep,name=floatCounters" json:"floatCounters,omitempty"`
	DataArray     [][]byte  `protobuf:"bytes,3,rep,name=dataArray" json:"dataArray,omitempty"`
	Sums          []int64   `protobuf:"varint,4,rep,name=sums" json:"sums,omitempty"`
	Counts        []int64   `protobuf:"varint,5,rep,name=counts" json:"counts,omitempty"`
}

func (x *ApbGetMultiArrayResp) Reset() {
	*x = ApbGetMultiArrayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetMultiArrayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetMultiArrayResp) ProtoMessage() {}

func (x *ApbGetMultiArrayResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetMultiArrayResp.ProtoReflect.Descriptor instead.
func (*ApbGetMultiArrayResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{64}
}

func (x *ApbGetMultiArrayResp) GetIntCounters() []int64 {
	if x != nil {
		return x.IntCounters
	}
	return nil
}

func (x *ApbGetMultiArrayResp) GetFloatCounters() []float64 {
	if x != nil {
		return x.FloatCounters
	}
	return nil
}

func (x *ApbGetMultiArrayResp) GetDataArray() [][]byte {
	if x != nil {
		return x.DataArray
	}
	return nil
}

func (x *ApbGetMultiArrayResp) GetSums() []int64 {
	if x != nil {
		return x.Sums
	}
	return nil
}

func (x *ApbGetMultiArrayResp) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ApbDateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set        *ApbDateSet        `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	DateSet    *ApbDateOnlySet    `protobuf:"bytes,2,opt,name=dateSet" json:"dateSet,omitempty"`
	TimeSet    *ApbTimeOnlySet    `protobuf:"bytes,3,opt,name=timeSet" json:"timeSet,omitempty"`
	SetMS      *ApbSetMS          `protobuf:"bytes,4,opt,name=setMS" json:"setMS,omitempty"`
	Inc        *ApbDateInc        `protobuf:"bytes,5,opt,name=inc" json:"inc,omitempty"`
	DateInc    *ApbDateOnlyInc    `protobuf:"bytes,6,opt,name=dateInc" json:"dateInc,omitempty"`
	TimeInc    *ApbTimeOnlyInc    `protobuf:"bytes,7,opt,name=timeInc" json:"timeInc,omitempty"`
	IncMS      *ApbIncMS          `protobuf:"bytes,8,opt,name=incMS" json:"incMS,omitempty"`
	Initialize *ApbDateInitialize `protobuf:"bytes,9,opt,name=initialize" json:"initialize,omitempty"`
}

func (x *ApbDateUpdate) Reset() {
	*x = ApbDateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateUpdate) ProtoMessage() {}

func (x *ApbDateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateUpdate.ProtoReflect.Descriptor instead.
func (*ApbDateUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{65}
}

func (x *ApbDateUpdate) GetSet() *ApbDateSet {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ApbDateUpdate) GetDateSet() *ApbDateOnlySet {
	if x != nil {
		return x.DateSet
	}
	return nil
}

func (x *ApbDateUpdate) GetTimeSet() *ApbTimeOnlySet {
	if x != nil {
		return x.TimeSet
	}
	return nil
}

func (x *ApbDateUpdate) GetSetMS() *ApbSetMS {
	if x != nil {
		return x.SetMS
	}
	return nil
}

func (x *ApbDateUpdate) GetInc() *ApbDateInc {
	if x != nil {
		return x.Inc
	}
	return nil
}

func (x *ApbDateUpdate) GetDateInc() *ApbDateOnlyInc {
	if x != nil {
		return x.DateInc
	}
	return nil
}

func (x *ApbDateUpdate) GetTimeInc() *ApbTimeOnlyInc {
	if x != nil {
		return x.TimeInc
	}
	return nil
}

func (x *ApbDateUpdate) GetIncMS() *ApbIncMS {
	if x != nil {
		return x.IncMS
	}
	return nil
}

func (x *ApbDateUpdate) GetInitialize() *ApbDateInitialize {
	if x != nil {
		return x.Initialize
	}
	return nil
}

type ApbDateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        *int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month       *int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day         *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour        *int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,7,opt,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbDateSet) Reset() {
	*x = ApbDateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateSet) ProtoMessage() {}

func (x *ApbDateSet) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateSet.ProtoReflect.Descriptor instead.
func (*ApbDateSet) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{66}
}

func (x *ApbDateSet) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateSet) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateSet) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ApbDateSet) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbDateSet) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbDateSet) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbDateSet) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbDateOnlySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  *int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month *int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
}

func (x *ApbDateOnlySet) Reset() {
	*x = ApbDateOnlySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateOnlySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateOnlySet) ProtoMessage() {}

func (x *ApbDateOnlySet) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateOnlySet.ProtoReflect.Descriptor instead.
func (*ApbDateOnlySet) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{67}
}

func (x *ApbDateOnlySet) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateOnlySet) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateOnlySet) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

type ApbTimeOnlySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour        *int32 `protobuf:"varint,1,opt,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,2,opt,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,3,opt,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,4,opt,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbTimeOnlySet) Reset() {
	*x = ApbTimeOnlySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTimeOnlySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTimeOnlySet) ProtoMessage() {}

func (x *ApbTimeOnlySet) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTimeOnlySet.ProtoReflect.Descriptor instead.
func (*ApbTimeOnlySet) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{68}
}

func (x *ApbTimeOnlySet) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbTimeOnlySet) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbTimeOnlySet) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbTimeOnlySet) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbDateInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        *int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month       *int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day         *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour        *int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,7,opt,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbDateInc) Reset() {
	*x = ApbDateInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateInc) ProtoMessage() {}

func (x *ApbDateInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateInc.ProtoReflect.Descriptor instead.
func (*ApbDateInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{69}
}

func (x *ApbDateInc) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateInc) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateInc) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ApbDateInc) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbDateInc) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbDateInc) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbDateInc) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbDateOnlyInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  *int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month *int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
}

func (x *ApbDateOnlyInc) Reset() {
	*x = ApbDateOnlyInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateOnlyInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateOnlyInc) ProtoMessage() {}

func (x *ApbDateOnlyInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateOnlyInc.ProtoReflect.Descriptor instead.
func (*ApbDateOnlyInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{70}
}

func (x *ApbDateOnlyInc) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateOnlyInc) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateOnlyInc) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

type ApbTimeOnlyInc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour        *int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,7,opt,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbTimeOnlyInc) Reset() {
	*x = ApbTimeOnlyInc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTimeOnlyInc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTimeOnlyInc) ProtoMessage() {}

func (x *ApbTimeOnlyInc) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTimeOnlyInc.ProtoReflect.Descriptor instead.
func (*ApbTimeOnlyInc) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{71}
}

func (x *ApbTimeOnlyInc) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbTimeOnlyInc) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbTimeOnlyInc) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbTimeOnlyInc) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbDateInitialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        *int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month       *int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day         *int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hour        *int32 `protobuf:"varint,4,opt,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,5,opt,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,6,opt,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,7,opt,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbDateInitialize) Reset() {
	*x = ApbDateInitialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateInitialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateInitialize) ProtoMessage() {}

func (x *ApbDateInitialize) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateInitialize.ProtoReflect.Descriptor instead.
func (*ApbDateInitialize) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{72}
}

func (x *ApbDateInitialize) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateInitialize) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateInitialize) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ApbDateInitialize) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbDateInitialize) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbDateInitialize) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbDateInitialize) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

// Note: Not recommended for the average user. This is intended only for benchmarks or heavy dataload scenarios.
type ApbSetMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ms *int64 `protobuf:"varint,1,req,name=ms" json:"ms,omitempty"` //0 corresponds to the Julian Calendar epoch
}

func (x *ApbSetMS) Reset() {
	*x = ApbSetMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetMS) ProtoMessage() {}

func (x *ApbSetMS) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetMS.ProtoReflect.Descriptor instead.
func (*ApbSetMS) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{73}
}

func (x *ApbSetMS) GetMs() int64 {
	if x != nil && x.Ms != nil {
		return *x.Ms
	}
	return 0
}

type ApbIncMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inc *int64 `protobuf:"varint,1,req,name=inc" json:"inc,omitempty"`
}

func (x *ApbIncMS) Reset() {
	*x = ApbIncMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbIncMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbIncMS) ProtoMessage() {}

func (x *ApbIncMS) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbIncMS.ProtoReflect.Descriptor instead.
func (*ApbIncMS) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{74}
}

func (x *ApbIncMS) GetInc() int64 {
	if x != nil && x.Inc != nil {
		return *x.Inc
	}
	return 0
}

type ApbGetDateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year   *int32 `protobuf:"varint,1,req,name=year" json:"year,omitempty"`
	Month  *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Day    *int32 `protobuf:"varint,3,req,name=day" json:"day,omitempty"`
	Hour   *int32 `protobuf:"varint,4,req,name=hour" json:"hour,omitempty"`
	Minute *int32 `protobuf:"varint,5,req,name=minute" json:"minute,omitempty"`
	Second *int32 `protobuf:"varint,6,req,name=second" json:"second,omitempty"`
}

func (x *ApbGetDateResp) Reset() {
	*x = ApbGetDateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetDateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetDateResp) ProtoMessage() {}

func (x *ApbGetDateResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetDateResp.ProtoReflect.Descriptor instead.
func (*ApbGetDateResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{75}
}

func (x *ApbGetDateResp) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbGetDateResp) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbGetDateResp) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ApbGetDateResp) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbGetDateResp) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbGetDateResp) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

// Properties parameters of a transaction
type ApbTxnProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadWrite *uint32 `protobuf:"varint,1,opt,name=read_write,json=readWrite" json:"read_write,omitempty"` //default = 0 = read_write, 1 = read_only, 2 = write_only
	RedBlue   *uint32 `protobuf:"varint,2,opt,name=red_blue,json=redBlue" json:"red_blue,omitempty"`       // default = 0 = blue, 1 = red
}

func (x *ApbTxnProperties) Reset() {
	*x = ApbTxnProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTxnProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTxnProperties) ProtoMessage() {}

func (x *ApbTxnProperties) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTxnProperties.ProtoReflect.Descriptor instead.
func (*ApbTxnProperties) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{76}
}

func (x *ApbTxnProperties) GetReadWrite() uint32 {
	if x != nil && x.ReadWrite != nil {
		return *x.ReadWrite
	}
	return 0
}

func (x *ApbTxnProperties) GetRedBlue() uint32 {
	if x != nil && x.RedBlue != nil {
		return *x.RedBlue
	}
	return 0
}

// Object (Key) representation
type ApbBoundObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    []byte    `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Type   *CRDTType `protobuf:"varint,2,req,name=type,enum=CRDTType" json:"type,omitempty"`
	Bucket []byte    `protobuf:"bytes,3,req,name=bucket" json:"bucket,omitempty"`
}

func (x *ApbBoundObject) Reset() {
	*x = ApbBoundObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbBoundObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbBoundObject) ProtoMessage() {}

func (x *ApbBoundObject) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbBoundObject.ProtoReflect.Descriptor instead.
func (*ApbBoundObject) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{77}
}

func (x *ApbBoundObject) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbBoundObject) GetType() CRDTType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CRDTType_COUNTER
}

func (x *ApbBoundObject) GetBucket() []byte {
	if x != nil {
		return x.Bucket
	}
	return nil
}

// Objects to be read
type ApbReadObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boundobjects          []*ApbBoundObject `protobuf:"bytes,1,rep,name=boundobjects" json:"boundobjects,omitempty"`
	TransactionDescriptor []byte            `protobuf:"bytes,2,req,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"`
}

func (x *ApbReadObjects) Reset() {
	*x = ApbReadObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbReadObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbReadObjects) ProtoMessage() {}

func (x *ApbReadObjects) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbReadObjects.ProtoReflect.Descriptor instead.
func (*ApbReadObjects) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{78}
}

func (x *ApbReadObjects) GetBoundobjects() []*ApbBoundObject {
	if x != nil {
		return x.Boundobjects
	}
	return nil
}

func (x *ApbReadObjects) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

// An Object to be updated with specified operation
type ApbUpdateOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boundobject *ApbBoundObject     `protobuf:"bytes,1,req,name=boundobject" json:"boundobject,omitempty"`
	Operation   *ApbUpdateOperation `protobuf:"bytes,2,req,name=operation" json:"operation,omitempty"`
}

func (x *ApbUpdateOp) Reset() {
	*x = ApbUpdateOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbUpdateOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbUpdateOp) ProtoMessage() {}

func (x *ApbUpdateOp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbUpdateOp.ProtoReflect.Descriptor instead.
func (*ApbUpdateOp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{79}
}

func (x *ApbUpdateOp) GetBoundobject() *ApbBoundObject {
	if x != nil {
		return x.Boundobject
	}
	return nil
}

func (x *ApbUpdateOp) GetOperation() *ApbUpdateOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type ApbUpdateOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counterop      *ApbCounterUpdate      `protobuf:"bytes,1,opt,name=counterop" json:"counterop,omitempty"`
	Setop          *ApbSetUpdate          `protobuf:"bytes,2,opt,name=setop" json:"setop,omitempty"`
	Regop          *ApbRegUpdate          `protobuf:"bytes,3,opt,name=regop" json:"regop,omitempty"`
	Bcounterop     *ApbBoundCounterUpdate `protobuf:"bytes,4,opt,name=bcounterop" json:"bcounterop,omitempty"`
	Mapop          *ApbMapUpdate          `protobuf:"bytes,5,opt,name=mapop" json:"mapop,omitempty"`
	Resetop        *ApbCrdtReset          `protobuf:"bytes,6,opt,name=resetop" json:"resetop,omitempty"`
	Flagop         *ApbFlagUpdate         `protobuf:"bytes,7,opt,name=flagop" json:"flagop,omitempty"`
	Topkinitop     *ApbTopKInit           `protobuf:"bytes,10,opt,name=topkinitop" json:"topkinitop,omitempty"`
	Maxminop       *ApbMaxMinUpdate       `protobuf:"bytes,11,opt,name=maxminop" json:"maxminop,omitempty"`
	Topkrmvop      *ApbTopkRmvUpdate      `protobuf:"bytes,12,opt,name=topkrmvop" json:"topkrmvop,omitempty"`
	Topkop         *ApbTopkUpdate         `protobuf:"bytes,13,opt,name=topkop" json:"topkop,omitempty"`
	Leaderboardop  *ApbLeaderboardUpdate  `protobuf:"bytes,14,opt,name=leaderboardop" json:"leaderboardop,omitempty"`
	Avgop          *ApbAverageUpdate      `protobuf:"bytes,15,opt,name=avgop" json:"avgop,omitempty"`
	Counterfloatop *ApbCounterFloatUpdate `protobuf:"bytes,16,opt,name=counterfloatop" json:"counterfloatop,omitempty"`
	Paircounterop  *ApbPairCounterUpdate  `protobuf:"bytes,8,opt,name=paircounterop" json:"paircounterop,omitempty"`
	Arraycounterop *ApbArrayCounterUpdate `protobuf:"bytes,9,opt,name=arraycounterop" json:"arraycounterop,omitempty"`
	Multiarrayop   *ApbMultiArrayUpdate   `protobuf:"bytes,17,opt,name=multiarrayop" json:"multiarrayop,omitempty"`
	Dateop         *ApbDateUpdate         `protobuf:"bytes,18,opt,name=dateop" json:"dateop,omitempty"`
}

func (x *ApbUpdateOperation) Reset() {
	*x = ApbUpdateOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbUpdateOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbUpdateOperation) ProtoMessage() {}

func (x *ApbUpdateOperation) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbUpdateOperation.ProtoReflect.Descriptor instead.
func (*ApbUpdateOperation) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{80}
}

func (x *ApbUpdateOperation) GetCounterop() *ApbCounterUpdate {
	if x != nil {
		return x.Counterop
	}
	return nil
}

func (x *ApbUpdateOperation) GetSetop() *ApbSetUpdate {
	if x != nil {
		return x.Setop
	}
	return nil
}

func (x *ApbUpdateOperation) GetRegop() *ApbRegUpdate {
	if x != nil {
		return x.Regop
	}
	return nil
}

func (x *ApbUpdateOperation) GetBcounterop() *ApbBoundCounterUpdate {
	if x != nil {
		return x.Bcounterop
	}
	return nil
}

func (x *ApbUpdateOperation) GetMapop() *ApbMapUpdate {
	if x != nil {
		return x.Mapop
	}
	return nil
}

func (x *ApbUpdateOperation) GetResetop() *ApbCrdtReset {
	if x != nil {
		return x.Resetop
	}
	return nil
}

func (x *ApbUpdateOperation) GetFlagop() *ApbFlagUpdate {
	if x != nil {
		return x.Flagop
	}
	return nil
}

func (x *ApbUpdateOperation) GetTopkinitop() *ApbTopKInit {
	if x != nil {
		return x.Topkinitop
	}
	return nil
}

func (x *ApbUpdateOperation) GetMaxminop() *ApbMaxMinUpdate {
	if x != nil {
		return x.Maxminop
	}
	return nil
}

func (x *ApbUpdateOperation) GetTopkrmvop() *ApbTopkRmvUpdate {
	if x != nil {
		return x.Topkrmvop
	}
	return nil
}

func (x *ApbUpdateOperation) GetTopkop() *ApbTopkUpdate {
	if x != nil {
		return x.Topkop
	}
	return nil
}

func (x *ApbUpdateOperation) GetLeaderboardop() *ApbLeaderboardUpdate {
	if x != nil {
		return x.Leaderboardop
	}
	return nil
}

func (x *ApbUpdateOperation) GetAvgop() *ApbAverageUpdate {
	if x != nil {
		return x.Avgop
	}
	return nil
}

func (x *ApbUpdateOperation) GetCounterfloatop() *ApbCounterFloatUpdate {
	if x != nil {
		return x.Counterfloatop
	}
	return nil
}

func (x *ApbUpdateOperation) GetPaircounterop() *ApbPairCounterUpdate {
	if x != nil {
		return x.Paircounterop
	}
	return nil
}

func (x *ApbUpdateOperation) GetArraycounterop() *ApbArrayCounterUpdate {
	if x != nil {
		return x.Arraycounterop
	}
	return nil
}

func (x *ApbUpdateOperation) GetMultiarrayop() *ApbMultiArrayUpdate {
	if x != nil {
		return x.Multiarrayop
	}
	return nil
}

func (x *ApbUpdateOperation) GetDateop() *ApbDateUpdate {
	if x != nil {
		return x.Dateop
	}
	return nil
}

// Objects to be updated
type ApbUpdateObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates               []*ApbUpdateOp `protobuf:"bytes,1,rep,name=updates" json:"updates,omitempty"`
	TransactionDescriptor []byte         `protobuf:"bytes,2,req,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"`
}

func (x *ApbUpdateObjects) Reset() {
	*x = ApbUpdateObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbUpdateObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbUpdateObjects) ProtoMessage() {}

func (x *ApbUpdateObjects) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbUpdateObjects.ProtoReflect.Descriptor instead.
func (*ApbUpdateObjects) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{81}
}

func (x *ApbUpdateObjects) GetUpdates() []*ApbUpdateOp {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ApbUpdateObjects) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

// Start Transaction
type ApbStartTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  []byte            `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Properties *ApbTxnProperties `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
}

func (x *ApbStartTransaction) Reset() {
	*x = ApbStartTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStartTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStartTransaction) ProtoMessage() {}

func (x *ApbStartTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStartTransaction.ProtoReflect.Descriptor instead.
func (*ApbStartTransaction) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{82}
}

func (x *ApbStartTransaction) GetTimestamp() []byte {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ApbStartTransaction) GetProperties() *ApbTxnProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Abort Transaction
type ApbAbortTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionDescriptor []byte `protobuf:"bytes,1,req,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"`
}

func (x *ApbAbortTransaction) Reset() {
	*x = ApbAbortTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAbortTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAbortTransaction) ProtoMessage() {}

func (x *ApbAbortTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAbortTransaction.ProtoReflect.Descriptor instead.
func (*ApbAbortTransaction) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{83}
}

func (x *ApbAbortTransaction) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

// Commit Transaction
type ApbCommitTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionDescriptor []byte `protobuf:"bytes,1,req,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"`
}

func (x *ApbCommitTransaction) Reset() {
	*x = ApbCommitTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCommitTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCommitTransaction) ProtoMessage() {}

func (x *ApbCommitTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCommitTransaction.ProtoReflect.Descriptor instead.
func (*ApbCommitTransaction) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{84}
}

func (x *ApbCommitTransaction) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

type ApbStaticUpdateObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ApbStartTransaction `protobuf:"bytes,1,req,name=transaction" json:"transaction,omitempty"`
	Updates     []*ApbUpdateOp       `protobuf:"bytes,2,rep,name=updates" json:"updates,omitempty"`
}

func (x *ApbStaticUpdateObjects) Reset() {
	*x = ApbStaticUpdateObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStaticUpdateObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStaticUpdateObjects) ProtoMessage() {}

func (x *ApbStaticUpdateObjects) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStaticUpdateObjects.ProtoReflect.Descriptor instead.
func (*ApbStaticUpdateObjects) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{85}
}

func (x *ApbStaticUpdateObjects) GetTransaction() *ApbStartTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ApbStaticUpdateObjects) GetUpdates() []*ApbUpdateOp {
	if x != nil {
		return x.Updates
	}
	return nil
}

type ApbStaticReadObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *ApbStartTransaction `protobuf:"bytes,1,req,name=transaction" json:"transaction,omitempty"`
	Objects     []*ApbBoundObject    `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
}

func (x *ApbStaticReadObjects) Reset() {
	*x = ApbStaticReadObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStaticReadObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStaticReadObjects) ProtoMessage() {}

func (x *ApbStaticReadObjects) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStaticReadObjects.ProtoReflect.Descriptor instead.
func (*ApbStaticReadObjects) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{86}
}

func (x *ApbStaticReadObjects) GetTransaction() *ApbStartTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ApbStaticReadObjects) GetObjects() []*ApbBoundObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

// Start transaction response
type ApbStartTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success               *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	TransactionDescriptor []byte  `protobuf:"bytes,2,opt,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"`
	Errorcode             *uint32 `protobuf:"varint,3,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (x *ApbStartTransactionResp) Reset() {
	*x = ApbStartTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStartTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStartTransactionResp) ProtoMessage() {}

func (x *ApbStartTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStartTransactionResp.ProtoReflect.Descriptor instead.
func (*ApbStartTransactionResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{87}
}

func (x *ApbStartTransactionResp) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ApbStartTransactionResp) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

func (x *ApbStartTransactionResp) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

// Read Objects Response
type ApbReadObjectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one of the following:
	Counter      *ApbGetCounterResp      `protobuf:"bytes,1,opt,name=counter" json:"counter,omitempty"`
	Set          *ApbGetSetResp          `protobuf:"bytes,2,opt,name=set" json:"set,omitempty"`
	Reg          *ApbGetRegResp          `protobuf:"bytes,3,opt,name=reg" json:"reg,omitempty"`
	Mvreg        *ApbGetMVRegResp        `protobuf:"bytes,4,opt,name=mvreg" json:"mvreg,omitempty"`
	Map          *ApbGetMapResp          `protobuf:"bytes,6,opt,name=map" json:"map,omitempty"`
	Flag         *ApbGetFlagResp         `protobuf:"bytes,7,opt,name=flag" json:"flag,omitempty"`
	Maxmin       *ApbGetMaxMinResp       `protobuf:"bytes,12,opt,name=maxmin" json:"maxmin,omitempty"`
	Topk         *ApbGetTopkResp         `protobuf:"bytes,13,opt,name=topk" json:"topk,omitempty"` //Also used for TopSum
	Leadb        *ApbGetLeaderboardResp  `protobuf:"bytes,14,opt,name=leadb" json:"leadb,omitempty"`
	Avg          *ApbGetAverageResp      `protobuf:"bytes,15,opt,name=avg" json:"avg,omitempty"`
	Counterfloat *ApbGetCounterFloatResp `protobuf:"bytes,16,opt,name=counterfloat" json:"counterfloat,omitempty"`
	Paircounter  *ApbGetPairCounterResp  `protobuf:"bytes,9,opt,name=paircounter" json:"paircounter,omitempty"`
	Arraycounter *ApbGetArrayCounterResp `protobuf:"bytes,10,opt,name=arraycounter" json:"arraycounter,omitempty"`
	Multiarray   *ApbGetMultiArrayResp   `protobuf:"bytes,17,opt,name=multiarray" json:"multiarray,omitempty"`
	Date         *ApbGetDateResp         `protobuf:"bytes,18,opt,name=date" json:"date,omitempty"`
	Partread     *ApbPartialReadResp     `protobuf:"bytes,8,opt,name=partread" json:"partread,omitempty"` //Generic for non-full state reads from any CRDT
}

func (x *ApbReadObjectResp) Reset() {
	*x = ApbReadObjectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbReadObjectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbReadObjectResp) ProtoMessage() {}

func (x *ApbReadObjectResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbReadObjectResp.ProtoReflect.Descriptor instead.
func (*ApbReadObjectResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{88}
}

func (x *ApbReadObjectResp) GetCounter() *ApbGetCounterResp {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *ApbReadObjectResp) GetSet() *ApbGetSetResp {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ApbReadObjectResp) GetReg() *ApbGetRegResp {
	if x != nil {
		return x.Reg
	}
	return nil
}

func (x *ApbReadObjectResp) GetMvreg() *ApbGetMVRegResp {
	if x != nil {
		return x.Mvreg
	}
	return nil
}

func (x *ApbReadObjectResp) GetMap() *ApbGetMapResp {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ApbReadObjectResp) GetFlag() *ApbGetFlagResp {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *ApbReadObjectResp) GetMaxmin() *ApbGetMaxMinResp {
	if x != nil {
		return x.Maxmin
	}
	return nil
}

func (x *ApbReadObjectResp) GetTopk() *ApbGetTopkResp {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *ApbReadObjectResp) GetLeadb() *ApbGetLeaderboardResp {
	if x != nil {
		return x.Leadb
	}
	return nil
}

func (x *ApbReadObjectResp) GetAvg() *ApbGetAverageResp {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *ApbReadObjectResp) GetCounterfloat() *ApbGetCounterFloatResp {
	if x != nil {
		return x.Counterfloat
	}
	return nil
}

func (x *ApbReadObjectResp) GetPaircounter() *ApbGetPairCounterResp {
	if x != nil {
		return x.Paircounter
	}
	return nil
}

func (x *ApbReadObjectResp) GetArraycounter() *ApbGetArrayCounterResp {
	if x != nil {
		return x.Arraycounter
	}
	return nil
}

func (x *ApbReadObjectResp) GetMultiarray() *ApbGetMultiArrayResp {
	if x != nil {
		return x.Multiarray
	}
	return nil
}

func (x *ApbReadObjectResp) GetDate() *ApbGetDateResp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ApbReadObjectResp) GetPartread() *ApbPartialReadResp {
	if x != nil {
		return x.Partread
	}
	return nil
}

type ApbReadObjectsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   *bool                `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	Objects   []*ApbReadObjectResp `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
	Errorcode *uint32              `protobuf:"varint,3,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (x *ApbReadObjectsResp) Reset() {
	*x = ApbReadObjectsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbReadObjectsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbReadObjectsResp) ProtoMessage() {}

func (x *ApbReadObjectsResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbReadObjectsResp.ProtoReflect.Descriptor instead.
func (*ApbReadObjectsResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{89}
}

func (x *ApbReadObjectsResp) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ApbReadObjectsResp) GetObjects() []*ApbReadObjectResp {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ApbReadObjectsResp) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

// Commit Response
type ApbCommitResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	CommitTime []byte  `protobuf:"bytes,2,opt,name=commit_time,json=commitTime" json:"commit_time,omitempty"`
	Errorcode  *uint32 `protobuf:"varint,3,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (x *ApbCommitResp) Reset() {
	*x = ApbCommitResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCommitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCommitResp) ProtoMessage() {}

func (x *ApbCommitResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCommitResp.ProtoReflect.Descriptor instead.
func (*ApbCommitResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{90}
}

func (x *ApbCommitResp) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ApbCommitResp) GetCommitTime() []byte {
	if x != nil {
		return x.CommitTime
	}
	return nil
}

func (x *ApbCommitResp) GetErrorcode() uint32 {
	if x != nil && x.Errorcode != nil {
		return *x.Errorcode
	}
	return 0
}

type ApbStaticReadObjectsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects    *ApbReadObjectsResp `protobuf:"bytes,1,req,name=objects" json:"objects,omitempty"`
	Committime *ApbCommitResp      `protobuf:"bytes,2,req,name=committime" json:"committime,omitempty"`
}

func (x *ApbStaticReadObjectsResp) Reset() {
	*x = ApbStaticReadObjectsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStaticReadObjectsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStaticReadObjectsResp) ProtoMessage() {}

func (x *ApbStaticReadObjectsResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStaticReadObjectsResp.ProtoReflect.Descriptor instead.
func (*ApbStaticReadObjectsResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{91}
}

func (x *ApbStaticReadObjectsResp) GetObjects() *ApbReadObjectsResp {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ApbStaticReadObjectsResp) GetCommittime() *ApbCommitResp {
	if x != nil {
		return x.Committime
	}
	return nil
}

// Multi-client connection
type ApbMultiClientConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NClients *uint32 `protobuf:"varint,1,opt,name=nClients" json:"nClients,omitempty"`
}

func (x *ApbMultiClientConnect) Reset() {
	*x = ApbMultiClientConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiClientConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiClientConnect) ProtoMessage() {}

func (x *ApbMultiClientConnect) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiClientConnect.ProtoReflect.Descriptor instead.
func (*ApbMultiClientConnect) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{92}
}

func (x *ApbMultiClientConnect) GetNClients() uint32 {
	if x != nil && x.NClients != nil {
		return *x.NClients
	}
	return 0
}

type ApbMultiClientConnectResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbMultiClientConnectResp) Reset() {
	*x = ApbMultiClientConnectResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiClientConnectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiClientConnectResp) ProtoMessage() {}

func (x *ApbMultiClientConnectResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiClientConnectResp.ProtoReflect.Descriptor instead.
func (*ApbMultiClientConnectResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{93}
}

// Replica connection
type ApbConnectReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
}

func (x *ApbConnectReplica) Reset() {
	*x = ApbConnectReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbConnectReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbConnectReplica) ProtoMessage() {}

func (x *ApbConnectReplica) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbConnectReplica.ProtoReflect.Descriptor instead.
func (*ApbConnectReplica) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{94}
}

func (x *ApbConnectReplica) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ApbConnectReplicaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnownIDs []int64 `protobuf:"varint,1,rep,name=knownIDs" json:"knownIDs,omitempty"`
}

func (x *ApbConnectReplicaResp) Reset() {
	*x = ApbConnectReplicaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbConnectReplicaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbConnectReplicaResp) ProtoMessage() {}

func (x *ApbConnectReplicaResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbConnectReplicaResp.ProtoReflect.Descriptor instead.
func (*ApbConnectReplicaResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{95}
}

func (x *ApbConnectReplicaResp) GetKnownIDs() []int64 {
	if x != nil {
		return x.KnownIDs
	}
	return nil
}

// Others
// Resets server state, i.e., deletes all CRDTs and replication status
type ApbResetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbResetServer) Reset() {
	*x = ApbResetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbResetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbResetServer) ProtoMessage() {}

func (x *ApbResetServer) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbResetServer.ProtoReflect.Descriptor instead.
func (*ApbResetServer) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{96}
}

type ApbResetServerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbResetServerResp) Reset() {
	*x = ApbResetServerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbResetServerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbResetServerResp) ProtoMessage() {}

func (x *ApbResetServerResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbResetServerResp.ProtoReflect.Descriptor instead.
func (*ApbResetServerResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{97}
}

// Triggers
type ApbNewTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *ApbTriggerInfo `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	Target    *ApbTriggerInfo `protobuf:"bytes,2,req,name=target" json:"target,omitempty"`
	IsGeneric *bool           `protobuf:"varint,3,req,name=isGeneric" json:"isGeneric,omitempty"`
}

func (x *ApbNewTrigger) Reset() {
	*x = ApbNewTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbNewTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbNewTrigger) ProtoMessage() {}

func (x *ApbNewTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbNewTrigger.ProtoReflect.Descriptor instead.
func (*ApbNewTrigger) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{98}
}

func (x *ApbNewTrigger) GetSource() *ApbTriggerInfo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ApbNewTrigger) GetTarget() *ApbTriggerInfo {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ApbNewTrigger) GetIsGeneric() bool {
	if x != nil && x.IsGeneric != nil {
		return *x.IsGeneric
	}
	return false
}

type ApbTriggerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj    *ApbBoundObject `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
	OpType *int32          `protobuf:"varint,2,req,name=opType" json:"opType,omitempty"`
	NArgs  *int32          `protobuf:"varint,3,req,name=nArgs" json:"nArgs,omitempty"`
	Args   []byte          `protobuf:"bytes,4,req,name=args" json:"args,omitempty"` //gob
}

func (x *ApbTriggerInfo) Reset() {
	*x = ApbTriggerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTriggerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTriggerInfo) ProtoMessage() {}

func (x *ApbTriggerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTriggerInfo.ProtoReflect.Descriptor instead.
func (*ApbTriggerInfo) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{99}
}

func (x *ApbTriggerInfo) GetObj() *ApbBoundObject {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *ApbTriggerInfo) GetOpType() int32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *ApbTriggerInfo) GetNArgs() int32 {
	if x != nil && x.NArgs != nil {
		return *x.NArgs
	}
	return 0
}

func (x *ApbTriggerInfo) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbNewTriggerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbNewTriggerReply) Reset() {
	*x = ApbNewTriggerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbNewTriggerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbNewTriggerReply) ProtoMessage() {}

func (x *ApbNewTriggerReply) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbNewTriggerReply.ProtoReflect.Descriptor instead.
func (*ApbNewTriggerReply) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{100}
}

type ApbGetTriggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbGetTriggers) Reset() {
	*x = ApbGetTriggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetTriggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetTriggers) ProtoMessage() {}

func (x *ApbGetTriggers) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetTriggers.ProtoReflect.Descriptor instead.
func (*ApbGetTriggers) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{101}
}

type ApbGetTriggersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping        []*ApbNewTrigger `protobuf:"bytes,1,rep,name=mapping" json:"mapping,omitempty"`
	GenericMapping []*ApbNewTrigger `protobuf:"bytes,2,rep,name=genericMapping" json:"genericMapping,omitempty"`
}

func (x *ApbGetTriggersReply) Reset() {
	*x = ApbGetTriggersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbGetTriggersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbGetTriggersReply) ProtoMessage() {}

func (x *ApbGetTriggersReply) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbGetTriggersReply.ProtoReflect.Descriptor instead.
func (*ApbGetTriggersReply) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{102}
}

func (x *ApbGetTriggersReply) GetMapping() []*ApbNewTrigger {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *ApbGetTriggersReply) GetGenericMapping() []*ApbNewTrigger {
	if x != nil {
		return x.GenericMapping
	}
	return nil
}

type ApbStringSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sql *string `protobuf:"bytes,1,req,name=sql" json:"sql,omitempty"`
}

func (x *ApbStringSQL) Reset() {
	*x = ApbStringSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStringSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStringSQL) ProtoMessage() {}

func (x *ApbStringSQL) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStringSQL.ProtoReflect.Descriptor instead.
func (*ApbStringSQL) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{103}
}

func (x *ApbStringSQL) GetSql() string {
	if x != nil && x.Sql != nil {
		return *x.Sql
	}
	return ""
}

type ApbTypedSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   *string            `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
	Type        *SQL_Type          `protobuf:"varint,2,req,name=type,enum=SQL_Type" json:"type,omitempty"` //Type of SQL operation
	CreateTable *ApbSQLCreateTable `protobuf:"bytes,3,opt,name=createTable" json:"createTable,omitempty"`
	CreateIndex *ApbSQLCreateIndex `protobuf:"bytes,4,opt,name=createIndex" json:"createIndex,omitempty"`
	CreateView  *ApbSQLCreateView  `protobuf:"bytes,5,opt,name=createView" json:"createView,omitempty"`
	Insert      *ApbSQLInsert      `protobuf:"bytes,6,opt,name=insert" json:"insert,omitempty"`
	Update      *ApbSQLUpdate      `protobuf:"bytes,7,opt,name=update" json:"update,omitempty"`
	Delete      *ApbSQLDelete      `protobuf:"bytes,8,opt,name=delete" json:"delete,omitempty"`
	Drop        *ApbSQLDrop        `protobuf:"bytes,9,opt,name=drop" json:"drop,omitempty"`
	Query       *ApbSQLQuery       `protobuf:"bytes,10,opt,name=query" json:"query,omitempty"`
}

func (x *ApbTypedSQL) Reset() {
	*x = ApbTypedSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTypedSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTypedSQL) ProtoMessage() {}

func (x *ApbTypedSQL) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTypedSQL.ProtoReflect.Descriptor instead.
func (*ApbTypedSQL) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{104}
}

func (x *ApbTypedSQL) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ApbTypedSQL) GetType() SQL_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SQL_Type_CREATE_TABLE
}

func (x *ApbTypedSQL) GetCreateTable() *ApbSQLCreateTable {
	if x != nil {
		return x.CreateTable
	}
	return nil
}

func (x *ApbTypedSQL) GetCreateIndex() *ApbSQLCreateIndex {
	if x != nil {
		return x.CreateIndex
	}
	return nil
}

func (x *ApbTypedSQL) GetCreateView() *ApbSQLCreateView {
	if x != nil {
		return x.CreateView
	}
	return nil
}

func (x *ApbTypedSQL) GetInsert() *ApbSQLInsert {
	if x != nil {
		return x.Insert
	}
	return nil
}

func (x *ApbTypedSQL) GetUpdate() *ApbSQLUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *ApbTypedSQL) GetDelete() *ApbSQLDelete {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *ApbTypedSQL) GetDrop() *ApbSQLDrop {
	if x != nil {
		return x.Drop
	}
	return nil
}

func (x *ApbTypedSQL) GetQuery() *ApbSQLQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ApbSQLCreateTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowPolicy   *ROW_Policy        `protobuf:"varint,1,req,name=rowPolicy,enum=ROW_Policy" json:"rowPolicy,omitempty"`
	Columns     []string           `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Datatypes   []SQL_Datatype     `protobuf:"varint,3,rep,name=datatypes,enum=SQL_Datatype" json:"datatypes,omitempty"`   //Note: The order of the data types must match the order of the columns in the table.
	ColPolicies []COL_Policy       `protobuf:"varint,4,rep,name=colPolicies,enum=COL_Policy" json:"colPolicies,omitempty"` //Note: The order of the column policies must match the order of the columns in the table.
	Defaults    []string           `protobuf:"bytes,5,rep,name=defaults" json:"defaults,omitempty"`
	Invariants  []*ApbSQLInvariant `protobuf:"bytes,6,rep,name=invariants" json:"invariants,omitempty"`
}

func (x *ApbSQLCreateTable) Reset() {
	*x = ApbSQLCreateTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLCreateTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLCreateTable) ProtoMessage() {}

func (x *ApbSQLCreateTable) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLCreateTable.ProtoReflect.Descriptor instead.
func (*ApbSQLCreateTable) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{105}
}

func (x *ApbSQLCreateTable) GetRowPolicy() ROW_Policy {
	if x != nil && x.RowPolicy != nil {
		return *x.RowPolicy
	}
	return ROW_Policy_AW
}

func (x *ApbSQLCreateTable) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ApbSQLCreateTable) GetDatatypes() []SQL_Datatype {
	if x != nil {
		return x.Datatypes
	}
	return nil
}

func (x *ApbSQLCreateTable) GetColPolicies() []COL_Policy {
	if x != nil {
		return x.ColPolicies
	}
	return nil
}

func (x *ApbSQLCreateTable) GetDefaults() []string {
	if x != nil {
		return x.Defaults
	}
	return nil
}

func (x *ApbSQLCreateTable) GetInvariants() []*ApbSQLInvariant {
	if x != nil {
		return x.Invariants
	}
	return nil
}

type ApbSQLCreateIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLCreateIndex) Reset() {
	*x = ApbSQLCreateIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLCreateIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLCreateIndex) ProtoMessage() {}

func (x *ApbSQLCreateIndex) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLCreateIndex.ProtoReflect.Descriptor instead.
func (*ApbSQLCreateIndex) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{106}
}

func (x *ApbSQLCreateIndex) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLCreateView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLCreateView) Reset() {
	*x = ApbSQLCreateView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLCreateView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLCreateView) ProtoMessage() {}

func (x *ApbSQLCreateView) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLCreateView.ProtoReflect.Descriptor instead.
func (*ApbSQLCreateView) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{107}
}

func (x *ApbSQLCreateView) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLInsert) Reset() {
	*x = ApbSQLInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLInsert) ProtoMessage() {}

func (x *ApbSQLInsert) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLInsert.ProtoReflect.Descriptor instead.
func (*ApbSQLInsert) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{108}
}

func (x *ApbSQLInsert) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLUpdate) Reset() {
	*x = ApbSQLUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLUpdate) ProtoMessage() {}

func (x *ApbSQLUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLUpdate.ProtoReflect.Descriptor instead.
func (*ApbSQLUpdate) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{109}
}

func (x *ApbSQLUpdate) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLDelete) Reset() {
	*x = ApbSQLDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLDelete) ProtoMessage() {}

func (x *ApbSQLDelete) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLDelete.ProtoReflect.Descriptor instead.
func (*ApbSQLDelete) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{110}
}

func (x *ApbSQLDelete) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLDrop) Reset() {
	*x = ApbSQLDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLDrop) ProtoMessage() {}

func (x *ApbSQLDrop) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLDrop.ProtoReflect.Descriptor instead.
func (*ApbSQLDrop) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{111}
}

func (x *ApbSQLDrop) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName *string `protobuf:"bytes,1,req,name=tableName" json:"tableName,omitempty"`
}

func (x *ApbSQLQuery) Reset() {
	*x = ApbSQLQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLQuery) ProtoMessage() {}

func (x *ApbSQLQuery) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLQuery.ProtoReflect.Descriptor instead.
func (*ApbSQLQuery) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{112}
}

func (x *ApbSQLQuery) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type ApbSQLInvariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryKey *ApbSQLPrimaryKey `protobuf:"bytes,1,opt,name=primaryKey" json:"primaryKey,omitempty"`
	ForeignKey *ApbSQLForeignKey `protobuf:"bytes,2,opt,name=foreignKey" json:"foreignKey,omitempty"`
	Unique     *ApbSQLPrimaryKey `protobuf:"bytes,3,opt,name=unique" json:"unique,omitempty"`
	Check      *ApbSQLCheck      `protobuf:"bytes,4,opt,name=check" json:"check,omitempty"`
}

func (x *ApbSQLInvariant) Reset() {
	*x = ApbSQLInvariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLInvariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLInvariant) ProtoMessage() {}

func (x *ApbSQLInvariant) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLInvariant.ProtoReflect.Descriptor instead.
func (*ApbSQLInvariant) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{113}
}

func (x *ApbSQLInvariant) GetPrimaryKey() *ApbSQLPrimaryKey {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *ApbSQLInvariant) GetForeignKey() *ApbSQLForeignKey {
	if x != nil {
		return x.ForeignKey
	}
	return nil
}

func (x *ApbSQLInvariant) GetUnique() *ApbSQLPrimaryKey {
	if x != nil {
		return x.Unique
	}
	return nil
}

func (x *ApbSQLInvariant) GetCheck() *ApbSQLCheck {
	if x != nil {
		return x.Check
	}
	return nil
}

type ApbSQLPrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbSQLPrimaryKey) Reset() {
	*x = ApbSQLPrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLPrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLPrimaryKey) ProtoMessage() {}

func (x *ApbSQLPrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLPrimaryKey.ProtoReflect.Descriptor instead.
func (*ApbSQLPrimaryKey) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{114}
}

type ApbSQLForeignKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForeignTable  *string `protobuf:"bytes,1,req,name=foreignTable" json:"foreignTable,omitempty"`
	ForeignColumn *string `protobuf:"bytes,2,req,name=foreignColumn" json:"foreignColumn,omitempty"`
}

func (x *ApbSQLForeignKey) Reset() {
	*x = ApbSQLForeignKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLForeignKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLForeignKey) ProtoMessage() {}

func (x *ApbSQLForeignKey) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLForeignKey.ProtoReflect.Descriptor instead.
func (*ApbSQLForeignKey) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{115}
}

func (x *ApbSQLForeignKey) GetForeignTable() string {
	if x != nil && x.ForeignTable != nil {
		return *x.ForeignTable
	}
	return ""
}

func (x *ApbSQLForeignKey) GetForeignColumn() string {
	if x != nil && x.ForeignColumn != nil {
		return *x.ForeignColumn
	}
	return ""
}

type ApbSQLCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType *COMPType `protobuf:"varint,1,req,name=conditionType,enum=COMPType" json:"conditionType,omitempty"`
	Value         *int32    `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *ApbSQLCheck) Reset() {
	*x = ApbSQLCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSQLCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSQLCheck) ProtoMessage() {}

func (x *ApbSQLCheck) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSQLCheck.ProtoReflect.Descriptor instead.
func (*ApbSQLCheck) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{116}
}

func (x *ApbSQLCheck) GetConditionType() COMPType {
	if x != nil && x.ConditionType != nil {
		return *x.ConditionType
	}
	return COMPType_EQ
}

func (x *ApbSQLCheck) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Allows both "full state reads" (ApbReadObjects), "partial reads" and "process reads"
type ApbRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullreads             []*ApbBoundObject `protobuf:"bytes,1,rep,name=fullreads" json:"fullreads,omitempty"`
	Partialreads          []*ApbPartialRead `protobuf:"bytes,2,rep,name=partialreads" json:"partialreads,omitempty"`
	TransactionDescriptor []byte            `protobuf:"bytes,3,req,name=transaction_descriptor,json=transactionDescriptor" json:"transaction_descriptor,omitempty"` //   repeated ApbProcessRead processreads = 4;
}

func (x *ApbRead) Reset() {
	*x = ApbRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbRead) ProtoMessage() {}

func (x *ApbRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbRead.ProtoReflect.Descriptor instead.
func (*ApbRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{117}
}

func (x *ApbRead) GetFullreads() []*ApbBoundObject {
	if x != nil {
		return x.Fullreads
	}
	return nil
}

func (x *ApbRead) GetPartialreads() []*ApbPartialRead {
	if x != nil {
		return x.Partialreads
	}
	return nil
}

func (x *ApbRead) GetTransactionDescriptor() []byte {
	if x != nil {
		return x.TransactionDescriptor
	}
	return nil
}

type ApbStaticRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullreads    []*ApbBoundObject    `protobuf:"bytes,1,rep,name=fullreads" json:"fullreads,omitempty"`
	Partialreads []*ApbPartialRead    `protobuf:"bytes,2,rep,name=partialreads" json:"partialreads,omitempty"`
	Transaction  *ApbStartTransaction `protobuf:"bytes,3,req,name=transaction" json:"transaction,omitempty"` //    repeated ApbProcessRead processreads = 4;
}

func (x *ApbStaticRead) Reset() {
	*x = ApbStaticRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbStaticRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbStaticRead) ProtoMessage() {}

func (x *ApbStaticRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbStaticRead.ProtoReflect.Descriptor instead.
func (*ApbStaticRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{118}
}

func (x *ApbStaticRead) GetFullreads() []*ApbBoundObject {
	if x != nil {
		return x.Fullreads
	}
	return nil
}

func (x *ApbStaticRead) GetPartialreads() []*ApbPartialRead {
	if x != nil {
		return x.Partialreads
	}
	return nil
}

func (x *ApbStaticRead) GetTransaction() *ApbStartTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type ApbPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object   *ApbBoundObject     `protobuf:"bytes,1,req,name=object" json:"object,omitempty"`
	Readtype *READType           `protobuf:"varint,2,req,name=readtype,enum=READType" json:"readtype,omitempty"`
	Args     *ApbPartialReadArgs `protobuf:"bytes,3,req,name=args" json:"args,omitempty"`
}

func (x *ApbPartialRead) Reset() {
	*x = ApbPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPartialRead) ProtoMessage() {}

func (x *ApbPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPartialRead.ProtoReflect.Descriptor instead.
func (*ApbPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{119}
}

func (x *ApbPartialRead) GetObject() *ApbBoundObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ApbPartialRead) GetReadtype() READType {
	if x != nil && x.Readtype != nil {
		return *x.Readtype
	}
	return READType_FULL
}

func (x *ApbPartialRead) GetArgs() *ApbPartialReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbPartialReadArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set          *ApbSetPartialRead          `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	Map          *ApbMapPartialRead          `protobuf:"bytes,2,opt,name=map" json:"map,omitempty"`
	Topk         *ApbTopkPartialRead         `protobuf:"bytes,3,opt,name=topk" json:"topk,omitempty"`
	Avg          *ApbAvgPartialRead          `protobuf:"bytes,4,opt,name=avg" json:"avg,omitempty"`
	Process      *ApbProcessRead             `protobuf:"bytes,5,opt,name=process" json:"process,omitempty"`
	Paircounter  *ApbPairCounterPartialRead  `protobuf:"bytes,6,opt,name=paircounter" json:"paircounter,omitempty"`
	Arraycounter *ApbArrayCounterPartialRead `protobuf:"bytes,7,opt,name=arraycounter" json:"arraycounter,omitempty"`
	Multiarray   *ApbMultiArrayPartialRead   `protobuf:"bytes,8,opt,name=multiarray" json:"multiarray,omitempty"`
	Mvreg        *ApbMVRegPartialRead        `protobuf:"bytes,9,opt,name=mvreg" json:"mvreg,omitempty"`
	Date         *ApbDatePartialRead         `protobuf:"bytes,10,opt,name=date" json:"date,omitempty"`
}

func (x *ApbPartialReadArgs) Reset() {
	*x = ApbPartialReadArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPartialReadArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPartialReadArgs) ProtoMessage() {}

func (x *ApbPartialReadArgs) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPartialReadArgs.ProtoReflect.Descriptor instead.
func (*ApbPartialReadArgs) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{120}
}

func (x *ApbPartialReadArgs) GetSet() *ApbSetPartialRead {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ApbPartialReadArgs) GetMap() *ApbMapPartialRead {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ApbPartialReadArgs) GetTopk() *ApbTopkPartialRead {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *ApbPartialReadArgs) GetAvg() *ApbAvgPartialRead {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *ApbPartialReadArgs) GetProcess() *ApbProcessRead {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ApbPartialReadArgs) GetPaircounter() *ApbPairCounterPartialRead {
	if x != nil {
		return x.Paircounter
	}
	return nil
}

func (x *ApbPartialReadArgs) GetArraycounter() *ApbArrayCounterPartialRead {
	if x != nil {
		return x.Arraycounter
	}
	return nil
}

func (x *ApbPartialReadArgs) GetMultiarray() *ApbMultiArrayPartialRead {
	if x != nil {
		return x.Multiarray
	}
	return nil
}

func (x *ApbPartialReadArgs) GetMvreg() *ApbMVRegPartialRead {
	if x != nil {
		return x.Mvreg
	}
	return nil
}

func (x *ApbPartialReadArgs) GetDate() *ApbDatePartialRead {
	if x != nil {
		return x.Date
	}
	return nil
}

// A special operation. It executes a group of reads (pre-reads), aggregates the results and
// feeds them as argument into a group of reads (post-reads), executing post-reads.
// Pre-condition: prereads and postreads must not contain themselves another ApbProcessRead.
type ApbProcessRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prereads        []*ApbPartialRead `protobuf:"bytes,1,rep,name=prereads" json:"prereads,omitempty"`
	Aggregationtype *AGGRType         `protobuf:"varint,2,req,name=aggregationtype,enum=AGGRType" json:"aggregationtype,omitempty"`
	Postreads       []*ApbPartialRead `protobuf:"bytes,3,rep,name=postreads" json:"postreads,omitempty"`
}

func (x *ApbProcessRead) Reset() {
	*x = ApbProcessRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbProcessRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbProcessRead) ProtoMessage() {}

func (x *ApbProcessRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbProcessRead.ProtoReflect.Descriptor instead.
func (*ApbProcessRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{121}
}

func (x *ApbProcessRead) GetPrereads() []*ApbPartialRead {
	if x != nil {
		return x.Prereads
	}
	return nil
}

func (x *ApbProcessRead) GetAggregationtype() AGGRType {
	if x != nil && x.Aggregationtype != nil {
		return *x.Aggregationtype
	}
	return AGGRType_A_SUM
}

func (x *ApbProcessRead) GetPostreads() []*ApbPartialRead {
	if x != nil {
		return x.Postreads
	}
	return nil
}

type ApbSetPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lookup *ApbSetLookupRead `protobuf:"bytes,1,opt,name=lookup" json:"lookup,omitempty"`
	Nelems *ApbSetNElemsRead `protobuf:"bytes,2,opt,name=nelems" json:"nelems,omitempty"`
}

func (x *ApbSetPartialRead) Reset() {
	*x = ApbSetPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetPartialRead) ProtoMessage() {}

func (x *ApbSetPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetPartialRead.ProtoReflect.Descriptor instead.
func (*ApbSetPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{122}
}

func (x *ApbSetPartialRead) GetLookup() *ApbSetLookupRead {
	if x != nil {
		return x.Lookup
	}
	return nil
}

func (x *ApbSetPartialRead) GetNelems() *ApbSetNElemsRead {
	if x != nil {
		return x.Nelems
	}
	return nil
}

type ApbMapPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getvalue             *ApbMapGetValueRead         `protobuf:"bytes,1,opt,name=getvalue" json:"getvalue,omitempty"`
	Haskey               *ApbMapHasKeyRead           `protobuf:"bytes,2,opt,name=haskey" json:"haskey,omitempty"`
	Getkeys              *ApbMapGetKeysRead          `protobuf:"bytes,3,opt,name=getkeys" json:"getkeys,omitempty"`
	Getvalues            *ApbMapGetValuesRead        `protobuf:"bytes,4,opt,name=getvalues" json:"getvalues,omitempty"`
	Getallvalues         *ApbMapGetAllValuesRead     `protobuf:"bytes,5,opt,name=getallvalues" json:"getallvalues,omitempty"`
	Condread             *ApbMapCondRead             `protobuf:"bytes,6,opt,name=condread" json:"condread,omitempty"`
	Condallread          *ApbMapAllCondRead          `protobuf:"bytes,7,opt,name=condallread" json:"condallread,omitempty"`
	Exceptread           *ApbMapExceptRead           `protobuf:"bytes,8,opt,name=exceptread" json:"exceptread,omitempty"`
	Exceptcondread       *ApbMapExceptCondRead       `protobuf:"bytes,9,opt,name=exceptcondread" json:"exceptcondread,omitempty"`
	Aggregateread        *ApbMapAggregateRead        `protobuf:"bytes,10,opt,name=aggregateread" json:"aggregateread,omitempty"`
	Exceptsingleread     *ApbMapExceptSingleRead     `protobuf:"bytes,11,opt,name=exceptsingleread" json:"exceptsingleread,omitempty"`
	Exceptcondsingleread *ApbMapExceptCondSingleRead `protobuf:"bytes,12,opt,name=exceptcondsingleread" json:"exceptcondsingleread,omitempty"`
}

func (x *ApbMapPartialRead) Reset() {
	*x = ApbMapPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapPartialRead) ProtoMessage() {}

func (x *ApbMapPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapPartialRead.ProtoReflect.Descriptor instead.
func (*ApbMapPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{123}
}

func (x *ApbMapPartialRead) GetGetvalue() *ApbMapGetValueRead {
	if x != nil {
		return x.Getvalue
	}
	return nil
}

func (x *ApbMapPartialRead) GetHaskey() *ApbMapHasKeyRead {
	if x != nil {
		return x.Haskey
	}
	return nil
}

func (x *ApbMapPartialRead) GetGetkeys() *ApbMapGetKeysRead {
	if x != nil {
		return x.Getkeys
	}
	return nil
}

func (x *ApbMapPartialRead) GetGetvalues() *ApbMapGetValuesRead {
	if x != nil {
		return x.Getvalues
	}
	return nil
}

func (x *ApbMapPartialRead) GetGetallvalues() *ApbMapGetAllValuesRead {
	if x != nil {
		return x.Getallvalues
	}
	return nil
}

func (x *ApbMapPartialRead) GetCondread() *ApbMapCondRead {
	if x != nil {
		return x.Condread
	}
	return nil
}

func (x *ApbMapPartialRead) GetCondallread() *ApbMapAllCondRead {
	if x != nil {
		return x.Condallread
	}
	return nil
}

func (x *ApbMapPartialRead) GetExceptread() *ApbMapExceptRead {
	if x != nil {
		return x.Exceptread
	}
	return nil
}

func (x *ApbMapPartialRead) GetExceptcondread() *ApbMapExceptCondRead {
	if x != nil {
		return x.Exceptcondread
	}
	return nil
}

func (x *ApbMapPartialRead) GetAggregateread() *ApbMapAggregateRead {
	if x != nil {
		return x.Aggregateread
	}
	return nil
}

func (x *ApbMapPartialRead) GetExceptsingleread() *ApbMapExceptSingleRead {
	if x != nil {
		return x.Exceptsingleread
	}
	return nil
}

func (x *ApbMapPartialRead) GetExceptcondsingleread() *ApbMapExceptCondSingleRead {
	if x != nil {
		return x.Exceptcondsingleread
	}
	return nil
}

type ApbTopkPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getn          *ApbTopkGetNRead       `protobuf:"bytes,1,opt,name=getn" json:"getn,omitempty"`
	Getabovevalue *ApbTopkAboveValueRead `protobuf:"bytes,2,opt,name=getabovevalue" json:"getabovevalue,omitempty"`
}

func (x *ApbTopkPartialRead) Reset() {
	*x = ApbTopkPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkPartialRead) ProtoMessage() {}

func (x *ApbTopkPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkPartialRead.ProtoReflect.Descriptor instead.
func (*ApbTopkPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{124}
}

func (x *ApbTopkPartialRead) GetGetn() *ApbTopkGetNRead {
	if x != nil {
		return x.Getn
	}
	return nil
}

func (x *ApbTopkPartialRead) GetGetabovevalue() *ApbTopkAboveValueRead {
	if x != nil {
		return x.Getabovevalue
	}
	return nil
}

type ApbAvgPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getfull *ApbAvgFullRead `protobuf:"bytes,1,opt,name=getfull" json:"getfull,omitempty"`
}

func (x *ApbAvgPartialRead) Reset() {
	*x = ApbAvgPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAvgPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAvgPartialRead) ProtoMessage() {}

func (x *ApbAvgPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAvgPartialRead.ProtoReflect.Descriptor instead.
func (*ApbAvgPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{125}
}

func (x *ApbAvgPartialRead) GetGetfull() *ApbAvgFullRead {
	if x != nil {
		return x.Getfull
	}
	return nil
}

type ApbPairCounterPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *ApbPairCounterFirstRead  `protobuf:"bytes,1,opt,name=first" json:"first,omitempty"`
	Second *ApbPairCounterSecondRead `protobuf:"bytes,2,opt,name=second" json:"second,omitempty"`
}

func (x *ApbPairCounterPartialRead) Reset() {
	*x = ApbPairCounterPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPairCounterPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPairCounterPartialRead) ProtoMessage() {}

func (x *ApbPairCounterPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPairCounterPartialRead.ProtoReflect.Descriptor instead.
func (*ApbPairCounterPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{126}
}

func (x *ApbPairCounterPartialRead) GetFirst() *ApbPairCounterFirstRead {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ApbPairCounterPartialRead) GetSecond() *ApbPairCounterSecondRead {
	if x != nil {
		return x.Second
	}
	return nil
}

type ApbArrayCounterPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single      *ApbArrayCounterSingleRead      `protobuf:"bytes,1,opt,name=single" json:"single,omitempty"`
	Sub         *ApbArrayCounterSubRead         `protobuf:"bytes,2,opt,name=sub" json:"sub,omitempty"`
	Except      *ApbArrayCounterExceptRead      `protobuf:"bytes,3,opt,name=except" json:"except,omitempty"`
	ExceptRange *ApbArrayCounterExceptRangeRead `protobuf:"bytes,4,opt,name=exceptRange" json:"exceptRange,omitempty"`
}

func (x *ApbArrayCounterPartialRead) Reset() {
	*x = ApbArrayCounterPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterPartialRead) ProtoMessage() {}

func (x *ApbArrayCounterPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterPartialRead.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{127}
}

func (x *ApbArrayCounterPartialRead) GetSingle() *ApbArrayCounterSingleRead {
	if x != nil {
		return x.Single
	}
	return nil
}

func (x *ApbArrayCounterPartialRead) GetSub() *ApbArrayCounterSubRead {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *ApbArrayCounterPartialRead) GetExcept() *ApbArrayCounterExceptRead {
	if x != nil {
		return x.Except
	}
	return nil
}

func (x *ApbArrayCounterPartialRead) GetExceptRange() *ApbArrayCounterExceptRangeRead {
	if x != nil {
		return x.ExceptRange
	}
	return nil
}

type ApbMultiArrayPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types    []MultiArrayType           `protobuf:"varint,1,rep,name=types,enum=MultiArrayType" json:"types,omitempty"`
	Full     *ApbMultiArrayFullRead     `protobuf:"bytes,2,opt,name=full" json:"full,omitempty"`
	Pos      *ApbMultiArrayPosRead      `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Range    *ApbMultiArrayRangeRead    `protobuf:"bytes,4,opt,name=range" json:"range,omitempty"`
	Sub      *ApbMultiArraySubRead      `protobuf:"bytes,5,opt,name=sub" json:"sub,omitempty"`
	Cond     *ApbMultiArrayCondRead     `protobuf:"bytes,6,opt,name=cond" json:"cond,omitempty"`
	Datacond *ApbMultiArrayDataCondRead `protobuf:"bytes,7,opt,name=datacond" json:"datacond,omitempty"`
	Custom   *ApbMultiArrayCustomRead   `protobuf:"bytes,8,opt,name=custom" json:"custom,omitempty"`
}

func (x *ApbMultiArrayPartialRead) Reset() {
	*x = ApbMultiArrayPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayPartialRead) ProtoMessage() {}

func (x *ApbMultiArrayPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayPartialRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{128}
}

func (x *ApbMultiArrayPartialRead) GetTypes() []MultiArrayType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetFull() *ApbMultiArrayFullRead {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetPos() *ApbMultiArrayPosRead {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetRange() *ApbMultiArrayRangeRead {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetSub() *ApbMultiArraySubRead {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetCond() *ApbMultiArrayCondRead {
	if x != nil {
		return x.Cond
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetDatacond() *ApbMultiArrayDataCondRead {
	if x != nil {
		return x.Datacond
	}
	return nil
}

func (x *ApbMultiArrayPartialRead) GetCustom() *ApbMultiArrayCustomRead {
	if x != nil {
		return x.Custom
	}
	return nil
}

// SET
type ApbSetLookupRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element []byte `protobuf:"bytes,1,req,name=element" json:"element,omitempty"`
}

func (x *ApbSetLookupRead) Reset() {
	*x = ApbSetLookupRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetLookupRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetLookupRead) ProtoMessage() {}

func (x *ApbSetLookupRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetLookupRead.ProtoReflect.Descriptor instead.
func (*ApbSetLookupRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{129}
}

func (x *ApbSetLookupRead) GetElement() []byte {
	if x != nil {
		return x.Element
	}
	return nil
}

type ApbSetNElemsRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbSetNElemsRead) Reset() {
	*x = ApbSetNElemsRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetNElemsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetNElemsRead) ProtoMessage() {}

func (x *ApbSetNElemsRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetNElemsRead.ProtoReflect.Descriptor instead.
func (*ApbSetNElemsRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{130}
}

// MAP
type ApbMapGetValueRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  []byte                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Args *ApbMapEmbPartialArgs `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
}

func (x *ApbMapGetValueRead) Reset() {
	*x = ApbMapGetValueRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetValueRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetValueRead) ProtoMessage() {}

func (x *ApbMapGetValueRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetValueRead.ProtoReflect.Descriptor instead.
func (*ApbMapGetValueRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{131}
}

func (x *ApbMapGetValueRead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapGetValueRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapHasKeyRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
}

func (x *ApbMapHasKeyRead) Reset() {
	*x = ApbMapHasKeyRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapHasKeyRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapHasKeyRead) ProtoMessage() {}

func (x *ApbMapHasKeyRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapHasKeyRead.ProtoReflect.Descriptor instead.
func (*ApbMapHasKeyRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{132}
}

func (x *ApbMapHasKeyRead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type ApbMapGetKeysRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbMapGetKeysRead) Reset() {
	*x = ApbMapGetKeysRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetKeysRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetKeysRead) ProtoMessage() {}

func (x *ApbMapGetKeysRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetKeysRead.ProtoReflect.Descriptor instead.
func (*ApbMapGetKeysRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{133}
}

// Note: The 2nd argument is optional.
// However, if it's present, then its len must be equal to keys'
type ApbMapGetValuesRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys [][]byte                `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Args []*ApbMapEmbPartialArgs `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (x *ApbMapGetValuesRead) Reset() {
	*x = ApbMapGetValuesRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetValuesRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetValuesRead) ProtoMessage() {}

func (x *ApbMapGetValuesRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetValuesRead.ProtoReflect.Descriptor instead.
func (*ApbMapGetValuesRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{134}
}

func (x *ApbMapGetValuesRead) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ApbMapGetValuesRead) GetArgs() []*ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapAggregateRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregationtype *AGGRType             `protobuf:"varint,1,req,name=aggregationtype,enum=AGGRType" json:"aggregationtype,omitempty"`
	Keys            []string              `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"` //Optional. If not present, then all keys are considered
	Condarg         *ApbMapCondArgs       `protobuf:"bytes,3,opt,name=condarg" json:"condarg,omitempty"`
	Args            *ApbMapEmbPartialArgs `protobuf:"bytes,4,opt,name=args" json:"args,omitempty"`
	AggrKey         *string               `protobuf:"bytes,5,opt,name=aggrKey" json:"aggrKey,omitempty"`
}

func (x *ApbMapAggregateRead) Reset() {
	*x = ApbMapAggregateRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapAggregateRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapAggregateRead) ProtoMessage() {}

func (x *ApbMapAggregateRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapAggregateRead.ProtoReflect.Descriptor instead.
func (*ApbMapAggregateRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{135}
}

func (x *ApbMapAggregateRead) GetAggregationtype() AGGRType {
	if x != nil && x.Aggregationtype != nil {
		return *x.Aggregationtype
	}
	return AGGRType_A_SUM
}

func (x *ApbMapAggregateRead) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ApbMapAggregateRead) GetCondarg() *ApbMapCondArgs {
	if x != nil {
		return x.Condarg
	}
	return nil
}

func (x *ApbMapAggregateRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ApbMapAggregateRead) GetAggrKey() string {
	if x != nil && x.AggrKey != nil {
		return *x.AggrKey
	}
	return ""
}

// If the argument is not present, a full state read is assumed.
type ApbMapGetAllValuesRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args *ApbMapEmbPartialArgs `protobuf:"bytes,1,opt,name=args" json:"args,omitempty"`
}

func (x *ApbMapGetAllValuesRead) Reset() {
	*x = ApbMapGetAllValuesRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetAllValuesRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetAllValuesRead) ProtoMessage() {}

func (x *ApbMapGetAllValuesRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetAllValuesRead.ProtoReflect.Descriptor instead.
func (*ApbMapGetAllValuesRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{136}
}

func (x *ApbMapGetAllValuesRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapCondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condargs []*ApbMapCondArgs `protobuf:"bytes,1,rep,name=condargs" json:"condargs,omitempty"`
}

func (x *ApbMapCondRead) Reset() {
	*x = ApbMapCondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapCondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapCondRead) ProtoMessage() {}

func (x *ApbMapCondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapCondRead.ProtoReflect.Descriptor instead.
func (*ApbMapCondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{137}
}

func (x *ApbMapCondRead) GetCondargs() []*ApbMapCondArgs {
	if x != nil {
		return x.Condargs
	}
	return nil
}

type ApbMapAllCondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condarg *ApbMapCondArgs       `protobuf:"bytes,1,req,name=condarg" json:"condarg,omitempty"`
	Args    *ApbMapEmbPartialArgs `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
}

func (x *ApbMapAllCondRead) Reset() {
	*x = ApbMapAllCondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapAllCondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapAllCondRead) ProtoMessage() {}

func (x *ApbMapAllCondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapAllCondRead.ProtoReflect.Descriptor instead.
func (*ApbMapAllCondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{138}
}

func (x *ApbMapAllCondRead) GetCondarg() *ApbMapCondArgs {
	if x != nil {
		return x.Condarg
	}
	return nil
}

func (x *ApbMapAllCondRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapExceptCondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys    [][]byte        `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Condarg *ApbMapCondArgs `protobuf:"bytes,2,req,name=condarg" json:"condarg,omitempty"`
}

func (x *ApbMapExceptCondRead) Reset() {
	*x = ApbMapExceptCondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapExceptCondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapExceptCondRead) ProtoMessage() {}

func (x *ApbMapExceptCondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapExceptCondRead.ProtoReflect.Descriptor instead.
func (*ApbMapExceptCondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{139}
}

func (x *ApbMapExceptCondRead) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ApbMapExceptCondRead) GetCondarg() *ApbMapCondArgs {
	if x != nil {
		return x.Condarg
	}
	return nil
}

type ApbMapExceptRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys [][]byte              `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Args *ApbMapEmbPartialArgs `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
}

func (x *ApbMapExceptRead) Reset() {
	*x = ApbMapExceptRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapExceptRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapExceptRead) ProtoMessage() {}

func (x *ApbMapExceptRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapExceptRead.ProtoReflect.Descriptor instead.
func (*ApbMapExceptRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{140}
}

func (x *ApbMapExceptRead) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ApbMapExceptRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapExceptSingleRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  []byte                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Args *ApbMapEmbPartialArgs `protobuf:"bytes,2,opt,name=args" json:"args,omitempty"`
}

func (x *ApbMapExceptSingleRead) Reset() {
	*x = ApbMapExceptSingleRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapExceptSingleRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapExceptSingleRead) ProtoMessage() {}

func (x *ApbMapExceptSingleRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapExceptSingleRead.ProtoReflect.Descriptor instead.
func (*ApbMapExceptSingleRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{141}
}

func (x *ApbMapExceptSingleRead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapExceptSingleRead) GetArgs() *ApbMapEmbPartialArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ApbMapExceptCondSingleRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte          `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Condarg *ApbMapCondArgs `protobuf:"bytes,2,req,name=condarg" json:"condarg,omitempty"`
}

func (x *ApbMapExceptCondSingleRead) Reset() {
	*x = ApbMapExceptCondSingleRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapExceptCondSingleRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapExceptCondSingleRead) ProtoMessage() {}

func (x *ApbMapExceptCondSingleRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapExceptCondSingleRead.ProtoReflect.Descriptor instead.
func (*ApbMapExceptCondSingleRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{142}
}

func (x *ApbMapExceptCondSingleRead) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApbMapExceptCondSingleRead) GetCondarg() *ApbMapCondArgs {
	if x != nil {
		return x.Condarg
	}
	return nil
}

type ApbMapCondArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          *string                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"` //Required for ApbMapCondRead
	Intcomp      *ApbCondIntCompare      `protobuf:"bytes,2,opt,name=intcomp" json:"intcomp,omitempty"`
	Floatcomp    *ApbCondFloatCompare    `protobuf:"bytes,3,opt,name=floatcomp" json:"floatcomp,omitempty"`
	Boolcomp     *ApbCondBoolCompare     `protobuf:"bytes,4,opt,name=boolcomp" json:"boolcomp,omitempty"`
	Stringcomp   *ApbCondStringCompare   `protobuf:"bytes,5,opt,name=stringcomp" json:"stringcomp,omitempty"`
	Bytescomp    *ApbCondBytesCompare    `protobuf:"bytes,6,opt,name=bytescomp" json:"bytescomp,omitempty"`
	Mapcomp      *ApbCondMapCompare      `protobuf:"bytes,7,opt,name=mapcomp" json:"mapcomp,omitempty"`
	Nocomp       *ApbCondGetNoCompare    `protobuf:"bytes,8,opt,name=nocomp" json:"nocomp,omitempty"`
	Intvarcomp   *ApbCondIntVarCompare   `protobuf:"bytes,9,opt,name=intvarcomp" json:"intvarcomp,omitempty"`
	Floatvarcomp *ApbCondFloatVarCompare `protobuf:"bytes,10,opt,name=floatvarcomp" json:"floatvarcomp,omitempty"`
}

func (x *ApbMapCondArgs) Reset() {
	*x = ApbMapCondArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapCondArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapCondArgs) ProtoMessage() {}

func (x *ApbMapCondArgs) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapCondArgs.ProtoReflect.Descriptor instead.
func (*ApbMapCondArgs) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{143}
}

func (x *ApbMapCondArgs) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ApbMapCondArgs) GetIntcomp() *ApbCondIntCompare {
	if x != nil {
		return x.Intcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetFloatcomp() *ApbCondFloatCompare {
	if x != nil {
		return x.Floatcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetBoolcomp() *ApbCondBoolCompare {
	if x != nil {
		return x.Boolcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetStringcomp() *ApbCondStringCompare {
	if x != nil {
		return x.Stringcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetBytescomp() *ApbCondBytesCompare {
	if x != nil {
		return x.Bytescomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetMapcomp() *ApbCondMapCompare {
	if x != nil {
		return x.Mapcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetNocomp() *ApbCondGetNoCompare {
	if x != nil {
		return x.Nocomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetIntvarcomp() *ApbCondIntVarCompare {
	if x != nil {
		return x.Intvarcomp
	}
	return nil
}

func (x *ApbMapCondArgs) GetFloatvarcomp() *ApbCondFloatVarCompare {
	if x != nil {
		return x.Floatvarcomp
	}
	return nil
}

type ApbCondIntCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int64    `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	Comp  *COMPType `protobuf:"varint,2,req,name=comp,enum=COMPType" json:"comp,omitempty"`
}

func (x *ApbCondIntCompare) Reset() {
	*x = ApbCondIntCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondIntCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondIntCompare) ProtoMessage() {}

func (x *ApbCondIntCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondIntCompare.ProtoReflect.Descriptor instead.
func (*ApbCondIntCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{144}
}

func (x *ApbCondIntCompare) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApbCondIntCompare) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

type ApbCondFloatCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float64  `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	Comp  *COMPType `protobuf:"varint,2,req,name=comp,enum=COMPType" json:"comp,omitempty"`
}

func (x *ApbCondFloatCompare) Reset() {
	*x = ApbCondFloatCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondFloatCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondFloatCompare) ProtoMessage() {}

func (x *ApbCondFloatCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondFloatCompare.ProtoReflect.Descriptor instead.
func (*ApbCondFloatCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{145}
}

func (x *ApbCondFloatCompare) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApbCondFloatCompare) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

type ApbCondBoolCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *bool `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	IsEqualComp *bool `protobuf:"varint,2,req,name=isEqualComp" json:"isEqualComp,omitempty"`
}

func (x *ApbCondBoolCompare) Reset() {
	*x = ApbCondBoolCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondBoolCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondBoolCompare) ProtoMessage() {}

func (x *ApbCondBoolCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondBoolCompare.ProtoReflect.Descriptor instead.
func (*ApbCondBoolCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{146}
}

func (x *ApbCondBoolCompare) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

func (x *ApbCondBoolCompare) GetIsEqualComp() bool {
	if x != nil && x.IsEqualComp != nil {
		return *x.IsEqualComp
	}
	return false
}

type ApbCondStringCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	IsEqualComp *bool   `protobuf:"varint,2,req,name=isEqualComp" json:"isEqualComp,omitempty"`
}

func (x *ApbCondStringCompare) Reset() {
	*x = ApbCondStringCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondStringCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondStringCompare) ProtoMessage() {}

func (x *ApbCondStringCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondStringCompare.ProtoReflect.Descriptor instead.
func (*ApbCondStringCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{147}
}

func (x *ApbCondStringCompare) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ApbCondStringCompare) GetIsEqualComp() bool {
	if x != nil && x.IsEqualComp != nil {
		return *x.IsEqualComp
	}
	return false
}

type ApbCondBytesCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	IsEqualComp *bool  `protobuf:"varint,2,req,name=isEqualComp" json:"isEqualComp,omitempty"`
}

func (x *ApbCondBytesCompare) Reset() {
	*x = ApbCondBytesCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondBytesCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondBytesCompare) ProtoMessage() {}

func (x *ApbCondBytesCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondBytesCompare.ProtoReflect.Descriptor instead.
func (*ApbCondBytesCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{148}
}

func (x *ApbCondBytesCompare) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ApbCondBytesCompare) GetIsEqualComp() bool {
	if x != nil && x.IsEqualComp != nil {
		return *x.IsEqualComp
	}
	return false
}

type ApbCondMapCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*ApbMapCondArgs `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (x *ApbCondMapCompare) Reset() {
	*x = ApbCondMapCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondMapCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondMapCompare) ProtoMessage() {}

func (x *ApbCondMapCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondMapCompare.ProtoReflect.Descriptor instead.
func (*ApbCondMapCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{149}
}

func (x *ApbCondMapCompare) GetValue() []*ApbMapCondArgs {
	if x != nil {
		return x.Value
	}
	return nil
}

type ApbCondGetNoCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbCondGetNoCompare) Reset() {
	*x = ApbCondGetNoCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondGetNoCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondGetNoCompare) ProtoMessage() {}

func (x *ApbCondGetNoCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondGetNoCompare.ProtoReflect.Descriptor instead.
func (*ApbCondGetNoCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{150}
}

type ApbCondIntVarCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comp *COMPType `protobuf:"varint,1,req,name=comp,enum=COMPType" json:"comp,omitempty"`
}

func (x *ApbCondIntVarCompare) Reset() {
	*x = ApbCondIntVarCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondIntVarCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondIntVarCompare) ProtoMessage() {}

func (x *ApbCondIntVarCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondIntVarCompare.ProtoReflect.Descriptor instead.
func (*ApbCondIntVarCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{151}
}

func (x *ApbCondIntVarCompare) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

type ApbCondFloatVarCompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comp *COMPType `protobuf:"varint,1,req,name=comp,enum=COMPType" json:"comp,omitempty"`
}

func (x *ApbCondFloatVarCompare) Reset() {
	*x = ApbCondFloatVarCompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbCondFloatVarCompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbCondFloatVarCompare) ProtoMessage() {}

func (x *ApbCondFloatVarCompare) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbCondFloatVarCompare.ProtoReflect.Descriptor instead.
func (*ApbCondFloatVarCompare) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{152}
}

func (x *ApbCondFloatVarCompare) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

// Helper for identifying a partial read of an embedded CRDT
type ApbMapEmbPartialArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *CRDTType           `protobuf:"varint,1,opt,name=type,enum=CRDTType" json:"type,omitempty"`
	Readtype *READType           `protobuf:"varint,2,req,name=readtype,enum=READType" json:"readtype,omitempty"`
	Args     *ApbPartialReadArgs `protobuf:"bytes,3,opt,name=args" json:"args,omitempty"` //If not present, then it's a full read
}

func (x *ApbMapEmbPartialArgs) Reset() {
	*x = ApbMapEmbPartialArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapEmbPartialArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapEmbPartialArgs) ProtoMessage() {}

func (x *ApbMapEmbPartialArgs) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapEmbPartialArgs.ProtoReflect.Descriptor instead.
func (*ApbMapEmbPartialArgs) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{153}
}

func (x *ApbMapEmbPartialArgs) GetType() CRDTType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CRDTType_COUNTER
}

func (x *ApbMapEmbPartialArgs) GetReadtype() READType {
	if x != nil && x.Readtype != nil {
		return *x.Readtype
	}
	return READType_FULL
}

func (x *ApbMapEmbPartialArgs) GetArgs() *ApbPartialReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

// TOPK
type ApbTopkGetNRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *int32 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
}

func (x *ApbTopkGetNRead) Reset() {
	*x = ApbTopkGetNRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkGetNRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkGetNRead) ProtoMessage() {}

func (x *ApbTopkGetNRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkGetNRead.ProtoReflect.Descriptor instead.
func (*ApbTopkGetNRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{154}
}

func (x *ApbTopkGetNRead) GetAmount() int32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type ApbTopkAboveValueRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinValue *int32 `protobuf:"varint,1,req,name=minValue" json:"minValue,omitempty"`
}

func (x *ApbTopkAboveValueRead) Reset() {
	*x = ApbTopkAboveValueRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkAboveValueRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkAboveValueRead) ProtoMessage() {}

func (x *ApbTopkAboveValueRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkAboveValueRead.ProtoReflect.Descriptor instead.
func (*ApbTopkAboveValueRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{155}
}

func (x *ApbTopkAboveValueRead) GetMinValue() int32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

// AVG
type ApbAvgFullRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbAvgFullRead) Reset() {
	*x = ApbAvgFullRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAvgFullRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAvgFullRead) ProtoMessage() {}

func (x *ApbAvgFullRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAvgFullRead.ProtoReflect.Descriptor instead.
func (*ApbAvgFullRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{156}
}

// PAIRCOUNTER
type ApbPairCounterFirstRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbPairCounterFirstRead) Reset() {
	*x = ApbPairCounterFirstRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPairCounterFirstRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPairCounterFirstRead) ProtoMessage() {}

func (x *ApbPairCounterFirstRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPairCounterFirstRead.ProtoReflect.Descriptor instead.
func (*ApbPairCounterFirstRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{157}
}

type ApbPairCounterSecondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbPairCounterSecondRead) Reset() {
	*x = ApbPairCounterSecondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPairCounterSecondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPairCounterSecondRead) ProtoMessage() {}

func (x *ApbPairCounterSecondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPairCounterSecondRead.ProtoReflect.Descriptor instead.
func (*ApbPairCounterSecondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{158}
}

// ARRAYCOUNTER
type ApbArrayCounterSingleRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
}

func (x *ApbArrayCounterSingleRead) Reset() {
	*x = ApbArrayCounterSingleRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterSingleRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterSingleRead) ProtoMessage() {}

func (x *ApbArrayCounterSingleRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterSingleRead.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterSingleRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{159}
}

func (x *ApbArrayCounterSingleRead) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ApbArrayCounterSubRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []int32 `protobuf:"varint,1,rep,name=indexes" json:"indexes,omitempty"`
}

func (x *ApbArrayCounterSubRead) Reset() {
	*x = ApbArrayCounterSubRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterSubRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterSubRead) ProtoMessage() {}

func (x *ApbArrayCounterSubRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterSubRead.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterSubRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{160}
}

func (x *ApbArrayCounterSubRead) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type ApbArrayCounterExceptRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
}

func (x *ApbArrayCounterExceptRead) Reset() {
	*x = ApbArrayCounterExceptRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterExceptRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterExceptRead) ProtoMessage() {}

func (x *ApbArrayCounterExceptRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterExceptRead.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterExceptRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{161}
}

func (x *ApbArrayCounterExceptRead) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ApbArrayCounterExceptRangeRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes        []int32 `protobuf:"varint,1,rep,name=indexes" json:"indexes,omitempty"`
	NPositionsSkip *int32  `protobuf:"varint,2,opt,name=nPositionsSkip" json:"nPositionsSkip,omitempty"`
}

func (x *ApbArrayCounterExceptRangeRead) Reset() {
	*x = ApbArrayCounterExceptRangeRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterExceptRangeRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterExceptRangeRead) ProtoMessage() {}

func (x *ApbArrayCounterExceptRangeRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterExceptRangeRead.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterExceptRangeRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{162}
}

func (x *ApbArrayCounterExceptRangeRead) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *ApbArrayCounterExceptRangeRead) GetNPositionsSkip() int32 {
	if x != nil && x.NPositionsSkip != nil {
		return *x.NPositionsSkip
	}
	return 0
}

// MUTIARRAY
type ApbMultiArrayFullRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbMultiArrayFullRead) Reset() {
	*x = ApbMultiArrayFullRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFullRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFullRead) ProtoMessage() {}

func (x *ApbMultiArrayFullRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFullRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFullRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{163}
}

type ApbMultiArrayPosRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos []int32 `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
}

func (x *ApbMultiArrayPosRead) Reset() {
	*x = ApbMultiArrayPosRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayPosRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayPosRead) ProtoMessage() {}

func (x *ApbMultiArrayPosRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayPosRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayPosRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{164}
}

func (x *ApbMultiArrayPosRead) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

type ApbMultiArrayRangeRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start []int32 `protobuf:"varint,1,rep,name=start" json:"start,omitempty"`
	End   []int32 `protobuf:"varint,2,rep,name=end" json:"end,omitempty"`
}

func (x *ApbMultiArrayRangeRead) Reset() {
	*x = ApbMultiArrayRangeRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayRangeRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayRangeRead) ProtoMessage() {}

func (x *ApbMultiArrayRangeRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayRangeRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayRangeRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{165}
}

func (x *ApbMultiArrayRangeRead) GetStart() []int32 {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ApbMultiArrayRangeRead) GetEnd() []int32 {
	if x != nil {
		return x.End
	}
	return nil
}

type ApbMultiArraySubRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*IntSlice `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
}

func (x *ApbMultiArraySubRead) Reset() {
	*x = ApbMultiArraySubRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArraySubRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArraySubRead) ProtoMessage() {}

func (x *ApbMultiArraySubRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArraySubRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArraySubRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{166}
}

func (x *ApbMultiArraySubRead) GetIndexes() []*IntSlice {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type ApbMultiArrayCondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparePos   *int32          `protobuf:"varint,1,req,name=comparePos" json:"comparePos,omitempty"`
	Comp         *COMPType       `protobuf:"varint,2,req,name=comp,enum=COMPType" json:"comp,omitempty"`
	CompareType  *MultiArrayType `protobuf:"varint,3,req,name=compareType,enum=MultiArrayType" json:"compareType,omitempty"`
	CompareInt   *int64          `protobuf:"varint,4,opt,name=compareInt" json:"compareInt,omitempty"`
	CompareFloat *float64        `protobuf:"fixed64,5,opt,name=compareFloat" json:"compareFloat,omitempty"` //Also used by average
	CompareData  []byte          `protobuf:"bytes,6,opt,name=compareData" json:"compareData,omitempty"`
}

func (x *ApbMultiArrayCondRead) Reset() {
	*x = ApbMultiArrayCondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayCondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayCondRead) ProtoMessage() {}

func (x *ApbMultiArrayCondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayCondRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayCondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{167}
}

func (x *ApbMultiArrayCondRead) GetComparePos() int32 {
	if x != nil && x.ComparePos != nil {
		return *x.ComparePos
	}
	return 0
}

func (x *ApbMultiArrayCondRead) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

func (x *ApbMultiArrayCondRead) GetCompareType() MultiArrayType {
	if x != nil && x.CompareType != nil {
		return *x.CompareType
	}
	return MultiArrayType_INT
}

func (x *ApbMultiArrayCondRead) GetCompareInt() int64 {
	if x != nil && x.CompareInt != nil {
		return *x.CompareInt
	}
	return 0
}

func (x *ApbMultiArrayCondRead) GetCompareFloat() float64 {
	if x != nil && x.CompareFloat != nil {
		return *x.CompareFloat
	}
	return 0
}

func (x *ApbMultiArrayCondRead) GetCompareData() []byte {
	if x != nil {
		return x.CompareData
	}
	return nil
}

type ApbMultiArrayDataCondRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparePos   *int32          `protobuf:"varint,1,req,name=comparePos" json:"comparePos,omitempty"`
	Comp         *COMPType       `protobuf:"varint,2,opt,name=comp,enum=COMPType" json:"comp,omitempty"`
	CompareType  *MultiArrayType `protobuf:"varint,3,opt,name=compareType,enum=MultiArrayType" json:"compareType,omitempty"`
	CompareInt   *int64          `protobuf:"varint,4,opt,name=compareInt" json:"compareInt,omitempty"`
	CompareFloat *float64        `protobuf:"fixed64,5,opt,name=compareFloat" json:"compareFloat,omitempty"` //Also used by average
	CompareData  []byte          `protobuf:"bytes,6,opt,name=compareData" json:"compareData,omitempty"`
}

func (x *ApbMultiArrayDataCondRead) Reset() {
	*x = ApbMultiArrayDataCondRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataCondRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataCondRead) ProtoMessage() {}

func (x *ApbMultiArrayDataCondRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataCondRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataCondRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{168}
}

func (x *ApbMultiArrayDataCondRead) GetComparePos() int32 {
	if x != nil && x.ComparePos != nil {
		return *x.ComparePos
	}
	return 0
}

func (x *ApbMultiArrayDataCondRead) GetComp() COMPType {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return COMPType_EQ
}

func (x *ApbMultiArrayDataCondRead) GetCompareType() MultiArrayType {
	if x != nil && x.CompareType != nil {
		return *x.CompareType
	}
	return MultiArrayType_INT
}

func (x *ApbMultiArrayDataCondRead) GetCompareInt() int64 {
	if x != nil && x.CompareInt != nil {
		return *x.CompareInt
	}
	return 0
}

func (x *ApbMultiArrayDataCondRead) GetCompareFloat() float64 {
	if x != nil && x.CompareFloat != nil {
		return *x.CompareFloat
	}
	return 0
}

func (x *ApbMultiArrayDataCondRead) GetCompareData() []byte {
	if x != nil {
		return x.CompareData
	}
	return nil
}

type ApbMultiArrayCustomRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntIndexes   []int32 `protobuf:"varint,1,rep,name=intIndexes" json:"intIndexes,omitempty"`
	FloatIndexes []int32 `protobuf:"varint,2,rep,name=floatIndexes" json:"floatIndexes,omitempty"`
	DataIndexes  []int32 `protobuf:"varint,3,rep,name=dataIndexes" json:"dataIndexes,omitempty"`
	AvgIndexes   []int32 `protobuf:"varint,4,rep,name=avgIndexes" json:"avgIndexes,omitempty"`
}

func (x *ApbMultiArrayCustomRead) Reset() {
	*x = ApbMultiArrayCustomRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayCustomRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayCustomRead) ProtoMessage() {}

func (x *ApbMultiArrayCustomRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayCustomRead.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayCustomRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{169}
}

func (x *ApbMultiArrayCustomRead) GetIntIndexes() []int32 {
	if x != nil {
		return x.IntIndexes
	}
	return nil
}

func (x *ApbMultiArrayCustomRead) GetFloatIndexes() []int32 {
	if x != nil {
		return x.FloatIndexes
	}
	return nil
}

func (x *ApbMultiArrayCustomRead) GetDataIndexes() []int32 {
	if x != nil {
		return x.DataIndexes
	}
	return nil
}

func (x *ApbMultiArrayCustomRead) GetAvgIndexes() []int32 {
	if x != nil {
		return x.AvgIndexes
	}
	return nil
}

type IntSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
}

func (x *IntSlice) Reset() {
	*x = IntSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntSlice) ProtoMessage() {}

func (x *IntSlice) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntSlice.ProtoReflect.Descriptor instead.
func (*IntSlice) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{170}
}

func (x *IntSlice) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// MVREG
type ApbMVRegPartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single *ApbMVRegSingleRead `protobuf:"bytes,1,opt,name=single" json:"single,omitempty"`
}

func (x *ApbMVRegPartialRead) Reset() {
	*x = ApbMVRegPartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMVRegPartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMVRegPartialRead) ProtoMessage() {}

func (x *ApbMVRegPartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMVRegPartialRead.ProtoReflect.Descriptor instead.
func (*ApbMVRegPartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{171}
}

func (x *ApbMVRegPartialRead) GetSingle() *ApbMVRegSingleRead {
	if x != nil {
		return x.Single
	}
	return nil
}

type ApbMVRegSingleRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApbMVRegSingleRead) Reset() {
	*x = ApbMVRegSingleRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMVRegSingleRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMVRegSingleRead) ProtoMessage() {}

func (x *ApbMVRegSingleRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMVRegSingleRead.ProtoReflect.Descriptor instead.
func (*ApbMVRegSingleRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{172}
}

// DATE
type ApbDatePartialRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataReadType *READType `protobuf:"varint,1,req,name=dataReadType,enum=READType" json:"dataReadType,omitempty"`
}

func (x *ApbDatePartialRead) Reset() {
	*x = ApbDatePartialRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDatePartialRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDatePartialRead) ProtoMessage() {}

func (x *ApbDatePartialRead) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDatePartialRead.ProtoReflect.Descriptor instead.
func (*ApbDatePartialRead) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{173}
}

func (x *ApbDatePartialRead) GetDataReadType() READType {
	if x != nil && x.DataReadType != nil {
		return *x.DataReadType
	}
	return READType_FULL
}

// RESP
type ApbPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set          *ApbSetPartialReadResp          `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	Map          *ApbMapPartialReadResp          `protobuf:"bytes,2,opt,name=map" json:"map,omitempty"`
	Topk         *ApbTopkPartialReadResp         `protobuf:"bytes,3,opt,name=topk" json:"topk,omitempty"`
	Avg          *ApbAvgPartialReadResp          `protobuf:"bytes,4,opt,name=avg" json:"avg,omitempty"`
	Paircounter  *ApbPairCounterPartialReadResp  `protobuf:"bytes,5,opt,name=paircounter" json:"paircounter,omitempty"`
	Arraycounter *ApbArrayCounterPartialReadResp `protobuf:"bytes,6,opt,name=arraycounter" json:"arraycounter,omitempty"` //Sub read uses the non-partial reply.
	Multiarray   *ApbMultiArrayPartialReadResp   `protobuf:"bytes,7,opt,name=multiarray" json:"multiarray,omitempty"`     //Note: Reads returning multiple arrays use non-partial reply.
	Mvreg        *ApbMVRegPartialReadResp        `protobuf:"bytes,8,opt,name=mvreg" json:"mvreg,omitempty"`
	Date         *ApbDatePartialReadResp         `protobuf:"bytes,9,opt,name=date" json:"date,omitempty"`
}

func (x *ApbPartialReadResp) Reset() {
	*x = ApbPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPartialReadResp) ProtoMessage() {}

func (x *ApbPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{174}
}

func (x *ApbPartialReadResp) GetSet() *ApbSetPartialReadResp {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *ApbPartialReadResp) GetMap() *ApbMapPartialReadResp {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ApbPartialReadResp) GetTopk() *ApbTopkPartialReadResp {
	if x != nil {
		return x.Topk
	}
	return nil
}

func (x *ApbPartialReadResp) GetAvg() *ApbAvgPartialReadResp {
	if x != nil {
		return x.Avg
	}
	return nil
}

func (x *ApbPartialReadResp) GetPaircounter() *ApbPairCounterPartialReadResp {
	if x != nil {
		return x.Paircounter
	}
	return nil
}

func (x *ApbPartialReadResp) GetArraycounter() *ApbArrayCounterPartialReadResp {
	if x != nil {
		return x.Arraycounter
	}
	return nil
}

func (x *ApbPartialReadResp) GetMultiarray() *ApbMultiArrayPartialReadResp {
	if x != nil {
		return x.Multiarray
	}
	return nil
}

func (x *ApbPartialReadResp) GetMvreg() *ApbMVRegPartialReadResp {
	if x != nil {
		return x.Mvreg
	}
	return nil
}

func (x *ApbPartialReadResp) GetDate() *ApbDatePartialReadResp {
	if x != nil {
		return x.Date
	}
	return nil
}

type ApbSetPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lookup *ApbSetLookupReadResp `protobuf:"bytes,1,opt,name=lookup" json:"lookup,omitempty"`
	Nelems *ApbSetNElemsReadResp `protobuf:"bytes,2,opt,name=nelems" json:"nelems,omitempty"`
}

func (x *ApbSetPartialReadResp) Reset() {
	*x = ApbSetPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetPartialReadResp) ProtoMessage() {}

func (x *ApbSetPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbSetPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{175}
}

func (x *ApbSetPartialReadResp) GetLookup() *ApbSetLookupReadResp {
	if x != nil {
		return x.Lookup
	}
	return nil
}

func (x *ApbSetPartialReadResp) GetNelems() *ApbSetNElemsReadResp {
	if x != nil {
		return x.Nelems
	}
	return nil
}

type ApbMapPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getvalue  *ApbMapGetValueResp    `protobuf:"bytes,1,opt,name=getvalue" json:"getvalue,omitempty"` //Used for both mapGetValue and mapGetPartial
	Haskey    *ApbMapHasKeyReadResp  `protobuf:"bytes,2,opt,name=haskey" json:"haskey,omitempty"`
	Getkeys   *ApbMapGetKeysReadResp `protobuf:"bytes,3,opt,name=getkeys" json:"getkeys,omitempty"`
	Getvalues *ApbMapGetValuesResp   `protobuf:"bytes,4,opt,name=getvalues" json:"getvalues,omitempty"`
}

func (x *ApbMapPartialReadResp) Reset() {
	*x = ApbMapPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapPartialReadResp) ProtoMessage() {}

func (x *ApbMapPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbMapPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{176}
}

func (x *ApbMapPartialReadResp) GetGetvalue() *ApbMapGetValueResp {
	if x != nil {
		return x.Getvalue
	}
	return nil
}

func (x *ApbMapPartialReadResp) GetHaskey() *ApbMapHasKeyReadResp {
	if x != nil {
		return x.Haskey
	}
	return nil
}

func (x *ApbMapPartialReadResp) GetGetkeys() *ApbMapGetKeysReadResp {
	if x != nil {
		return x.Getkeys
	}
	return nil
}

func (x *ApbMapPartialReadResp) GetGetvalues() *ApbMapGetValuesResp {
	if x != nil {
		return x.Getvalues
	}
	return nil
}

type ApbAvgPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Getfull *ApbAvgGetFullReadResp `protobuf:"bytes,1,opt,name=getfull" json:"getfull,omitempty"`
}

func (x *ApbAvgPartialReadResp) Reset() {
	*x = ApbAvgPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAvgPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAvgPartialReadResp) ProtoMessage() {}

func (x *ApbAvgPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAvgPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbAvgPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{177}
}

func (x *ApbAvgPartialReadResp) GetGetfull() *ApbAvgGetFullReadResp {
	if x != nil {
		return x.Getfull
	}
	return nil
}

type ApbTopkPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs *ApbGetTopkResp `protobuf:"bytes,1,req,name=pairs" json:"pairs,omitempty"`
}

func (x *ApbTopkPartialReadResp) Reset() {
	*x = ApbTopkPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTopkPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTopkPartialReadResp) ProtoMessage() {}

func (x *ApbTopkPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTopkPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbTopkPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{178}
}

func (x *ApbTopkPartialReadResp) GetPairs() *ApbGetTopkResp {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type ApbSetLookupReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Has *bool `protobuf:"varint,1,req,name=has" json:"has,omitempty"`
}

func (x *ApbSetLookupReadResp) Reset() {
	*x = ApbSetLookupReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetLookupReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetLookupReadResp) ProtoMessage() {}

func (x *ApbSetLookupReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetLookupReadResp.ProtoReflect.Descriptor instead.
func (*ApbSetLookupReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{179}
}

func (x *ApbSetLookupReadResp) GetHas() bool {
	if x != nil && x.Has != nil {
		return *x.Has
	}
	return false
}

type ApbSetNElemsReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *int32 `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
}

func (x *ApbSetNElemsReadResp) Reset() {
	*x = ApbSetNElemsReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbSetNElemsReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbSetNElemsReadResp) ProtoMessage() {}

func (x *ApbSetNElemsReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbSetNElemsReadResp.ProtoReflect.Descriptor instead.
func (*ApbSetNElemsReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{180}
}

func (x *ApbSetNElemsReadResp) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ApbMapGetValueResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    *ApbReadObjectResp `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Crdttype *CRDTType          `protobuf:"varint,2,opt,name=crdttype,enum=CRDTType" json:"crdttype,omitempty"`
	Parttype *READType          `protobuf:"varint,3,opt,name=parttype,enum=READType" json:"parttype,omitempty"`
}

func (x *ApbMapGetValueResp) Reset() {
	*x = ApbMapGetValueResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetValueResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetValueResp) ProtoMessage() {}

func (x *ApbMapGetValueResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetValueResp.ProtoReflect.Descriptor instead.
func (*ApbMapGetValueResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{181}
}

func (x *ApbMapGetValueResp) GetValue() *ApbReadObjectResp {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ApbMapGetValueResp) GetCrdttype() CRDTType {
	if x != nil && x.Crdttype != nil {
		return *x.Crdttype
	}
	return CRDTType_COUNTER
}

func (x *ApbMapGetValueResp) GetParttype() READType {
	if x != nil && x.Parttype != nil {
		return *x.Parttype
	}
	return READType_FULL
}

type ApbMapHasKeyReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Has *bool `protobuf:"varint,1,req,name=has" json:"has,omitempty"`
}

func (x *ApbMapHasKeyReadResp) Reset() {
	*x = ApbMapHasKeyReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapHasKeyReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapHasKeyReadResp) ProtoMessage() {}

func (x *ApbMapHasKeyReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapHasKeyReadResp.ProtoReflect.Descriptor instead.
func (*ApbMapHasKeyReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{182}
}

func (x *ApbMapHasKeyReadResp) GetHas() bool {
	if x != nil && x.Has != nil {
		return *x.Has
	}
	return false
}

type ApbMapGetKeysReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (x *ApbMapGetKeysReadResp) Reset() {
	*x = ApbMapGetKeysReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetKeysReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetKeysReadResp) ProtoMessage() {}

func (x *ApbMapGetKeysReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetKeysReadResp.ProtoReflect.Descriptor instead.
func (*ApbMapGetKeysReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{183}
}

func (x *ApbMapGetKeysReadResp) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ApbMapGetValuesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   [][]byte              `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Values []*ApbMapGetValueResp `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *ApbMapGetValuesResp) Reset() {
	*x = ApbMapGetValuesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMapGetValuesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMapGetValuesResp) ProtoMessage() {}

func (x *ApbMapGetValuesResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMapGetValuesResp.ProtoReflect.Descriptor instead.
func (*ApbMapGetValuesResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{184}
}

func (x *ApbMapGetValuesResp) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ApbMapGetValuesResp) GetValues() []*ApbMapGetValueResp {
	if x != nil {
		return x.Values
	}
	return nil
}

type ApbAvgGetFullReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum   *int64 `protobuf:"varint,1,req,name=sum" json:"sum,omitempty"`
	NAdds *int64 `protobuf:"varint,2,req,name=nAdds" json:"nAdds,omitempty"`
}

func (x *ApbAvgGetFullReadResp) Reset() {
	*x = ApbAvgGetFullReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbAvgGetFullReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbAvgGetFullReadResp) ProtoMessage() {}

func (x *ApbAvgGetFullReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbAvgGetFullReadResp.ProtoReflect.Descriptor instead.
func (*ApbAvgGetFullReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{185}
}

func (x *ApbAvgGetFullReadResp) GetSum() int64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

func (x *ApbAvgGetFullReadResp) GetNAdds() int64 {
	if x != nil && x.NAdds != nil {
		return *x.NAdds
	}
	return 0
}

type ApbPairCounterPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  *int32   `protobuf:"zigzag32,1,opt,name=first" json:"first,omitempty"`
	Second *float64 `protobuf:"fixed64,2,opt,name=second" json:"second,omitempty"`
}

func (x *ApbPairCounterPartialReadResp) Reset() {
	*x = ApbPairCounterPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbPairCounterPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbPairCounterPartialReadResp) ProtoMessage() {}

func (x *ApbPairCounterPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbPairCounterPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbPairCounterPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{186}
}

func (x *ApbPairCounterPartialReadResp) GetFirst() int32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *ApbPairCounterPartialReadResp) GetSecond() float64 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

type ApbArrayCounterPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int64 `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbArrayCounterPartialReadResp) Reset() {
	*x = ApbArrayCounterPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbArrayCounterPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbArrayCounterPartialReadResp) ProtoMessage() {}

func (x *ApbArrayCounterPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbArrayCounterPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbArrayCounterPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{187}
}

func (x *ApbArrayCounterPartialReadResp) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type ApbMultiArrayPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *MultiArrayType                 `protobuf:"varint,1,req,name=type,enum=MultiArrayType" json:"type,omitempty"`
	Ints          *ApbMultiArrayIntResp           `protobuf:"bytes,2,opt,name=ints" json:"ints,omitempty"`
	Floats        *ApbMultiArrayFloatResp         `protobuf:"bytes,3,opt,name=floats" json:"floats,omitempty"`
	Data          *ApbMultiArrayDataResp          `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Avgs          *ApbMultiArrayAvgResp           `protobuf:"bytes,5,opt,name=avgs" json:"avgs,omitempty"`
	Single        *ApbMultiArraySingleResp        `protobuf:"bytes,6,opt,name=single" json:"single,omitempty"`
	DataAndSingle *ApbMultiArrayDataAndSingleResp `protobuf:"bytes,7,opt,name=dataAndSingle" json:"dataAndSingle,omitempty"`
}

func (x *ApbMultiArrayPartialReadResp) Reset() {
	*x = ApbMultiArrayPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayPartialReadResp) ProtoMessage() {}

func (x *ApbMultiArrayPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{188}
}

func (x *ApbMultiArrayPartialReadResp) GetType() MultiArrayType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MultiArrayType_INT
}

func (x *ApbMultiArrayPartialReadResp) GetInts() *ApbMultiArrayIntResp {
	if x != nil {
		return x.Ints
	}
	return nil
}

func (x *ApbMultiArrayPartialReadResp) GetFloats() *ApbMultiArrayFloatResp {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *ApbMultiArrayPartialReadResp) GetData() *ApbMultiArrayDataResp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ApbMultiArrayPartialReadResp) GetAvgs() *ApbMultiArrayAvgResp {
	if x != nil {
		return x.Avgs
	}
	return nil
}

func (x *ApbMultiArrayPartialReadResp) GetSingle() *ApbMultiArraySingleResp {
	if x != nil {
		return x.Single
	}
	return nil
}

func (x *ApbMultiArrayPartialReadResp) GetDataAndSingle() *ApbMultiArrayDataAndSingleResp {
	if x != nil {
		return x.DataAndSingle
	}
	return nil
}

type ApbMultiArrayIntResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntValues []int64 `protobuf:"varint,1,rep,name=intValues" json:"intValues,omitempty"`
}

func (x *ApbMultiArrayIntResp) Reset() {
	*x = ApbMultiArrayIntResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayIntResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayIntResp) ProtoMessage() {}

func (x *ApbMultiArrayIntResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayIntResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayIntResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{189}
}

func (x *ApbMultiArrayIntResp) GetIntValues() []int64 {
	if x != nil {
		return x.IntValues
	}
	return nil
}

type ApbMultiArrayFloatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValues []float64 `protobuf:"fixed64,1,rep,name=floatValues" json:"floatValues,omitempty"`
}

func (x *ApbMultiArrayFloatResp) Reset() {
	*x = ApbMultiArrayFloatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayFloatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayFloatResp) ProtoMessage() {}

func (x *ApbMultiArrayFloatResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayFloatResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayFloatResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{190}
}

func (x *ApbMultiArrayFloatResp) GetFloatValues() []float64 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

type ApbMultiArrayDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataValues [][]byte `protobuf:"bytes,1,rep,name=dataValues" json:"dataValues,omitempty"`
}

func (x *ApbMultiArrayDataResp) Reset() {
	*x = ApbMultiArrayDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataResp) ProtoMessage() {}

func (x *ApbMultiArrayDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{191}
}

func (x *ApbMultiArrayDataResp) GetDataValues() [][]byte {
	if x != nil {
		return x.DataValues
	}
	return nil
}

type ApbMultiArrayAvgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sums   []int64 `protobuf:"varint,1,rep,name=sums" json:"sums,omitempty"`
	Counts []int64 `protobuf:"varint,2,rep,name=counts" json:"counts,omitempty"`
}

func (x *ApbMultiArrayAvgResp) Reset() {
	*x = ApbMultiArrayAvgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayAvgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayAvgResp) ProtoMessage() {}

func (x *ApbMultiArrayAvgResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayAvgResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayAvgResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{192}
}

func (x *ApbMultiArrayAvgResp) GetSums() []int64 {
	if x != nil {
		return x.Sums
	}
	return nil
}

func (x *ApbMultiArrayAvgResp) GetCounts() []int64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ApbMultiArraySingleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntValue   *int64   `protobuf:"varint,1,opt,name=intValue" json:"intValue,omitempty"`
	FloatValue *float64 `protobuf:"fixed64,2,opt,name=floatValue" json:"floatValue,omitempty"`
	DataValue  []byte   `protobuf:"bytes,3,opt,name=dataValue" json:"dataValue,omitempty"`
	SumValue   *int64   `protobuf:"varint,4,opt,name=sumValue" json:"sumValue,omitempty"` //Keep both intValue and sumValue in case the read is of both int and avg.
	CountValue *int64   `protobuf:"varint,5,opt,name=countValue" json:"countValue,omitempty"`
}

func (x *ApbMultiArraySingleResp) Reset() {
	*x = ApbMultiArraySingleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArraySingleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArraySingleResp) ProtoMessage() {}

func (x *ApbMultiArraySingleResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArraySingleResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArraySingleResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{193}
}

func (x *ApbMultiArraySingleResp) GetIntValue() int64 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *ApbMultiArraySingleResp) GetFloatValue() float64 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *ApbMultiArraySingleResp) GetDataValue() []byte {
	if x != nil {
		return x.DataValue
	}
	return nil
}

func (x *ApbMultiArraySingleResp) GetSumValue() int64 {
	if x != nil && x.SumValue != nil {
		return *x.SumValue
	}
	return 0
}

func (x *ApbMultiArraySingleResp) GetCountValue() int64 {
	if x != nil && x.CountValue != nil {
		return *x.CountValue
	}
	return 0
}

type ApbMultiArrayDataAndSingleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataValues [][]byte `protobuf:"bytes,1,rep,name=dataValues" json:"dataValues,omitempty"`
	IntValue   *int64   `protobuf:"varint,2,opt,name=intValue" json:"intValue,omitempty"` //Also doubles as sumValue for avg
	FloatValue *float64 `protobuf:"fixed64,3,opt,name=floatValue" json:"floatValue,omitempty"`
	CountValue *int64   `protobuf:"varint,4,opt,name=countValue" json:"countValue,omitempty"`
}

func (x *ApbMultiArrayDataAndSingleResp) Reset() {
	*x = ApbMultiArrayDataAndSingleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMultiArrayDataAndSingleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMultiArrayDataAndSingleResp) ProtoMessage() {}

func (x *ApbMultiArrayDataAndSingleResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMultiArrayDataAndSingleResp.ProtoReflect.Descriptor instead.
func (*ApbMultiArrayDataAndSingleResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{194}
}

func (x *ApbMultiArrayDataAndSingleResp) GetDataValues() [][]byte {
	if x != nil {
		return x.DataValues
	}
	return nil
}

func (x *ApbMultiArrayDataAndSingleResp) GetIntValue() int64 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *ApbMultiArrayDataAndSingleResp) GetFloatValue() float64 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *ApbMultiArrayDataAndSingleResp) GetCountValue() int64 {
	if x != nil && x.CountValue != nil {
		return *x.CountValue
	}
	return 0
}

type ApbMVRegPartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single *ApbMVRegSingleResp `protobuf:"bytes,1,opt,name=single" json:"single,omitempty"`
}

func (x *ApbMVRegPartialReadResp) Reset() {
	*x = ApbMVRegPartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMVRegPartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMVRegPartialReadResp) ProtoMessage() {}

func (x *ApbMVRegPartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMVRegPartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbMVRegPartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{195}
}

func (x *ApbMVRegPartialReadResp) GetSingle() *ApbMVRegSingleResp {
	if x != nil {
		return x.Single
	}
	return nil
}

type ApbMVRegSingleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *ApbMVRegSingleResp) Reset() {
	*x = ApbMVRegSingleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbMVRegSingleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbMVRegSingleResp) ProtoMessage() {}

func (x *ApbMVRegSingleResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbMVRegSingleResp.ProtoReflect.Descriptor instead.
func (*ApbMVRegSingleResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{196}
}

func (x *ApbMVRegSingleResp) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ApbDatePartialReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full      *ApbDateFullResp  `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Time      *ApbTimeResp      `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	DateOnly  *ApbDateOnlyResp  `protobuf:"bytes,3,opt,name=dateOnly" json:"dateOnly,omitempty"`
	Timestamp *ApbTimestampResp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *ApbDatePartialReadResp) Reset() {
	*x = ApbDatePartialReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDatePartialReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDatePartialReadResp) ProtoMessage() {}

func (x *ApbDatePartialReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDatePartialReadResp.ProtoReflect.Descriptor instead.
func (*ApbDatePartialReadResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{197}
}

func (x *ApbDatePartialReadResp) GetFull() *ApbDateFullResp {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *ApbDatePartialReadResp) GetTime() *ApbTimeResp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ApbDatePartialReadResp) GetDateOnly() *ApbDateOnlyResp {
	if x != nil {
		return x.DateOnly
	}
	return nil
}

func (x *ApbDatePartialReadResp) GetTimestamp() *ApbTimestampResp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ApbDateFullResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year        *int32 `protobuf:"varint,1,req,name=year" json:"year,omitempty"`
	Month       *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Day         *int32 `protobuf:"varint,3,req,name=day" json:"day,omitempty"`
	Hour        *int32 `protobuf:"varint,4,req,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,5,req,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,6,req,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,7,req,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbDateFullResp) Reset() {
	*x = ApbDateFullResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateFullResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateFullResp) ProtoMessage() {}

func (x *ApbDateFullResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateFullResp.ProtoReflect.Descriptor instead.
func (*ApbDateFullResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{198}
}

func (x *ApbDateFullResp) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateFullResp) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateFullResp) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *ApbDateFullResp) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbDateFullResp) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbDateFullResp) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbDateFullResp) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour        *int32 `protobuf:"varint,1,req,name=hour" json:"hour,omitempty"`
	Minute      *int32 `protobuf:"varint,2,req,name=minute" json:"minute,omitempty"`
	Second      *int32 `protobuf:"varint,3,req,name=second" json:"second,omitempty"`
	Millisecond *int32 `protobuf:"varint,4,req,name=millisecond" json:"millisecond,omitempty"`
}

func (x *ApbTimeResp) Reset() {
	*x = ApbTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTimeResp) ProtoMessage() {}

func (x *ApbTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTimeResp.ProtoReflect.Descriptor instead.
func (*ApbTimeResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{199}
}

func (x *ApbTimeResp) GetHour() int32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *ApbTimeResp) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *ApbTimeResp) GetSecond() int32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *ApbTimeResp) GetMillisecond() int32 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

type ApbDateOnlyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  *int32 `protobuf:"varint,1,req,name=year" json:"year,omitempty"`
	Month *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Day   *int32 `protobuf:"varint,3,req,name=day" json:"day,omitempty"`
}

func (x *ApbDateOnlyResp) Reset() {
	*x = ApbDateOnlyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbDateOnlyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbDateOnlyResp) ProtoMessage() {}

func (x *ApbDateOnlyResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbDateOnlyResp.ProtoReflect.Descriptor instead.
func (*ApbDateOnlyResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{200}
}

func (x *ApbDateOnlyResp) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *ApbDateOnlyResp) GetMonth() int32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *ApbDateOnlyResp) GetDay() int32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

type ApbTimestampResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
}

func (x *ApbTimestampResp) Reset() {
	*x = ApbTimestampResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_antidote_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApbTimestampResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApbTimestampResp) ProtoMessage() {}

func (x *ApbTimestampResp) ProtoReflect() protoreflect.Message {
	mi := &file_antidote_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApbTimestampResp.ProtoReflect.Descriptor instead.
func (*ApbTimestampResp) Descriptor() ([]byte, []int) {
	return file_antidote_proto_rawDescGZIP(), []int{201}
}

func (x *ApbTimestampResp) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

var File_antidote_proto protoreflect.FileDescriptor

var file_antidote_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x40, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x1e, 0x0a, 0x08, 0x54, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x24, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x22, 0x29, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x22, 0x2e,
	0x0a, 0x16, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x72, 0x65, 0x6d, 0x73, 0x22, 0x20, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x70,
	0x62, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x24, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x52, 0x65, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x62, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29,
	0x0a, 0x0f, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x09, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x52, 0x44, 0x54, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x64, 0x64, 0x73,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41,
	0x64, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x5f, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x4d,
	0x61, 0x70, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41,
	0x70, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x41, 0x70, 0x62,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x62,
	0x46, 0x6c, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x26, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x43,
	0x72, 0x64, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x4a, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x52,
	0x6d, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x11, 0x52, 0x04, 0x72, 0x65, 0x6d, 0x73, 0x22, 0x41, 0x0a,
	0x0d, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x43, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x54,
	0x6f, 0x70, 0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54,
	0x6f, 0x70, 0x53, 0x75, 0x6d, 0x22, 0x35, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62, 0x49, 0x6e, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x0a,
	0x41, 0x70, 0x62, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4b, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62, 0x49, 0x6e, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x61, 0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a,
	0x15, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42,
	0x0a, 0x10, 0x41, 0x70, 0x62, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x25, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x22, 0x3d, 0x0a, 0x0f, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x28, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x45, 0x71, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x45, 0x71, 0x22, 0x50, 0x0a,
	0x14, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22,
	0x45, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x12, 0x34, 0x0a,
	0x06, 0x69, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x06, 0x69, 0x6e, 0x63,
	0x41, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12,
	0x34, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x53, 0x75, 0x62, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x42, 0x0a, 0x18, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x22, 0x2f, 0x0a, 0x1b, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x22, 0x33, 0x0a, 0x1d, 0x41, 0x70, 0x62, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x73, 0x22, 0x4b, 0x0a, 0x1b,
	0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x41, 0x70, 0x62,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x55, 0x70, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x55, 0x70, 0x64, 0x12, 0x32,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x76, 0x67, 0x55, 0x70, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x76, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x61, 0x76, 0x67,
	0x55, 0x70, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x69,
	0x7a, 0x65, 0x55, 0x70, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x55, 0x70,
	0x64, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x52,
	0x03, 0x69, 0x6e, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x69, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e,
	0x74, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf2, 0x01, 0x0a,
	0x18, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x69, 0x6e, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x52, 0x03,
	0x69, 0x6e, 0x63, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x69, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49,
	0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x70, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x06, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x52,
	0x03, 0x69, 0x6e, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x69, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76,
	0x67, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x69,
	0x6e, 0x63, 0x50, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x1a, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x61, 0x76, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x41, 0x70, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e,
	0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x48, 0x0a, 0x1c, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x41,
	0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x1b, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x4a, 0x0a, 0x1e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x41,
	0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x49, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x42, 0x0a, 0x1a, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x1d, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x19,
	0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x45, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x19, 0x41, 0x70, 0x62, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x1c, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x18, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67, 0x49, 0x6e, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x75, 0x6d, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x41,
	0x70, 0x62, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x75, 0x6d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x0d, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x53, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x05,
	0x73, 0x65, 0x74, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x70,
	0x62, 0x53, 0x65, 0x74, 0x4d, 0x53, 0x52, 0x05, 0x73, 0x65, 0x74, 0x4d, 0x53, 0x12, 0x1d, 0x0a,
	0x03, 0x69, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x12, 0x29, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x63, 0x4d, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x41, 0x70, 0x62, 0x49, 0x6e, 0x63, 0x4d, 0x53, 0x52, 0x05, 0x69, 0x6e,
	0x63, 0x4d, 0x53, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x62, 0x44,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x44,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x0a, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22,
	0x4c, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x76, 0x0a,
	0x0e, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x1a, 0x0a,
	0x08, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4d, 0x53, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x6d, 0x73, 0x22, 0x1c, 0x0a, 0x08, 0x41, 0x70, 0x62,
	0x49, 0x6e, 0x63, 0x4d, 0x53, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x63, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x41, 0x70,
	0x62, 0x54, 0x78, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x52, 0x44,
	0x54, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x7c, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41,
	0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x22, 0x73, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x06, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x65, 0x74, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x65, 0x67, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f,
	0x70, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x74, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x72, 0x64,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x74, 0x6f, 0x70, 0x12,
	0x26, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x41, 0x70, 0x62, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x66, 0x6c, 0x61, 0x67, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x6b, 0x69,
	0x6e, 0x69, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x70,
	0x62, 0x54, 0x6f, 0x70, 0x4b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x6b, 0x69,
	0x6e, 0x69, 0x74, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x6d, 0x69, 0x6e, 0x6f,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x78,
	0x4d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x6d, 0x69,
	0x6e, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x6b, 0x72, 0x6d, 0x76, 0x6f, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b,
	0x52, 0x6d, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x6b, 0x72,
	0x6d, 0x76, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x6b, 0x6f, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x6b, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x6f, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x76, 0x67,
	0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x61, 0x76, 0x67,
	0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x50,
	0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x12,
	0x3e, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x12,
	0x38, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6f, 0x70, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62, 0x44,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x6f,
	0x70, 0x22, 0x71, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x70, 0x62, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x41, 0x70, 0x62, 0x54, 0x78, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x13,
	0x41, 0x70, 0x62, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x14, 0x41, 0x70,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x16, 0x41, 0x70, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41,
	0x70, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x88,
	0x01, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x05, 0x0a, 0x11, 0x41, 0x70,
	0x62, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41,
	0x70, 0x62, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x52, 0x03, 0x72, 0x65,
	0x67, 0x12, 0x26, 0x0a, 0x05, 0x6d, 0x76, 0x72, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x05, 0x6d, 0x76, 0x72, 0x65, 0x67, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x29, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74,
	0x6f, 0x70, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b,
	0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x64, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x64, 0x62, 0x12, 0x24,
	0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70,
	0x62, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x03, 0x61, 0x76, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0b,
	0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41,
	0x70, 0x62, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x41, 0x70, 0x62, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x72, 0x65, 0x61, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x68, 0x0a, 0x0d, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x18, 0x41,
	0x70, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x41,
	0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a,
	0x15, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49,
	0x44, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7f, 0x0a, 0x0d, 0x41, 0x70,
	0x62, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70,
	0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x22, 0x75, 0x0a, 0x0e, 0x41,
	0x70, 0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x6f, 0x62, 0x6a,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x13, 0x41, 0x70,
	0x62, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x62, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x22, 0x20, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x51, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x71, 0x6c, 0x22, 0xa3, 0x03, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x53, 0x51, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x25, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x06, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51,
	0x4c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x11,
	0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x4f, 0x57, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x51, 0x4c, 0x5f,
	0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x4f, 0x4c, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x49, 0x6e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0x31, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x2a, 0x0a, 0x0a, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x0b, 0x41,
	0x70, 0x62, 0x53, 0x51, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x62,
	0x53, 0x51, 0x4c, 0x49, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41,
	0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x5c, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x22, 0x55, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x53, 0x51, 0x4c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x30, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x41,
	0x70, 0x62, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70,
	0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41,
	0x70, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x8a, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xe9, 0x03, 0x0a,
	0x12, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x29,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x61, 0x69,
	0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41,
	0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x76, 0x72, 0x65, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x05, 0x6d, 0x76, 0x72, 0x65, 0x67, 0x12,
	0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x41, 0x47, 0x47, 0x52, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x69, 0x0a,
	0x11, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4e, 0x45, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x06, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xb5, 0x05, 0x0a, 0x11, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2f,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x08, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x06, 0x68, 0x61, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65,
	0x74, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x07, 0x67, 0x65, 0x74, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x09, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0c, 0x67, 0x65, 0x74,
	0x61, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x64, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x64, 0x72, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x6c,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x0a,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x3d, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3a,
	0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x72, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x10, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x4f, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x14, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x61, 0x64,
	0x22, 0x78, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x67, 0x65, 0x74, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x47, 0x65,
	0x74, 0x4e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04, 0x67, 0x65, 0x74, 0x6e, 0x12, 0x3c, 0x0a, 0x0d,
	0x67, 0x65, 0x74, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x67, 0x65, 0x74,
	0x61, 0x62, 0x6f, 0x76, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x11, 0x41, 0x70,
	0x62, 0x41, 0x76, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x29, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x07, 0x67, 0x65, 0x74, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0x7e, 0x0a, 0x19, 0x41, 0x70,
	0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x41,
	0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x70, 0x62, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x12, 0x41, 0x0a, 0x0b,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x84, 0x03, 0x0a, 0x18, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12,
	0x27, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41,
	0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4e, 0x45,
	0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x51, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x4d,
	0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x41,
	0x70, 0x62, 0x4d, 0x61, 0x70, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x13, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x41, 0x47, 0x47, 0x52, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x67, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x43,
	0x0a, 0x16, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45,
	0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x3d, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x55, 0x0a,
	0x14, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x67, 0x22, 0x51, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x4d, 0x61,
	0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x59,
	0x0a, 0x1a, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x67, 0x22, 0xf0, 0x03, 0x0a, 0x0e, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x63, 0x6f, 0x6d, 0x70,
	0x12, 0x2f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x6d,
	0x70, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70,
	0x62, 0x43, 0x6f, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x6e, 0x6f,
	0x63, 0x6f, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62,
	0x43, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x06, 0x6e, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x76,
	0x61, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41,
	0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x76, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x12,
	0x3b, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x76, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x0c,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x76, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0x49, 0x0a, 0x11,
	0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0x4b, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x43, 0x6f,
	0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x6d, 0x70, 0x22, 0x4c, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x22, 0x4e, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x22, 0x4d, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x22, 0x3a, 0x0a, 0x11, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x22, 0x36, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x63, 0x6f, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d,
	0x50, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0x38, 0x0a, 0x16,
	0x41, 0x70, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x4d, 0x61,
	0x70, 0x45, 0x6d, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x43, 0x52, 0x44, 0x54, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x29, 0x0a, 0x0f, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x47, 0x65, 0x74, 0x4e, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x15, 0x41,
	0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x22, 0x1a, 0x0a,
	0x18, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x22, 0x31, 0x0a, 0x19, 0x41, 0x70, 0x62,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x32, 0x0a, 0x16,
	0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x22, 0x31, 0x0a, 0x19, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x1e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6b, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x22, 0x28, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x40, 0x0a, 0x16, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x3b, 0x0a, 0x14,
	0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x41, 0x70,
	0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a,
	0x19, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4d, 0x50, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x22, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x41, 0x70, 0x62,
	0x4d, 0x56, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x12, 0x41, 0x70,
	0x62, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x28, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x6b, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x70,
	0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x41, 0x70, 0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x76, 0x72, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x6d, 0x76, 0x72, 0x65,
	0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x75,
	0x0a, 0x15, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4e,
	0x45, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x6e,
	0x65, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x68, 0x61, 0x73, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x67, 0x65, 0x74, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x67, 0x65, 0x74, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x70, 0x62, 0x41, 0x76, 0x67, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x07, 0x67, 0x65, 0x74, 0x66, 0x75, 0x6c, 0x6c,
	0x22, 0x3f, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x54, 0x6f, 0x70, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x62, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x22, 0x28, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x68, 0x61, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x41,
	0x70, 0x62, 0x53, 0x65, 0x74, 0x4e, 0x45, 0x6c, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x70, 0x62, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x72,
	0x64, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43,
	0x52, 0x44, 0x54, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x72, 0x64, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x14, 0x41, 0x70,
	0x62, 0x4d, 0x61, 0x70, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x03, 0x68, 0x61, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x56, 0x0a, 0x13, 0x41, 0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41,
	0x70, 0x62, 0x4d, 0x61, 0x70, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x41, 0x70, 0x62,
	0x41, 0x76, 0x67, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x41, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x41, 0x64, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x70,
	0x62, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x1e, 0x41, 0x70, 0x62,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xef, 0x02, 0x0a, 0x1c, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x04, 0x61, 0x76, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x76, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x61, 0x76, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x70, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x16, 0x41, 0x70, 0x62,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x15, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x42,
	0x0a, 0x14, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x75, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x41, 0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x41,
	0x70, 0x62, 0x4d, 0x56, 0x52, 0x65, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x62, 0x44,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41,
	0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70,
	0x62, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x41, 0x70,
	0x62, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22,
	0x73, 0x0a, 0x0b, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x41, 0x70, 0x62, 0x44, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x22, 0x30, 0x0a, 0x10, 0x41, 0x70, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0xfc, 0x02, 0x0a, 0x09, 0x43, 0x52, 0x44, 0x54, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x57, 0x57, 0x52, 0x45, 0x47, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x56,
	0x52, 0x45, 0x47, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x57, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x52,
	0x4d, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x54, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x45, 0x57,
	0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x57, 0x10, 0x10, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4c, 0x57, 0x57, 0x10, 0x11, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x4f, 0x50, 0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x50, 0x4b, 0x5f,
	0x52, 0x4d, 0x56, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47, 0x10, 0x07, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x58, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x52, 0x4d, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x50, 0x53, 0x55, 0x4d,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x54,
	0x57, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x43, 0x57,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4f, 0x50, 0x10, 0x20, 0x2a, 0x51, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x56, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x64, 0x2a, 0x31, 0x0a, 0x0a, 0x52, 0x4f, 0x57, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x57, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x52, 0x57, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x57, 0x57, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x2f, 0x0a, 0x0a, 0x43, 0x4f,
	0x4c, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x57, 0x57, 0x5f,
	0x43, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x57, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x57, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x57, 0x10, 0x04, 0x2a, 0x50, 0x0a, 0x0c, 0x53,
	0x51, 0x4c, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41,
	0x52, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x2a, 0x78, 0x0a,
	0x08, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x08, 0x2a, 0x9d, 0x05, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x53, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x21, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x53, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x53,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x53, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x45, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x0f, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x45, 0x54, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x56,
	0x47, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x12,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x13,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x14, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x55, 0x42, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x53, 0x55, 0x42, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x1f, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x20, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x28,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x29, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x2b, 0x2a, 0x3c, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x45, 0x51, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x51, 0x10, 0x02, 0x12, 0x05,
	0x0a, 0x01, 0x4c, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x48, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x45, 0x51, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x42, 0x3a,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x61, 0x73, 0x68, 0x6f, 0x2e, 0x72, 0x69, 0x61, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x0a, 0x41, 0x6e, 0x74, 0x69, 0x64,
	0x6f, 0x74, 0x65, 0x50, 0x42, 0x5a, 0x13, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x2f,
	0x63, 0x72, 0x64, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_antidote_proto_rawDescOnce sync.Once
	file_antidote_proto_rawDescData = file_antidote_proto_rawDesc
)

func file_antidote_proto_rawDescGZIP() []byte {
	file_antidote_proto_rawDescOnce.Do(func() {
		file_antidote_proto_rawDescData = protoimpl.X.CompressGZIP(file_antidote_proto_rawDescData)
	})
	return file_antidote_proto_rawDescData
}

var file_antidote_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_antidote_proto_msgTypes = make([]protoimpl.MessageInfo, 202)
var file_antidote_proto_goTypes = []interface{}{
	(CRDTType)(0),                          // 0: CRDT_type
	(MultiArrayType)(0),                    // 1: MultiArrayType
	(ROW_Policy)(0),                        // 2: ROW_Policy
	(COL_Policy)(0),                        // 3: COL_Policy
	(SQL_Datatype)(0),                      // 4: SQL_Datatype
	(SQL_Type)(0),                          // 5: SQL_Type
	(READType)(0),                          // 6: READ_type
	(COMPType)(0),                          // 7: COMP_type
	(AGGRType)(0),                          // 8: AGGR_type
	(ApbSetUpdate_SetOpType)(0),            // 9: ApbSetUpdate.SetOpType
	(*ApbErrorResp)(nil),                   // 10: ApbErrorResp
	(*TmpProto)(nil),                       // 11: TmpProto
	(*ApbCounterUpdate)(nil),               // 12: ApbCounterUpdate
	(*ApbGetCounterResp)(nil),              // 13: ApbGetCounterResp
	(*ApbCounterFloatUpdate)(nil),          // 14: ApbCounterFloatUpdate
	(*ApbGetCounterFloatResp)(nil),         // 15: ApbGetCounterFloatResp
	(*ApbSetUpdate)(nil),                   // 16: ApbSetUpdate
	(*ApbGetSetResp)(nil),                  // 17: ApbGetSetResp
	(*ApbRegUpdate)(nil),                   // 18: ApbRegUpdate
	(*ApbGetRegResp)(nil),                  // 19: ApbGetRegResp
	(*ApbGetMVRegResp)(nil),                // 20: ApbGetMVRegResp
	(*ApbMapKey)(nil),                      // 21: ApbMapKey
	(*ApbMapUpdate)(nil),                   // 22: ApbMapUpdate
	(*ApbMapNestedUpdate)(nil),             // 23: ApbMapNestedUpdate
	(*ApbGetMapResp)(nil),                  // 24: ApbGetMapResp
	(*ApbMapEntry)(nil),                    // 25: ApbMapEntry
	(*ApbFlagUpdate)(nil),                  // 26: ApbFlagUpdate
	(*ApbGetFlagResp)(nil),                 // 27: ApbGetFlagResp
	(*ApbCrdtReset)(nil),                   // 28: ApbCrdtReset
	(*ApbOperationResp)(nil),               // 29: ApbOperationResp
	(*ApbTopkRmvUpdate)(nil),               // 30: ApbTopkRmvUpdate
	(*ApbTopkUpdate)(nil),                  // 31: ApbTopkUpdate
	(*ApbTopKInit)(nil),                    // 32: ApbTopKInit
	(*ApbGetTopkResp)(nil),                 // 33: ApbGetTopkResp
	(*ApbIntPair)(nil),                     // 34: ApbIntPair
	(*ApbLeaderboardUpdate)(nil),           // 35: ApbLeaderboardUpdate
	(*ApbGetLeaderboardResp)(nil),          // 36: ApbGetLeaderboardResp
	(*ApbAverageUpdate)(nil),               // 37: ApbAverageUpdate
	(*ApbGetAverageResp)(nil),              // 38: ApbGetAverageResp
	(*ApbMaxMinUpdate)(nil),                // 39: ApbMaxMinUpdate
	(*ApbGetMaxMinResp)(nil),               // 40: ApbGetMaxMinResp
	(*ApbBoundCounterUpdate)(nil),          // 41: ApbBoundCounterUpdate
	(*ApbPairCounterUpdate)(nil),           // 42: ApbPairCounterUpdate
	(*ApbGetPairCounterResp)(nil),          // 43: ApbGetPairCounterResp
	(*ApbArrayCounterUpdate)(nil),          // 44: ApbArrayCounterUpdate
	(*ApbArrayCounterIncrement)(nil),       // 45: ApbArrayCounterIncrement
	(*ApbArrayCounterIncrementAll)(nil),    // 46: ApbArrayCounterIncrementAll
	(*ApbArrayCounterIncrementMulti)(nil),  // 47: ApbArrayCounterIncrementMulti
	(*ApbArrayCounterIncrementSub)(nil),    // 48: ApbArrayCounterIncrementSub
	(*ApbArrayCounterSetSize)(nil),         // 49: ApbArrayCounterSetSize
	(*ApbGetArrayCounterResp)(nil),         // 50: ApbGetArrayCounterResp
	(*ApbMultiArrayUpdate)(nil),            // 51: ApbMultiArrayUpdate
	(*ApbMultiArrayIntUpdate)(nil),         // 52: ApbMultiArrayIntUpdate
	(*ApbMultiArrayFloatUpdate)(nil),       // 53: ApbMultiArrayFloatUpdate
	(*ApbMultiArrayDataUpdate)(nil),        // 54: ApbMultiArrayDataUpdate
	(*ApbMultiArrayAvgUpdate)(nil),         // 55: ApbMultiArrayAvgUpdate
	(*ApbMultiArraySetSizeUpdate)(nil),     // 56: ApbMultiArraySetSizeUpdate
	(*ApbMultiArrayIntInc)(nil),            // 57: ApbMultiArrayIntInc
	(*ApbMultiArrayIntIncSingle)(nil),      // 58: ApbMultiArrayIntIncSingle
	(*ApbMultiArrayIntIncPositions)(nil),   // 59: ApbMultiArrayIntIncPositions
	(*ApbMultiArrayIntIncRange)(nil),       // 60: ApbMultiArrayIntIncRange
	(*ApbMultiArrayFloatInc)(nil),          // 61: ApbMultiArrayFloatInc
	(*ApbMultiArrayFloatIncSingle)(nil),    // 62: ApbMultiArrayFloatIncSingle
	(*ApbMultiArrayFloatIncPositions)(nil), // 63: ApbMultiArrayFloatIncPositions
	(*ApbMultiArrayFloatIncRange)(nil),     // 64: ApbMultiArrayFloatIncRange
	(*ApbMultiArrayDataSet)(nil),           // 65: ApbMultiArrayDataSet
	(*ApbMultiArrayDataSetSingle)(nil),     // 66: ApbMultiArrayDataSetSingle
	(*ApbMultiArrayDataSetPositions)(nil),  // 67: ApbMultiArrayDataSetPositions
	(*ApbMultiArrayDataSetRange)(nil),      // 68: ApbMultiArrayDataSetRange
	(*ApbMultiArrayAvgInc)(nil),            // 69: ApbMultiArrayAvgInc
	(*ApbMultiArrayAvgIncSingle)(nil),      // 70: ApbMultiArrayAvgIncSingle
	(*ApbMultiArrayAvgIncPositions)(nil),   // 71: ApbMultiArrayAvgIncPositions
	(*ApbMultiArrayAvgIncRange)(nil),       // 72: ApbMultiArrayAvgIncRange
	(*ApbMultiArrayMultiUpdate)(nil),       // 73: ApbMultiArrayMultiUpdate
	(*ApbGetMultiArrayResp)(nil),           // 74: ApbGetMultiArrayResp
	(*ApbDateUpdate)(nil),                  // 75: ApbDateUpdate
	(*ApbDateSet)(nil),                     // 76: ApbDateSet
	(*ApbDateOnlySet)(nil),                 // 77: ApbDateOnlySet
	(*ApbTimeOnlySet)(nil),                 // 78: ApbTimeOnlySet
	(*ApbDateInc)(nil),                     // 79: ApbDateInc
	(*ApbDateOnlyInc)(nil),                 // 80: ApbDateOnlyInc
	(*ApbTimeOnlyInc)(nil),                 // 81: ApbTimeOnlyInc
	(*ApbDateInitialize)(nil),              // 82: ApbDateInitialize
	(*ApbSetMS)(nil),                       // 83: ApbSetMS
	(*ApbIncMS)(nil),                       // 84: ApbIncMS
	(*ApbGetDateResp)(nil),                 // 85: ApbGetDateResp
	(*ApbTxnProperties)(nil),               // 86: ApbTxnProperties
	(*ApbBoundObject)(nil),                 // 87: ApbBoundObject
	(*ApbReadObjects)(nil),                 // 88: ApbReadObjects
	(*ApbUpdateOp)(nil),                    // 89: ApbUpdateOp
	(*ApbUpdateOperation)(nil),             // 90: ApbUpdateOperation
	(*ApbUpdateObjects)(nil),               // 91: ApbUpdateObjects
	(*ApbStartTransaction)(nil),            // 92: ApbStartTransaction
	(*ApbAbortTransaction)(nil),            // 93: ApbAbortTransaction
	(*ApbCommitTransaction)(nil),           // 94: ApbCommitTransaction
	(*ApbStaticUpdateObjects)(nil),         // 95: ApbStaticUpdateObjects
	(*ApbStaticReadObjects)(nil),           // 96: ApbStaticReadObjects
	(*ApbStartTransactionResp)(nil),        // 97: ApbStartTransactionResp
	(*ApbReadObjectResp)(nil),              // 98: ApbReadObjectResp
	(*ApbReadObjectsResp)(nil),             // 99: ApbReadObjectsResp
	(*ApbCommitResp)(nil),                  // 100: ApbCommitResp
	(*ApbStaticReadObjectsResp)(nil),       // 101: ApbStaticReadObjectsResp
	(*ApbMultiClientConnect)(nil),          // 102: ApbMultiClientConnect
	(*ApbMultiClientConnectResp)(nil),      // 103: ApbMultiClientConnectResp
	(*ApbConnectReplica)(nil),              // 104: ApbConnectReplica
	(*ApbConnectReplicaResp)(nil),          // 105: ApbConnectReplicaResp
	(*ApbResetServer)(nil),                 // 106: ApbResetServer
	(*ApbResetServerResp)(nil),             // 107: ApbResetServerResp
	(*ApbNewTrigger)(nil),                  // 108: ApbNewTrigger
	(*ApbTriggerInfo)(nil),                 // 109: ApbTriggerInfo
	(*ApbNewTriggerReply)(nil),             // 110: ApbNewTriggerReply
	(*ApbGetTriggers)(nil),                 // 111: ApbGetTriggers
	(*ApbGetTriggersReply)(nil),            // 112: ApbGetTriggersReply
	(*ApbStringSQL)(nil),                   // 113: ApbStringSQL
	(*ApbTypedSQL)(nil),                    // 114: ApbTypedSQL
	(*ApbSQLCreateTable)(nil),              // 115: ApbSQLCreateTable
	(*ApbSQLCreateIndex)(nil),              // 116: ApbSQLCreateIndex
	(*ApbSQLCreateView)(nil),               // 117: ApbSQLCreateView
	(*ApbSQLInsert)(nil),                   // 118: ApbSQLInsert
	(*ApbSQLUpdate)(nil),                   // 119: ApbSQLUpdate
	(*ApbSQLDelete)(nil),                   // 120: ApbSQLDelete
	(*ApbSQLDrop)(nil),                     // 121: ApbSQLDrop
	(*ApbSQLQuery)(nil),                    // 122: ApbSQLQuery
	(*ApbSQLInvariant)(nil),                // 123: ApbSQLInvariant
	(*ApbSQLPrimaryKey)(nil),               // 124: ApbSQLPrimaryKey
	(*ApbSQLForeignKey)(nil),               // 125: ApbSQLForeignKey
	(*ApbSQLCheck)(nil),                    // 126: ApbSQLCheck
	(*ApbRead)(nil),                        // 127: ApbRead
	(*ApbStaticRead)(nil),                  // 128: ApbStaticRead
	(*ApbPartialRead)(nil),                 // 129: ApbPartialRead
	(*ApbPartialReadArgs)(nil),             // 130: ApbPartialReadArgs
	(*ApbProcessRead)(nil),                 // 131: ApbProcessRead
	(*ApbSetPartialRead)(nil),              // 132: ApbSetPartialRead
	(*ApbMapPartialRead)(nil),              // 133: ApbMapPartialRead
	(*ApbTopkPartialRead)(nil),             // 134: ApbTopkPartialRead
	(*ApbAvgPartialRead)(nil),              // 135: ApbAvgPartialRead
	(*ApbPairCounterPartialRead)(nil),      // 136: ApbPairCounterPartialRead
	(*ApbArrayCounterPartialRead)(nil),     // 137: ApbArrayCounterPartialRead
	(*ApbMultiArrayPartialRead)(nil),       // 138: ApbMultiArrayPartialRead
	(*ApbSetLookupRead)(nil),               // 139: ApbSetLookupRead
	(*ApbSetNElemsRead)(nil),               // 140: ApbSetNElemsRead
	(*ApbMapGetValueRead)(nil),             // 141: ApbMapGetValueRead
	(*ApbMapHasKeyRead)(nil),               // 142: ApbMapHasKeyRead
	(*ApbMapGetKeysRead)(nil),              // 143: ApbMapGetKeysRead
	(*ApbMapGetValuesRead)(nil),            // 144: ApbMapGetValuesRead
	(*ApbMapAggregateRead)(nil),            // 145: ApbMapAggregateRead
	(*ApbMapGetAllValuesRead)(nil),         // 146: ApbMapGetAllValuesRead
	(*ApbMapCondRead)(nil),                 // 147: ApbMapCondRead
	(*ApbMapAllCondRead)(nil),              // 148: ApbMapAllCondRead
	(*ApbMapExceptCondRead)(nil),           // 149: ApbMapExceptCondRead
	(*ApbMapExceptRead)(nil),               // 150: ApbMapExceptRead
	(*ApbMapExceptSingleRead)(nil),         // 151: ApbMapExceptSingleRead
	(*ApbMapExceptCondSingleRead)(nil),     // 152: ApbMapExceptCondSingleRead
	(*ApbMapCondArgs)(nil),                 // 153: ApbMapCondArgs
	(*ApbCondIntCompare)(nil),              // 154: ApbCondIntCompare
	(*ApbCondFloatCompare)(nil),            // 155: ApbCondFloatCompare
	(*ApbCondBoolCompare)(nil),             // 156: ApbCondBoolCompare
	(*ApbCondStringCompare)(nil),           // 157: ApbCondStringCompare
	(*ApbCondBytesCompare)(nil),            // 158: ApbCondBytesCompare
	(*ApbCondMapCompare)(nil),              // 159: ApbCondMapCompare
	(*ApbCondGetNoCompare)(nil),            // 160: ApbCondGetNoCompare
	(*ApbCondIntVarCompare)(nil),           // 161: ApbCondIntVarCompare
	(*ApbCondFloatVarCompare)(nil),         // 162: ApbCondFloatVarCompare
	(*ApbMapEmbPartialArgs)(nil),           // 163: ApbMapEmbPartialArgs
	(*ApbTopkGetNRead)(nil),                // 164: ApbTopkGetNRead
	(*ApbTopkAboveValueRead)(nil),          // 165: ApbTopkAboveValueRead
	(*ApbAvgFullRead)(nil),                 // 166: ApbAvgFullRead
	(*ApbPairCounterFirstRead)(nil),        // 167: ApbPairCounterFirstRead
	(*ApbPairCounterSecondRead)(nil),       // 168: ApbPairCounterSecondRead
	(*ApbArrayCounterSingleRead)(nil),      // 169: ApbArrayCounterSingleRead
	(*ApbArrayCounterSubRead)(nil),         // 170: ApbArrayCounterSubRead
	(*ApbArrayCounterExceptRead)(nil),      // 171: ApbArrayCounterExceptRead
	(*ApbArrayCounterExceptRangeRead)(nil), // 172: ApbArrayCounterExceptRangeRead
	(*ApbMultiArrayFullRead)(nil),          // 173: ApbMultiArrayFullRead
	(*ApbMultiArrayPosRead)(nil),           // 174: ApbMultiArrayPosRead
	(*ApbMultiArrayRangeRead)(nil),         // 175: ApbMultiArrayRangeRead
	(*ApbMultiArraySubRead)(nil),           // 176: ApbMultiArraySubRead
	(*ApbMultiArrayCondRead)(nil),          // 177: ApbMultiArrayCondRead
	(*ApbMultiArrayDataCondRead)(nil),      // 178: ApbMultiArrayDataCondRead
	(*ApbMultiArrayCustomRead)(nil),        // 179: ApbMultiArrayCustomRead
	(*IntSlice)(nil),                       // 180: IntSlice
	(*ApbMVRegPartialRead)(nil),            // 181: ApbMVRegPartialRead
	(*ApbMVRegSingleRead)(nil),             // 182: ApbMVRegSingleRead
	(*ApbDatePartialRead)(nil),             // 183: ApbDatePartialRead
	(*ApbPartialReadResp)(nil),             // 184: ApbPartialReadResp
	(*ApbSetPartialReadResp)(nil),          // 185: ApbSetPartialReadResp
	(*ApbMapPartialReadResp)(nil),          // 186: ApbMapPartialReadResp
	(*ApbAvgPartialReadResp)(nil),          // 187: ApbAvgPartialReadResp
	(*ApbTopkPartialReadResp)(nil),         // 188: ApbTopkPartialReadResp
	(*ApbSetLookupReadResp)(nil),           // 189: ApbSetLookupReadResp
	(*ApbSetNElemsReadResp)(nil),           // 190: ApbSetNElemsReadResp
	(*ApbMapGetValueResp)(nil),             // 191: ApbMapGetValueResp
	(*ApbMapHasKeyReadResp)(nil),           // 192: ApbMapHasKeyReadResp
	(*ApbMapGetKeysReadResp)(nil),          // 193: ApbMapGetKeysReadResp
	(*ApbMapGetValuesResp)(nil),            // 194: ApbMapGetValuesResp
	(*ApbAvgGetFullReadResp)(nil),          // 195: ApbAvgGetFullReadResp
	(*ApbPairCounterPartialReadResp)(nil),  // 196: ApbPairCounterPartialReadResp
	(*ApbArrayCounterPartialReadResp)(nil), // 197: ApbArrayCounterPartialReadResp
	(*ApbMultiArrayPartialReadResp)(nil),   // 198: ApbMultiArrayPartialReadResp
	(*ApbMultiArrayIntResp)(nil),           // 199: ApbMultiArrayIntResp
	(*ApbMultiArrayFloatResp)(nil),         // 200: ApbMultiArrayFloatResp
	(*ApbMultiArrayDataResp)(nil),          // 201: ApbMultiArrayDataResp
	(*ApbMultiArrayAvgResp)(nil),           // 202: ApbMultiArrayAvgResp
	(*ApbMultiArraySingleResp)(nil),        // 203: ApbMultiArraySingleResp
	(*ApbMultiArrayDataAndSingleResp)(nil), // 204: ApbMultiArrayDataAndSingleResp
	(*ApbMVRegPartialReadResp)(nil),        // 205: ApbMVRegPartialReadResp
	(*ApbMVRegSingleResp)(nil),             // 206: ApbMVRegSingleResp
	(*ApbDatePartialReadResp)(nil),         // 207: ApbDatePartialReadResp
	(*ApbDateFullResp)(nil),                // 208: ApbDateFullResp
	(*ApbTimeResp)(nil),                    // 209: ApbTimeResp
	(*ApbDateOnlyResp)(nil),                // 210: ApbDateOnlyResp
	(*ApbTimestampResp)(nil),               // 211: ApbTimestampResp
}
var file_antidote_proto_depIdxs = []int32{
	9,   // 0: ApbSetUpdate.optype:type_name -> ApbSetUpdate.SetOpType
	0,   // 1: ApbMapKey.type:type_name -> CRDT_type
	23,  // 2: ApbMapUpdate.updates:type_name -> ApbMapNestedUpdate
	21,  // 3: ApbMapUpdate.removedKeys:type_name -> ApbMapKey
	21,  // 4: ApbMapNestedUpdate.key:type_name -> ApbMapKey
	90,  // 5: ApbMapNestedUpdate.update:type_name -> ApbUpdateOperation
	25,  // 6: ApbGetMapResp.entries:type_name -> ApbMapEntry
	21,  // 7: ApbMapEntry.key:type_name -> ApbMapKey
	98,  // 8: ApbMapEntry.value:type_name -> ApbReadObjectResp
	34,  // 9: ApbTopkRmvUpdate.adds:type_name -> ApbIntPair
	34,  // 10: ApbGetTopkResp.values:type_name -> ApbIntPair
	34,  // 11: ApbLeaderboardUpdate.adds:type_name -> ApbIntPair
	45,  // 12: ApbArrayCounterUpdate.inc:type_name -> ApbArrayCounterIncrement
	46,  // 13: ApbArrayCounterUpdate.incAll:type_name -> ApbArrayCounterIncrementAll
	47,  // 14: ApbArrayCounterUpdate.incMulti:type_name -> ApbArrayCounterIncrementMulti
	48,  // 15: ApbArrayCounterUpdate.incSub:type_name -> ApbArrayCounterIncrementSub
	49,  // 16: ApbArrayCounterUpdate.size:type_name -> ApbArrayCounterSetSize
	1,   // 17: ApbMultiArrayUpdate.type:type_name -> MultiArrayType
	52,  // 18: ApbMultiArrayUpdate.intUpd:type_name -> ApbMultiArrayIntUpdate
	53,  // 19: ApbMultiArrayUpdate.floatUpd:type_name -> ApbMultiArrayFloatUpdate
	54,  // 20: ApbMultiArrayUpdate.dataUpd:type_name -> ApbMultiArrayDataUpdate
	55,  // 21: ApbMultiArrayUpdate.avgUpd:type_name -> ApbMultiArrayAvgUpdate
	73,  // 22: ApbMultiArrayUpdate.multiUpd:type_name -> ApbMultiArrayMultiUpdate
	56,  // 23: ApbMultiArrayUpdate.sizeUpd:type_name -> ApbMultiArraySetSizeUpdate
	57,  // 24: ApbMultiArrayIntUpdate.inc:type_name -> ApbMultiArrayIntInc
	58,  // 25: ApbMultiArrayIntUpdate.incSingle:type_name -> ApbMultiArrayIntIncSingle
	59,  // 26: ApbMultiArrayIntUpdate.incPos:type_name -> ApbMultiArrayIntIncPositions
	60,  // 27: ApbMultiArrayIntUpdate.incRange:type_name -> ApbMultiArrayIntIncRange
	61,  // 28: ApbMultiArrayFloatUpdate.inc:type_name -> ApbMultiArrayFloatInc
	62,  // 29: ApbMultiArrayFloatUpdate.incSingle:type_name -> ApbMultiArrayFloatIncSingle
	63,  // 30: ApbMultiArrayFloatUpdate.incPos:type_name -> ApbMultiArrayFloatIncPositions
	64,  // 31: ApbMultiArrayFloatUpdate.incRange:type_name -> ApbMultiArrayFloatIncRange
	65,  // 32: ApbMultiArrayDataUpdate.set:type_name -> ApbMultiArrayDataSet
	66,  // 33: ApbMultiArrayDataUpdate.setSingle:type_name -> ApbMultiArrayDataSetSingle
	67,  // 34: ApbMultiArrayDataUpdate.setPos:type_name -> ApbMultiArrayDataSetPositions
	68,  // 35: ApbMultiArrayDataUpdate.setRange:type_name -> ApbMultiArrayDataSetRange
	69,  // 36: ApbMultiArrayAvgUpdate.inc:type_name -> ApbMultiArrayAvgInc
	70,  // 37: ApbMultiArrayAvgUpdate.incSingle:type_name -> ApbMultiArrayAvgIncSingle
	71,  // 38: ApbMultiArrayAvgUpdate.incPos:type_name -> ApbMultiArrayAvgIncPositions
	72,  // 39: ApbMultiArrayAvgUpdate.incRange:type_name -> ApbMultiArrayAvgIncRange
	76,  // 40: ApbDateUpdate.set:type_name -> ApbDateSet
	77,  // 41: ApbDateUpdate.dateSet:type_name -> ApbDateOnlySet
	78,  // 42: ApbDateUpdate.timeSet:type_name -> ApbTimeOnlySet
	83,  // 43: ApbDateUpdate.setMS:type_name -> ApbSetMS
	79,  // 44: ApbDateUpdate.inc:type_name -> ApbDateInc
	80,  // 45: ApbDateUpdate.dateInc:type_name -> ApbDateOnlyInc
	81,  // 46: ApbDateUpdate.timeInc:type_name -> ApbTimeOnlyInc
	84,  // 47: ApbDateUpdate.incMS:type_name -> ApbIncMS
	82,  // 48: ApbDateUpdate.initialize:type_name -> ApbDateInitialize
	0,   // 49: ApbBoundObject.type:type_name -> CRDT_type
	87,  // 50: ApbReadObjects.boundobjects:type_name -> ApbBoundObject
	87,  // 51: ApbUpdateOp.boundobject:type_name -> ApbBoundObject
	90,  // 52: ApbUpdateOp.operation:type_name -> ApbUpdateOperation
	12,  // 53: ApbUpdateOperation.counterop:type_name -> ApbCounterUpdate
	16,  // 54: ApbUpdateOperation.setop:type_name -> ApbSetUpdate
	18,  // 55: ApbUpdateOperation.regop:type_name -> ApbRegUpdate
	41,  // 56: ApbUpdateOperation.bcounterop:type_name -> ApbBoundCounterUpdate
	22,  // 57: ApbUpdateOperation.mapop:type_name -> ApbMapUpdate
	28,  // 58: ApbUpdateOperation.resetop:type_name -> ApbCrdtReset
	26,  // 59: ApbUpdateOperation.flagop:type_name -> ApbFlagUpdate
	32,  // 60: ApbUpdateOperation.topkinitop:type_name -> ApbTopKInit
	39,  // 61: ApbUpdateOperation.maxminop:type_name -> ApbMaxMinUpdate
	30,  // 62: ApbUpdateOperation.topkrmvop:type_name -> ApbTopkRmvUpdate
	31,  // 63: ApbUpdateOperation.topkop:type_name -> ApbTopkUpdate
	35,  // 64: ApbUpdateOperation.leaderboardop:type_name -> ApbLeaderboardUpdate
	37,  // 65: ApbUpdateOperation.avgop:type_name -> ApbAverageUpdate
	14,  // 66: ApbUpdateOperation.counterfloatop:type_name -> ApbCounterFloatUpdate
	42,  // 67: ApbUpdateOperation.paircounterop:type_name -> ApbPairCounterUpdate
	44,  // 68: ApbUpdateOperation.arraycounterop:type_name -> ApbArrayCounterUpdate
	51,  // 69: ApbUpdateOperation.multiarrayop:type_name -> ApbMultiArrayUpdate
	75,  // 70: ApbUpdateOperation.dateop:type_name -> ApbDateUpdate
	89,  // 71: ApbUpdateObjects.updates:type_name -> ApbUpdateOp
	86,  // 72: ApbStartTransaction.properties:type_name -> ApbTxnProperties
	92,  // 73: ApbStaticUpdateObjects.transaction:type_name -> ApbStartTransaction
	89,  // 74: ApbStaticUpdateObjects.updates:type_name -> ApbUpdateOp
	92,  // 75: ApbStaticReadObjects.transaction:type_name -> ApbStartTransaction
	87,  // 76: ApbStaticReadObjects.objects:type_name -> ApbBoundObject
	13,  // 77: ApbReadObjectResp.counter:type_name -> ApbGetCounterResp
	17,  // 78: ApbReadObjectResp.set:type_name -> ApbGetSetResp
	19,  // 79: ApbReadObjectResp.reg:type_name -> ApbGetRegResp
	20,  // 80: ApbReadObjectResp.mvreg:type_name -> ApbGetMVRegResp
	24,  // 81: ApbReadObjectResp.map:type_name -> ApbGetMapResp
	27,  // 82: ApbReadObjectResp.flag:type_name -> ApbGetFlagResp
	40,  // 83: ApbReadObjectResp.maxmin:type_name -> ApbGetMaxMinResp
	33,  // 84: ApbReadObjectResp.topk:type_name -> ApbGetTopkResp
	36,  // 85: ApbReadObjectResp.leadb:type_name -> ApbGetLeaderboardResp
	38,  // 86: ApbReadObjectResp.avg:type_name -> ApbGetAverageResp
	15,  // 87: ApbReadObjectResp.counterfloat:type_name -> ApbGetCounterFloatResp
	43,  // 88: ApbReadObjectResp.paircounter:type_name -> ApbGetPairCounterResp
	50,  // 89: ApbReadObjectResp.arraycounter:type_name -> ApbGetArrayCounterResp
	74,  // 90: ApbReadObjectResp.multiarray:type_name -> ApbGetMultiArrayResp
	85,  // 91: ApbReadObjectResp.date:type_name -> ApbGetDateResp
	184, // 92: ApbReadObjectResp.partread:type_name -> ApbPartialReadResp
	98,  // 93: ApbReadObjectsResp.objects:type_name -> ApbReadObjectResp
	99,  // 94: ApbStaticReadObjectsResp.objects:type_name -> ApbReadObjectsResp
	100, // 95: ApbStaticReadObjectsResp.committime:type_name -> ApbCommitResp
	109, // 96: ApbNewTrigger.source:type_name -> ApbTriggerInfo
	109, // 97: ApbNewTrigger.target:type_name -> ApbTriggerInfo
	87,  // 98: ApbTriggerInfo.obj:type_name -> ApbBoundObject
	108, // 99: ApbGetTriggersReply.mapping:type_name -> ApbNewTrigger
	108, // 100: ApbGetTriggersReply.genericMapping:type_name -> ApbNewTrigger
	5,   // 101: ApbTypedSQL.type:type_name -> SQL_Type
	115, // 102: ApbTypedSQL.createTable:type_name -> ApbSQLCreateTable
	116, // 103: ApbTypedSQL.createIndex:type_name -> ApbSQLCreateIndex
	117, // 104: ApbTypedSQL.createView:type_name -> ApbSQLCreateView
	118, // 105: ApbTypedSQL.insert:type_name -> ApbSQLInsert
	119, // 106: ApbTypedSQL.update:type_name -> ApbSQLUpdate
	120, // 107: ApbTypedSQL.delete:type_name -> ApbSQLDelete
	121, // 108: ApbTypedSQL.drop:type_name -> ApbSQLDrop
	122, // 109: ApbTypedSQL.query:type_name -> ApbSQLQuery
	2,   // 110: ApbSQLCreateTable.rowPolicy:type_name -> ROW_Policy
	4,   // 111: ApbSQLCreateTable.datatypes:type_name -> SQL_Datatype
	3,   // 112: ApbSQLCreateTable.colPolicies:type_name -> COL_Policy
	123, // 113: ApbSQLCreateTable.invariants:type_name -> ApbSQLInvariant
	124, // 114: ApbSQLInvariant.primaryKey:type_name -> ApbSQLPrimaryKey
	125, // 115: ApbSQLInvariant.foreignKey:type_name -> ApbSQLForeignKey
	124, // 116: ApbSQLInvariant.unique:type_name -> ApbSQLPrimaryKey
	126, // 117: ApbSQLInvariant.check:type_name -> ApbSQLCheck
	7,   // 118: ApbSQLCheck.conditionType:type_name -> COMP_type
	87,  // 119: ApbRead.fullreads:type_name -> ApbBoundObject
	129, // 120: ApbRead.partialreads:type_name -> ApbPartialRead
	87,  // 121: ApbStaticRead.fullreads:type_name -> ApbBoundObject
	129, // 122: ApbStaticRead.partialreads:type_name -> ApbPartialRead
	92,  // 123: ApbStaticRead.transaction:type_name -> ApbStartTransaction
	87,  // 124: ApbPartialRead.object:type_name -> ApbBoundObject
	6,   // 125: ApbPartialRead.readtype:type_name -> READ_type
	130, // 126: ApbPartialRead.args:type_name -> ApbPartialReadArgs
	132, // 127: ApbPartialReadArgs.set:type_name -> ApbSetPartialRead
	133, // 128: ApbPartialReadArgs.map:type_name -> ApbMapPartialRead
	134, // 129: ApbPartialReadArgs.topk:type_name -> ApbTopkPartialRead
	135, // 130: ApbPartialReadArgs.avg:type_name -> ApbAvgPartialRead
	131, // 131: ApbPartialReadArgs.process:type_name -> ApbProcessRead
	136, // 132: ApbPartialReadArgs.paircounter:type_name -> ApbPairCounterPartialRead
	137, // 133: ApbPartialReadArgs.arraycounter:type_name -> ApbArrayCounterPartialRead
	138, // 134: ApbPartialReadArgs.multiarray:type_name -> ApbMultiArrayPartialRead
	181, // 135: ApbPartialReadArgs.mvreg:type_name -> ApbMVRegPartialRead
	183, // 136: ApbPartialReadArgs.date:type_name -> ApbDatePartialRead
	129, // 137: ApbProcessRead.prereads:type_name -> ApbPartialRead
	8,   // 138: ApbProcessRead.aggregationtype:type_name -> AGGR_type
	129, // 139: ApbProcessRead.postreads:type_name -> ApbPartialRead
	139, // 140: ApbSetPartialRead.lookup:type_name -> ApbSetLookupRead
	140, // 141: ApbSetPartialRead.nelems:type_name -> ApbSetNElemsRead
	141, // 142: ApbMapPartialRead.getvalue:type_name -> ApbMapGetValueRead
	142, // 143: ApbMapPartialRead.haskey:type_name -> ApbMapHasKeyRead
	143, // 144: ApbMapPartialRead.getkeys:type_name -> ApbMapGetKeysRead
	144, // 145: ApbMapPartialRead.getvalues:type_name -> ApbMapGetValuesRead
	146, // 146: ApbMapPartialRead.getallvalues:type_name -> ApbMapGetAllValuesRead
	147, // 147: ApbMapPartialRead.condread:type_name -> ApbMapCondRead
	148, // 148: ApbMapPartialRead.condallread:type_name -> ApbMapAllCondRead
	150, // 149: ApbMapPartialRead.exceptread:type_name -> ApbMapExceptRead
	149, // 150: ApbMapPartialRead.exceptcondread:type_name -> ApbMapExceptCondRead
	145, // 151: ApbMapPartialRead.aggregateread:type_name -> ApbMapAggregateRead
	151, // 152: ApbMapPartialRead.exceptsingleread:type_name -> ApbMapExceptSingleRead
	152, // 153: ApbMapPartialRead.exceptcondsingleread:type_name -> ApbMapExceptCondSingleRead
	164, // 154: ApbTopkPartialRead.getn:type_name -> ApbTopkGetNRead
	165, // 155: ApbTopkPartialRead.getabovevalue:type_name -> ApbTopkAboveValueRead
	166, // 156: ApbAvgPartialRead.getfull:type_name -> ApbAvgFullRead
	167, // 157: ApbPairCounterPartialRead.first:type_name -> ApbPairCounterFirstRead
	168, // 158: ApbPairCounterPartialRead.second:type_name -> ApbPairCounterSecondRead
	169, // 159: ApbArrayCounterPartialRead.single:type_name -> ApbArrayCounterSingleRead
	170, // 160: ApbArrayCounterPartialRead.sub:type_name -> ApbArrayCounterSubRead
	171, // 161: ApbArrayCounterPartialRead.except:type_name -> ApbArrayCounterExceptRead
	172, // 162: ApbArrayCounterPartialRead.exceptRange:type_name -> ApbArrayCounterExceptRangeRead
	1,   // 163: ApbMultiArrayPartialRead.types:type_name -> MultiArrayType
	173, // 164: ApbMultiArrayPartialRead.full:type_name -> ApbMultiArrayFullRead
	174, // 165: ApbMultiArrayPartialRead.pos:type_name -> ApbMultiArrayPosRead
	175, // 166: ApbMultiArrayPartialRead.range:type_name -> ApbMultiArrayRangeRead
	176, // 167: ApbMultiArrayPartialRead.sub:type_name -> ApbMultiArraySubRead
	177, // 168: ApbMultiArrayPartialRead.cond:type_name -> ApbMultiArrayCondRead
	178, // 169: ApbMultiArrayPartialRead.datacond:type_name -> ApbMultiArrayDataCondRead
	179, // 170: ApbMultiArrayPartialRead.custom:type_name -> ApbMultiArrayCustomRead
	163, // 171: ApbMapGetValueRead.args:type_name -> ApbMapEmbPartialArgs
	163, // 172: ApbMapGetValuesRead.args:type_name -> ApbMapEmbPartialArgs
	8,   // 173: ApbMapAggregateRead.aggregationtype:type_name -> AGGR_type
	153, // 174: ApbMapAggregateRead.condarg:type_name -> ApbMapCondArgs
	163, // 175: ApbMapAggregateRead.args:type_name -> ApbMapEmbPartialArgs
	163, // 176: ApbMapGetAllValuesRead.args:type_name -> ApbMapEmbPartialArgs
	153, // 177: ApbMapCondRead.condargs:type_name -> ApbMapCondArgs
	153, // 178: ApbMapAllCondRead.condarg:type_name -> ApbMapCondArgs
	163, // 179: ApbMapAllCondRead.args:type_name -> ApbMapEmbPartialArgs
	153, // 180: ApbMapExceptCondRead.condarg:type_name -> ApbMapCondArgs
	163, // 181: ApbMapExceptRead.args:type_name -> ApbMapEmbPartialArgs
	163, // 182: ApbMapExceptSingleRead.args:type_name -> ApbMapEmbPartialArgs
	153, // 183: ApbMapExceptCondSingleRead.condarg:type_name -> ApbMapCondArgs
	154, // 184: ApbMapCondArgs.intcomp:type_name -> ApbCondIntCompare
	155, // 185: ApbMapCondArgs.floatcomp:type_name -> ApbCondFloatCompare
	156, // 186: ApbMapCondArgs.boolcomp:type_name -> ApbCondBoolCompare
	157, // 187: ApbMapCondArgs.stringcomp:type_name -> ApbCondStringCompare
	158, // 188: ApbMapCondArgs.bytescomp:type_name -> ApbCondBytesCompare
	159, // 189: ApbMapCondArgs.mapcomp:type_name -> ApbCondMapCompare
	160, // 190: ApbMapCondArgs.nocomp:type_name -> ApbCondGetNoCompare
	161, // 191: ApbMapCondArgs.intvarcomp:type_name -> ApbCondIntVarCompare
	162, // 192: ApbMapCondArgs.floatvarcomp:type_name -> ApbCondFloatVarCompare
	7,   // 193: ApbCondIntCompare.comp:type_name -> COMP_type
	7,   // 194: ApbCondFloatCompare.comp:type_name -> COMP_type
	153, // 195: ApbCondMapCompare.value:type_name -> ApbMapCondArgs
	7,   // 196: ApbCondIntVarCompare.comp:type_name -> COMP_type
	7,   // 197: ApbCondFloatVarCompare.comp:type_name -> COMP_type
	0,   // 198: ApbMapEmbPartialArgs.type:type_name -> CRDT_type
	6,   // 199: ApbMapEmbPartialArgs.readtype:type_name -> READ_type
	130, // 200: ApbMapEmbPartialArgs.args:type_name -> ApbPartialReadArgs
	180, // 201: ApbMultiArraySubRead.indexes:type_name -> IntSlice
	7,   // 202: ApbMultiArrayCondRead.comp:type_name -> COMP_type
	1,   // 203: ApbMultiArrayCondRead.compareType:type_name -> MultiArrayType
	7,   // 204: ApbMultiArrayDataCondRead.comp:type_name -> COMP_type
	1,   // 205: ApbMultiArrayDataCondRead.compareType:type_name -> MultiArrayType
	182, // 206: ApbMVRegPartialRead.single:type_name -> ApbMVRegSingleRead
	6,   // 207: ApbDatePartialRead.dataReadType:type_name -> READ_type
	185, // 208: ApbPartialReadResp.set:type_name -> ApbSetPartialReadResp
	186, // 209: ApbPartialReadResp.map:type_name -> ApbMapPartialReadResp
	188, // 210: ApbPartialReadResp.topk:type_name -> ApbTopkPartialReadResp
	187, // 211: ApbPartialReadResp.avg:type_name -> ApbAvgPartialReadResp
	196, // 212: ApbPartialReadResp.paircounter:type_name -> ApbPairCounterPartialReadResp
	197, // 213: ApbPartialReadResp.arraycounter:type_name -> ApbArrayCounterPartialReadResp
	198, // 214: ApbPartialReadResp.multiarray:type_name -> ApbMultiArrayPartialReadResp
	205, // 215: ApbPartialReadResp.mvreg:type_name -> ApbMVRegPartialReadResp
	207, // 216: ApbPartialReadResp.date:type_name -> ApbDatePartialReadResp
	189, // 217: ApbSetPartialReadResp.lookup:type_name -> ApbSetLookupReadResp
	190, // 218: ApbSetPartialReadResp.nelems:type_name -> ApbSetNElemsReadResp
	191, // 219: ApbMapPartialReadResp.getvalue:type_name -> ApbMapGetValueResp
	192, // 220: ApbMapPartialReadResp.haskey:type_name -> ApbMapHasKeyReadResp
	193, // 221: ApbMapPartialReadResp.getkeys:type_name -> ApbMapGetKeysReadResp
	194, // 222: ApbMapPartialReadResp.getvalues:type_name -> ApbMapGetValuesResp
	195, // 223: ApbAvgPartialReadResp.getfull:type_name -> ApbAvgGetFullReadResp
	33,  // 224: ApbTopkPartialReadResp.pairs:type_name -> ApbGetTopkResp
	98,  // 225: ApbMapGetValueResp.value:type_name -> ApbReadObjectResp
	0,   // 226: ApbMapGetValueResp.crdttype:type_name -> CRDT_type
	6,   // 227: ApbMapGetValueResp.parttype:type_name -> READ_type
	191, // 228: ApbMapGetValuesResp.values:type_name -> ApbMapGetValueResp
	1,   // 229: ApbMultiArrayPartialReadResp.type:type_name -> MultiArrayType
	199, // 230: ApbMultiArrayPartialReadResp.ints:type_name -> ApbMultiArrayIntResp
	200, // 231: ApbMultiArrayPartialReadResp.floats:type_name -> ApbMultiArrayFloatResp
	201, // 232: ApbMultiArrayPartialReadResp.data:type_name -> ApbMultiArrayDataResp
	202, // 233: ApbMultiArrayPartialReadResp.avgs:type_name -> ApbMultiArrayAvgResp
	203, // 234: ApbMultiArrayPartialReadResp.single:type_name -> ApbMultiArraySingleResp
	204, // 235: ApbMultiArrayPartialReadResp.dataAndSingle:type_name -> ApbMultiArrayDataAndSingleResp
	206, // 236: ApbMVRegPartialReadResp.single:type_name -> ApbMVRegSingleResp
	208, // 237: ApbDatePartialReadResp.full:type_name -> ApbDateFullResp
	209, // 238: ApbDatePartialReadResp.time:type_name -> ApbTimeResp
	210, // 239: ApbDatePartialReadResp.dateOnly:type_name -> ApbDateOnlyResp
	211, // 240: ApbDatePartialReadResp.timestamp:type_name -> ApbTimestampResp
	241, // [241:241] is the sub-list for method output_type
	241, // [241:241] is the sub-list for method input_type
	241, // [241:241] is the sub-list for extension type_name
	241, // [241:241] is the sub-list for extension extendee
	0,   // [0:241] is the sub-list for field type_name
}

func init() { file_antidote_proto_init() }
func file_antidote_proto_init() {
	if File_antidote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_antidote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbErrorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmpProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetCounterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCounterFloatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetCounterFloatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetSetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbRegUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetRegResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetMVRegResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapNestedUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbFlagUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetFlagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCrdtReset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbOperationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkRmvUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopKInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetTopkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbIntPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbLeaderboardUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetLeaderboardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAverageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetAverageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMaxMinUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetMaxMinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbBoundCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPairCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetPairCounterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterIncrementAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterIncrementMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterIncrementSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterSetSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetArrayCounterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArraySetSizeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntIncSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntIncPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntIncRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatIncSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatIncPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatIncRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataSetSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataSetPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataSetRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgIncSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgIncPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgIncRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayMultiUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetMultiArrayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateOnlySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTimeOnlySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateOnlyInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTimeOnlyInc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateInitialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbIncMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetDateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTxnProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbBoundObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbReadObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbUpdateOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbUpdateOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbUpdateObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStartTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAbortTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCommitTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStaticUpdateObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStaticReadObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStartTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbReadObjectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbReadObjectsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCommitResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStaticReadObjectsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiClientConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiClientConnectResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbConnectReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbConnectReplicaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbResetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbResetServerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbNewTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTriggerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbNewTriggerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetTriggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbGetTriggersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStringSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTypedSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLCreateTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLCreateIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLCreateView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLInvariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLPrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLForeignKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSQLCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbStaticRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPartialReadArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbProcessRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAvgPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPairCounterPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetLookupRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetNElemsRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetValueRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapHasKeyRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetKeysRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetValuesRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapAggregateRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetAllValuesRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapCondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapAllCondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapExceptCondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapExceptRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapExceptSingleRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapExceptCondSingleRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapCondArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondIntCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondFloatCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondBoolCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondStringCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondBytesCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondMapCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondGetNoCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondIntVarCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbCondFloatVarCompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapEmbPartialArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkGetNRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkAboveValueRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAvgFullRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPairCounterFirstRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPairCounterSecondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterSingleRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterSubRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterExceptRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterExceptRangeRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFullRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayPosRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayRangeRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArraySubRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayCondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataCondRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayCustomRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMVRegPartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMVRegSingleRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDatePartialRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAvgPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTopkPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetLookupReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbSetNElemsReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetValueResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapHasKeyReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetKeysReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMapGetValuesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbAvgGetFullReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbPairCounterPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbArrayCounterPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayIntResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayFloatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayAvgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArraySingleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMultiArrayDataAndSingleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMVRegPartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbMVRegSingleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDatePartialReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateFullResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbDateOnlyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_antidote_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApbTimestampResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_antidote_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   202,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_antidote_proto_goTypes,
		DependencyIndexes: file_antidote_proto_depIdxs,
		EnumInfos:         file_antidote_proto_enumTypes,
		MessageInfos:      file_antidote_proto_msgTypes,
	}.Build()
	File_antidote_proto = out.File
	file_antidote_proto_rawDesc = nil
	file_antidote_proto_goTypes = nil
	file_antidote_proto_depIdxs = nil
}
